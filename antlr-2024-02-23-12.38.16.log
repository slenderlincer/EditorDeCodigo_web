2024-02-23 12:38:15:806 grammar LogManager.java:25 load LexerRules from ./grammar/CodeFile.g4
2024-02-23 12:38:15:812 grammar LogManager.java:25 before: (COMBINED_GRAMMAR CodeFile (import LexerRules) (RULES (RULE start (BLOCK (ALT INSERT CODE '{' content '}'))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT asignaciones))) (RULE declaraciones (BLOCK (ALT tipo ID (+ (BLOCK (ALT SEMI)))) (ALT tipo (= id (BLOCK (ALT ID_invalido) (ALT INT))) (+ (BLOCK (ALT SEMI)))) (ALT tipo ID '=' (= value expr) (+ (BLOCK (ALT SEMI)))))) (RULE asignaciones (BLOCK (ALT ID '=' expr (+ (BLOCK (ALT SEMI)))))) (RULE expr (BLOCK (ALT term (* (BLOCK (ALT (BLOCK (ALT PLUS) (ALT MINUS)) term)))))) (RULE term (BLOCK (ALT factor (* (BLOCK (ALT (BLOCK (ALT MULT) (ALT DIV)) factor)))))) (RULE factor (BLOCK (ALT ID) (ALT INT) (ALT FLOAT) (ALT '(' expr ')'))) (RULE tipo (BLOCK (ALT 'margit') (ALT 'radahn') (ALT 'godrick'))) (RULE PLUS (BLOCK (ALT '+'))) (RULE MINUS (BLOCK (ALT '-'))) (RULE MULT (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/')))))
2024-02-23 12:38:15:818 grammar LogManager.java:25 imported actions: []
2024-02-23 12:38:15:818 grammar LogManager.java:25 imported rule: (RULE INSERT (BLOCK (ALT 'iniciar')))
2024-02-23 12:38:15:819 grammar LogManager.java:25 imported rule: (RULE CODE (BLOCK (ALT 'codigo')))
2024-02-23 12:38:15:819 grammar LogManager.java:25 imported rule: (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z]))))))
2024-02-23 12:38:15:819 grammar LogManager.java:25 imported rule: (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9]))))))
2024-02-23 12:38:15:819 grammar LogManager.java:25 imported rule: (RULE FLOAT (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) [.] (+ (BLOCK (ALT [0-9]))))))
2024-02-23 12:38:15:819 grammar LogManager.java:25 imported rule: (RULE CHAR (BLOCK (ALT [a-zA-Z])))
2024-02-23 12:38:15:819 grammar LogManager.java:25 imported rule: (RULE ID_invalido (BLOCK (ALT (+ (BLOCK (ALT [A-Za-z0-9+\-]))))))
2024-02-23 12:38:15:819 grammar LogManager.java:25 imported rule: (RULE SEMI (BLOCK (ALT ';')))
2024-02-23 12:38:15:819 grammar LogManager.java:25 imported rule: (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))
2024-02-23 12:38:15:819 grammar LogManager.java:25 Grammar: (COMBINED_GRAMMAR CodeFile (import LexerRules) (RULES (RULE start (BLOCK (ALT INSERT CODE '{' content '}'))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT asignaciones))) (RULE declaraciones (BLOCK (ALT tipo ID (+ (BLOCK (ALT SEMI)))) (ALT tipo (= id (BLOCK (ALT ID_invalido) (ALT INT))) (+ (BLOCK (ALT SEMI)))) (ALT tipo ID '=' (= value expr) (+ (BLOCK (ALT SEMI)))))) (RULE asignaciones (BLOCK (ALT ID '=' expr (+ (BLOCK (ALT SEMI)))))) (RULE expr (BLOCK (ALT term (* (BLOCK (ALT (BLOCK (ALT PLUS) (ALT MINUS)) term)))))) (RULE term (BLOCK (ALT factor (* (BLOCK (ALT (BLOCK (ALT MULT) (ALT DIV)) factor)))))) (RULE factor (BLOCK (ALT ID) (ALT INT) (ALT FLOAT) (ALT '(' expr ')'))) (RULE tipo (BLOCK (ALT 'margit') (ALT 'radahn') (ALT 'godrick'))) (RULE PLUS (BLOCK (ALT '+'))) (RULE MINUS (BLOCK (ALT '-'))) (RULE MULT (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z])))))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE FLOAT (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) [.] (+ (BLOCK (ALT [0-9])))))) (RULE CHAR (BLOCK (ALT [a-zA-Z]))) (RULE ID_invalido (BLOCK (ALT (+ (BLOCK (ALT [A-Za-z0-9+\-])))))) (RULE SEMI (BLOCK (ALT ';'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-02-23 12:38:15:852 grammar LogManager.java:25 after: (COMBINED_GRAMMAR CodeFile (import LexerRules) (RULES (RULE start (BLOCK (ALT INSERT CODE '{' content '}'))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT asignaciones))) (RULE declaraciones (BLOCK (ALT tipo ID (+ (BLOCK (ALT SEMI)))) (ALT tipo (= id (SET ID_invalido INT)) (+ (BLOCK (ALT SEMI)))) (ALT tipo ID '=' (= value expr) (+ (BLOCK (ALT SEMI)))))) (RULE asignaciones (BLOCK (ALT ID '=' expr (+ (BLOCK (ALT SEMI)))))) (RULE expr (BLOCK (ALT term (* (BLOCK (ALT (SET PLUS MINUS) term)))))) (RULE term (BLOCK (ALT factor (* (BLOCK (ALT (SET MULT DIV) factor)))))) (RULE factor (BLOCK (ALT ID) (ALT INT) (ALT FLOAT) (ALT '(' expr ')'))) (RULE tipo (BLOCK (ALT (SET 'margit' 'radahn' 'godrick')))) (RULE PLUS (BLOCK (ALT '+'))) (RULE MINUS (BLOCK (ALT '-'))) (RULE MULT (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z])))))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE FLOAT (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) [.] (+ (BLOCK (ALT [0-9])))))) (RULE CHAR (BLOCK (ALT [a-zA-Z]))) (RULE ID_invalido (BLOCK (ALT (+ (BLOCK (ALT [A-Za-z0-9+\-])))))) (RULE SEMI (BLOCK (ALT ';'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-02-23 12:38:15:902 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR CodeFile (import LexerRules) (RULES (RULE start (BLOCK (ALT INSERT CODE '{' content '}'))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT asignaciones))) (RULE declaraciones (BLOCK (ALT tipo ID (+ (BLOCK (ALT SEMI)))) (ALT tipo (= id (SET ID_invalido INT)) (+ (BLOCK (ALT SEMI)))) (ALT tipo ID '=' (= value expr) (+ (BLOCK (ALT SEMI)))))) (RULE asignaciones (BLOCK (ALT ID '=' expr (+ (BLOCK (ALT SEMI)))))) (RULE expr (BLOCK (ALT term (* (BLOCK (ALT (SET PLUS MINUS) term)))))) (RULE term (BLOCK (ALT factor (* (BLOCK (ALT (SET MULT DIV) factor)))))) (RULE factor (BLOCK (ALT ID) (ALT INT) (ALT FLOAT) (ALT '(' expr ')'))) (RULE tipo (BLOCK (ALT (SET 'margit' 'radahn' 'godrick'))))))
2024-02-23 12:38:15:902 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR CodeFileLexer (RULES (RULE T__0 (BLOCK (ALT '{'))) (RULE T__1 (BLOCK (ALT '}'))) (RULE T__2 (BLOCK (ALT '='))) (RULE T__3 (BLOCK (ALT '('))) (RULE T__4 (BLOCK (ALT ')'))) (RULE T__5 (BLOCK (ALT 'margit'))) (RULE T__6 (BLOCK (ALT 'radahn'))) (RULE T__7 (BLOCK (ALT 'godrick'))) (RULE PLUS (BLOCK (ALT '+'))) (RULE MINUS (BLOCK (ALT '-'))) (RULE MULT (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z])))))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE FLOAT (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) [.] (+ (BLOCK (ALT [0-9])))))) (RULE CHAR (BLOCK (ALT [a-zA-Z]))) (RULE ID_invalido (BLOCK (ALT (+ (BLOCK (ALT [A-Za-z0-9+\-])))))) (RULE SEMI (BLOCK (ALT ';'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-02-23 12:38:16:296 semantics LogManager.java:25 tokens={EOF=-1, T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, PLUS=9, MINUS=10, MULT=11, DIV=12, INSERT=13, CODE=14, ID=15, INT=16, FLOAT=17, CHAR=18, ID_invalido=19, SEMI=20, WS=21}
2024-02-23 12:38:16:299 semantics LogManager.java:25 strings={'{'=1, '}'=2, '='=3, '('=4, ')'=5, 'margit'=6, 'radahn'=7, 'godrick'=8, '+'=9, '-'=10, '*'=11, '/'=12, 'iniciar'=13, 'codigo'=14, ';'=20}
2024-02-23 12:38:16:308 LL1 LogManager.java:25 
DECISION 0 in rule content
2024-02-23 12:38:16:308 LL1 LogManager.java:25 look=[{6..8, 15}, 2]
2024-02-23 12:38:16:312 LL1 LogManager.java:25 LL(1)? true
2024-02-23 12:38:16:312 LL1 LogManager.java:25 
DECISION 1 in rule expresiones
2024-02-23 12:38:16:312 LL1 LogManager.java:25 look=[{6..8}, 15]
2024-02-23 12:38:16:312 LL1 LogManager.java:25 LL(1)? true
2024-02-23 12:38:16:312 LL1 LogManager.java:25 
DECISION 2 in rule declaraciones
2024-02-23 12:38:16:312 LL1 LogManager.java:25 look=[20, {2, 6..8, 15}]
2024-02-23 12:38:16:312 LL1 LogManager.java:25 LL(1)? true
2024-02-23 12:38:16:312 LL1 LogManager.java:25 
DECISION 3 in rule declaraciones
2024-02-23 12:38:16:312 LL1 LogManager.java:25 look=[20, {2, 6..8, 15}]
2024-02-23 12:38:16:312 LL1 LogManager.java:25 LL(1)? true
2024-02-23 12:38:16:312 LL1 LogManager.java:25 
DECISION 4 in rule declaraciones
2024-02-23 12:38:16:312 LL1 LogManager.java:25 look=[20, {2, 6..8, 15}]
2024-02-23 12:38:16:312 LL1 LogManager.java:25 LL(1)? true
2024-02-23 12:38:16:312 LL1 LogManager.java:25 
DECISION 5 in rule declaraciones
2024-02-23 12:38:16:312 LL1 LogManager.java:25 look=[{6..8}, {6..8}, {6..8}]
2024-02-23 12:38:16:312 LL1 LogManager.java:25 LL(1)? false
2024-02-23 12:38:16:312 LL1 LogManager.java:25 
DECISION 6 in rule asignaciones
2024-02-23 12:38:16:312 LL1 LogManager.java:25 look=[20, {2, 6..8, 15}]
2024-02-23 12:38:16:312 LL1 LogManager.java:25 LL(1)? true
2024-02-23 12:38:16:312 LL1 LogManager.java:25 
DECISION 7 in rule expr
2024-02-23 12:38:16:312 LL1 LogManager.java:25 look=[{9..10}, {5, 20}]
2024-02-23 12:38:16:312 LL1 LogManager.java:25 LL(1)? true
2024-02-23 12:38:16:312 LL1 LogManager.java:25 
DECISION 8 in rule term
2024-02-23 12:38:16:312 LL1 LogManager.java:25 look=[{11..12}, {5, 9..10, 20}]
2024-02-23 12:38:16:312 LL1 LogManager.java:25 LL(1)? true
2024-02-23 12:38:16:312 LL1 LogManager.java:25 
DECISION 9 in rule factor
2024-02-23 12:38:16:312 LL1 LogManager.java:25 look=[15, 16, 17, 4]
2024-02-23 12:38:16:312 LL1 LogManager.java:25 LL(1)? true
