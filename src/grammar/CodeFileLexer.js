// Generated from ./grammar/CodeFile.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,20,132,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,5,1,5,
1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,
1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,5,13,92,
8,13,10,13,12,13,95,9,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
14,1,15,4,15,108,8,15,11,15,12,15,109,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
1,17,4,17,120,8,17,11,17,12,17,121,1,18,1,18,1,19,4,19,127,8,19,11,19,12,
19,128,1,19,1,19,0,0,20,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,1,0,4,1,0,34,34,
1,0,48,57,2,0,65,90,97,122,3,0,9,10,13,13,32,32,135,0,1,1,0,0,0,0,3,1,0,
0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,
0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,
27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,
0,0,0,39,1,0,0,0,1,41,1,0,0,0,3,43,1,0,0,0,5,45,1,0,0,0,7,47,1,0,0,0,9,55,
1,0,0,0,11,57,1,0,0,0,13,64,1,0,0,0,15,71,1,0,0,0,17,79,1,0,0,0,19,81,1,
0,0,0,21,83,1,0,0,0,23,85,1,0,0,0,25,87,1,0,0,0,27,89,1,0,0,0,29,98,1,0,
0,0,31,107,1,0,0,0,33,111,1,0,0,0,35,119,1,0,0,0,37,123,1,0,0,0,39,126,1,
0,0,0,41,42,5,123,0,0,42,2,1,0,0,0,43,44,5,125,0,0,44,4,1,0,0,0,45,46,5,
61,0,0,46,6,1,0,0,0,47,48,5,112,0,0,48,49,5,114,0,0,49,50,5,105,0,0,50,51,
5,110,0,0,51,52,5,116,0,0,52,53,5,102,0,0,53,54,5,40,0,0,54,8,1,0,0,0,55,
56,5,41,0,0,56,10,1,0,0,0,57,58,5,109,0,0,58,59,5,97,0,0,59,60,5,114,0,0,
60,61,5,103,0,0,61,62,5,105,0,0,62,63,5,116,0,0,63,12,1,0,0,0,64,65,5,114,
0,0,65,66,5,97,0,0,66,67,5,100,0,0,67,68,5,97,0,0,68,69,5,104,0,0,69,70,
5,110,0,0,70,14,1,0,0,0,71,72,5,103,0,0,72,73,5,111,0,0,73,74,5,100,0,0,
74,75,5,114,0,0,75,76,5,105,0,0,76,77,5,99,0,0,77,78,5,107,0,0,78,16,1,0,
0,0,79,80,5,40,0,0,80,18,1,0,0,0,81,82,5,42,0,0,82,20,1,0,0,0,83,84,5,47,
0,0,84,22,1,0,0,0,85,86,5,43,0,0,86,24,1,0,0,0,87,88,5,45,0,0,88,26,1,0,
0,0,89,93,5,34,0,0,90,92,8,0,0,0,91,90,1,0,0,0,92,95,1,0,0,0,93,91,1,0,0,
0,93,94,1,0,0,0,94,96,1,0,0,0,95,93,1,0,0,0,96,97,5,34,0,0,97,28,1,0,0,0,
98,99,5,105,0,0,99,100,5,110,0,0,100,101,5,105,0,0,101,102,5,99,0,0,102,
103,5,105,0,0,103,104,5,97,0,0,104,105,5,114,0,0,105,30,1,0,0,0,106,108,
7,1,0,0,107,106,1,0,0,0,108,109,1,0,0,0,109,107,1,0,0,0,109,110,1,0,0,0,
110,32,1,0,0,0,111,112,5,99,0,0,112,113,5,111,0,0,113,114,5,100,0,0,114,
115,5,105,0,0,115,116,5,103,0,0,116,117,5,111,0,0,117,34,1,0,0,0,118,120,
7,2,0,0,119,118,1,0,0,0,120,121,1,0,0,0,121,119,1,0,0,0,121,122,1,0,0,0,
122,36,1,0,0,0,123,124,5,59,0,0,124,38,1,0,0,0,125,127,7,3,0,0,126,125,1,
0,0,0,127,128,1,0,0,0,128,126,1,0,0,0,128,129,1,0,0,0,129,130,1,0,0,0,130,
131,6,19,0,0,131,40,1,0,0,0,5,0,93,109,121,128,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class CodeFileLexer extends antlr4.Lexer {

    static grammarFileName = "CodeFile.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'{'", "'}'", "'='", "'printf('", "')'", 
                         "'margit'", "'radahn'", "'godrick'", "'('", "'*'", 
                         "'/'", "'+'", "'-'", null, "'iniciar'", null, "'codigo'", 
                         null, "';'" ];
	static symbolicNames = [ null, null, null, null, null, null, null, null, 
                          null, null, "MUL", "DIV", "ADD", "SUB", "TEXTO", 
                          "INSERT", "INT", "CODE", "ID", "SEMI", "WS" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                      "T__7", "T__8", "MUL", "DIV", "ADD", "SUB", "TEXTO", 
                      "INSERT", "INT", "CODE", "ID", "SEMI", "WS" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

CodeFileLexer.EOF = antlr4.Token.EOF;
CodeFileLexer.T__0 = 1;
CodeFileLexer.T__1 = 2;
CodeFileLexer.T__2 = 3;
CodeFileLexer.T__3 = 4;
CodeFileLexer.T__4 = 5;
CodeFileLexer.T__5 = 6;
CodeFileLexer.T__6 = 7;
CodeFileLexer.T__7 = 8;
CodeFileLexer.T__8 = 9;
CodeFileLexer.MUL = 10;
CodeFileLexer.DIV = 11;
CodeFileLexer.ADD = 12;
CodeFileLexer.SUB = 13;
CodeFileLexer.TEXTO = 14;
CodeFileLexer.INSERT = 15;
CodeFileLexer.INT = 16;
CodeFileLexer.CODE = 17;
CodeFileLexer.ID = 18;
CodeFileLexer.SEMI = 19;
CodeFileLexer.WS = 20;



