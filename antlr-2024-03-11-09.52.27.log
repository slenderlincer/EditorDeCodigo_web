2024-03-11 09:52:27:028 grammar LogManager.java:25 load LexerRules from ./grammar/CodeFile.g4
2024-03-11 09:52:27:040 grammar LogManager.java:25 before: (COMBINED_GRAMMAR CodeFile (import LexerRules) (RULES (RULE start (BLOCK (ALT INSERT CODE '{' content '}'))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT asignaciones) (ALT imprimir))) (RULE declaraciones (BLOCK (ALT tipo ID SEMI) (ALT tipo ID '=' expr SEMI))) (RULE asignaciones (BLOCK (ALT ID '=' expr SEMI))) (RULE imprimir (BLOCK (ALT 'MostrarMensaje(' mensaje ')' SEMI))) (RULE mensaje (BLOCK (ALT TEXTO) (ALT expr) (ALT ID))) (RULE tipo (BLOCK (ALT 'margit') (ALT 'radahn') (ALT 'godrick'))) (RULE expr (BLOCK (ALT expr (= op (BLOCK (ALT '*') (ALT '/'))) expr) (ALT expr (= op (BLOCK (ALT '+') (ALT '-'))) expr) (ALT INT) (ALT ID) (ALT '(' expr ')')))))
2024-03-11 09:52:27:048 grammar LogManager.java:25 imported actions: []
2024-03-11 09:52:27:048 grammar LogManager.java:25 imported rule: (RULE INSERT (BLOCK (ALT 'iniciar')))
2024-03-11 09:52:27:048 grammar LogManager.java:25 imported rule: (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9]))))))
2024-03-11 09:52:27:048 grammar LogManager.java:25 imported rule: (RULE CODE (BLOCK (ALT 'codigo')))
2024-03-11 09:52:27:048 grammar LogManager.java:25 imported rule: (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z]))))))
2024-03-11 09:52:27:048 grammar LogManager.java:25 imported rule: (RULE SEMI (BLOCK (ALT ';')))
2024-03-11 09:52:27:048 grammar LogManager.java:25 imported rule: (RULE MUL (BLOCK (ALT '*')))
2024-03-11 09:52:27:048 grammar LogManager.java:25 imported rule: (RULE DIV (BLOCK (ALT '/')))
2024-03-11 09:52:27:048 grammar LogManager.java:25 imported rule: (RULE ADD (BLOCK (ALT '+')))
2024-03-11 09:52:27:048 grammar LogManager.java:25 imported rule: (RULE SUB (BLOCK (ALT '-')))
2024-03-11 09:52:27:048 grammar LogManager.java:25 imported rule: (RULE TEXTO (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"')))
2024-03-11 09:52:27:048 grammar LogManager.java:25 imported rule: (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))
2024-03-11 09:52:27:048 grammar LogManager.java:25 Grammar: (COMBINED_GRAMMAR CodeFile (import LexerRules) (RULES (RULE start (BLOCK (ALT INSERT CODE '{' content '}'))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT asignaciones) (ALT imprimir))) (RULE declaraciones (BLOCK (ALT tipo ID SEMI) (ALT tipo ID '=' expr SEMI))) (RULE asignaciones (BLOCK (ALT ID '=' expr SEMI))) (RULE imprimir (BLOCK (ALT 'MostrarMensaje(' mensaje ')' SEMI))) (RULE mensaje (BLOCK (ALT TEXTO) (ALT expr) (ALT ID))) (RULE tipo (BLOCK (ALT 'margit') (ALT 'radahn') (ALT 'godrick'))) (RULE expr (BLOCK (ALT expr (= op (BLOCK (ALT '*') (ALT '/'))) expr) (ALT expr (= op (BLOCK (ALT '+') (ALT '-'))) expr) (ALT INT) (ALT ID) (ALT '(' expr ')'))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z])))))) (RULE SEMI (BLOCK (ALT ';'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE TEXTO (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-03-11 09:52:27:104 grammar LogManager.java:25 after: (COMBINED_GRAMMAR CodeFile (import LexerRules) (RULES (RULE start (BLOCK (ALT INSERT CODE '{' content '}'))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT asignaciones) (ALT imprimir))) (RULE declaraciones (BLOCK (ALT tipo ID SEMI) (ALT tipo ID '=' expr SEMI))) (RULE asignaciones (BLOCK (ALT ID '=' expr SEMI))) (RULE imprimir (BLOCK (ALT 'MostrarMensaje(' mensaje ')' SEMI))) (RULE mensaje (BLOCK (ALT TEXTO) (ALT expr) (ALT ID))) (RULE tipo (BLOCK (ALT (SET 'margit' 'radahn' 'godrick')))) (RULE expr (BLOCK (ALT expr (= op (SET '*' '/')) expr) (ALT expr (= op (SET '+' '-')) expr) (ALT INT) (ALT ID) (ALT '(' expr ')'))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z])))))) (RULE SEMI (BLOCK (ALT ';'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE TEXTO (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-03-11 09:52:27:169 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR CodeFile (import LexerRules) (RULES (RULE start (BLOCK (ALT INSERT CODE '{' content '}'))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT asignaciones) (ALT imprimir))) (RULE declaraciones (BLOCK (ALT tipo ID SEMI) (ALT tipo ID '=' expr SEMI))) (RULE asignaciones (BLOCK (ALT ID '=' expr SEMI))) (RULE imprimir (BLOCK (ALT 'MostrarMensaje(' mensaje ')' SEMI))) (RULE mensaje (BLOCK (ALT TEXTO) (ALT expr) (ALT ID))) (RULE tipo (BLOCK (ALT (SET 'margit' 'radahn' 'godrick')))) (RULE expr (BLOCK (ALT expr (= op (SET '*' '/')) expr) (ALT expr (= op (SET '+' '-')) expr) (ALT INT) (ALT ID) (ALT '(' expr ')')))))
2024-03-11 09:52:27:169 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR CodeFileLexer (RULES (RULE T__0 (BLOCK (ALT '{'))) (RULE T__1 (BLOCK (ALT '}'))) (RULE T__2 (BLOCK (ALT '='))) (RULE T__3 (BLOCK (ALT 'MostrarMensaje('))) (RULE T__4 (BLOCK (ALT ')'))) (RULE T__5 (BLOCK (ALT 'margit'))) (RULE T__6 (BLOCK (ALT 'radahn'))) (RULE T__7 (BLOCK (ALT 'godrick'))) (RULE T__8 (BLOCK (ALT '('))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z])))))) (RULE SEMI (BLOCK (ALT ';'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE TEXTO (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-03-11 09:52:27:431 left-recursion LogManager.java:25 expr
    :   ( {} INT<tokenIndex=190>  
        | ID<tokenIndex=197>  
        | '('<tokenIndex=204> expr<tokenIndex=206> ')'<tokenIndex=208>  
        )
        (
          {this.precpred(this._ctx, 5)}?<p=5> op=('*'<tokenIndex=156> | '/'<tokenIndex=160>) expr<tokenIndex=163,p=6>
                  | {this.precpred(this._ctx, 4)}?<p=4> op=('+'<tokenIndex=176> | '-'<tokenIndex=180>) expr<tokenIndex=183,p=5>
        )*
    ;
2024-03-11 09:52:27:439 grammar LogManager.java:25 added: (RULE expr (BLOCK (ALT (BLOCK (ALT {} (INT (ELEMENT_OPTIONS (= tokenIndex 190)))) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 197)))) (ALT ('(' (ELEMENT_OPTIONS (= tokenIndex 204))) (expr (ELEMENT_OPTIONS (= tokenIndex 206))) (')' (ELEMENT_OPTIONS (= tokenIndex 208))))) (* (BLOCK (ALT ({this.precpred(this._ctx, 5)}? (ELEMENT_OPTIONS (= p 5))) (= op (SET ('*' (ELEMENT_OPTIONS (= tokenIndex 156))) ('/' (ELEMENT_OPTIONS (= tokenIndex 160))))) (expr (ELEMENT_OPTIONS (= tokenIndex 163) (= p 6)))) (ALT ({this.precpred(this._ctx, 4)}? (ELEMENT_OPTIONS (= p 4))) (= op (SET ('+' (ELEMENT_OPTIONS (= tokenIndex 176))) ('-' (ELEMENT_OPTIONS (= tokenIndex 180))))) (expr (ELEMENT_OPTIONS (= tokenIndex 183) (= p 5)))))))))
2024-03-11 09:52:27:447 semantics LogManager.java:25 tokens={EOF=-1, T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, INSERT=10, INT=11, CODE=12, ID=13, SEMI=14, MUL=15, DIV=16, ADD=17, SUB=18, TEXTO=19, WS=20}
2024-03-11 09:52:27:447 semantics LogManager.java:25 strings={'{'=1, '}'=2, '='=3, 'MostrarMensaje('=4, ')'=5, 'margit'=6, 'radahn'=7, 'godrick'=8, '('=9, 'iniciar'=10, 'codigo'=12, ';'=14, '*'=15, '/'=16, '+'=17, '-'=18}
2024-03-11 09:52:27:463 LL1 LogManager.java:25 
DECISION 0 in rule content
2024-03-11 09:52:27:463 LL1 LogManager.java:25 look=[{4, 6..8, 13}, 2]
2024-03-11 09:52:27:468 LL1 LogManager.java:25 LL(1)? true
2024-03-11 09:52:27:468 LL1 LogManager.java:25 
DECISION 1 in rule expresiones
2024-03-11 09:52:27:468 LL1 LogManager.java:25 look=[{6..8}, 13, 4]
2024-03-11 09:52:27:468 LL1 LogManager.java:25 LL(1)? true
2024-03-11 09:52:27:468 LL1 LogManager.java:25 
DECISION 2 in rule declaraciones
2024-03-11 09:52:27:468 LL1 LogManager.java:25 look=[{6..8}, {6..8}]
2024-03-11 09:52:27:468 LL1 LogManager.java:25 LL(1)? false
2024-03-11 09:52:27:468 LL1 LogManager.java:25 
DECISION 3 in rule mensaje
2024-03-11 09:52:27:468 LL1 LogManager.java:25 look=[19, {9, 11, 13}, 13]
2024-03-11 09:52:27:468 LL1 LogManager.java:25 LL(1)? false
2024-03-11 09:52:27:468 LL1 LogManager.java:25 
DECISION 4 in rule expr
2024-03-11 09:52:27:468 LL1 LogManager.java:25 look=[11, 13, 9]
2024-03-11 09:52:27:468 LL1 LogManager.java:25 LL(1)? true
2024-03-11 09:52:27:468 LL1 LogManager.java:25 
DECISION 5 in rule expr
2024-03-11 09:52:27:468 LL1 LogManager.java:25 look=[null, null]
2024-03-11 09:52:27:468 LL1 LogManager.java:25 LL(1)? false
2024-03-11 09:52:27:468 LL1 LogManager.java:25 
DECISION 6 in rule expr
2024-03-11 09:52:27:468 LL1 LogManager.java:25 look=[null, null]
2024-03-11 09:52:27:468 LL1 LogManager.java:25 LL(1)? false
2024-03-11 09:52:27:528 action-translator LogManager.java:25 translate 
2024-03-11 09:52:27:531 action-translator LogManager.java:25 translate this.precpred(this._ctx, 5)
2024-03-11 09:52:27:533 action-translator LogManager.java:25 translate this.precpred(this._ctx, 4)
2024-03-11 09:52:27:537 action-translator LogManager.java:25 translate this.precpred(this._ctx, 5)
2024-03-11 09:52:27:537 action-translator LogManager.java:25 translate this.precpred(this._ctx, 4)
