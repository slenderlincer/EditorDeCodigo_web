2024-03-15 11:52:12:072 grammar LogManager.java:25 load LexerRules from ./grammar/CodeFile.g4
2024-03-15 11:52:12:080 grammar LogManager.java:25 before: (COMBINED_GRAMMAR CodeFile (import LexerRules) (RULES (RULE start (BLOCK (ALT INSERT CODE '{' content '}'))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT asignaciones) (ALT imprimir) (ALT condiciones))) (RULE declaraciones (BLOCK (ALT tipo ID SEMI) (ALT tipo ID '=' expr SEMI))) (RULE asignaciones (BLOCK (ALT ID '=' expr SEMI))) (RULE imprimir (BLOCK (ALT 'MostrarMensaje(' expr ')' SEMI))) (RULE condiciones (BLOCK (ALT IF '(' condicion ')' '{' (* (BLOCK (ALT expresiones))) '}' (? (BLOCK (ALT OtherwiseBlock)))))) (RULE OtherwiseBlock (BLOCK (ALT ELSE '{' (* (BLOCK (ALT expresiones))) '}'))) (RULE condicion (BLOCK (ALT expr (= op (BLOCK (ALT MAYORQUE) (ALT MENORQUE) (ALT MAYORIGUAL) (ALT MENORIGUAL) (ALT DOBLEIGUAL) (ALT NEGACION))) expr))) (RULE tipo (BLOCK (ALT 'margit') (ALT 'radahn') (ALT 'godrick'))) (RULE expr (BLOCK (ALT expr (= op (BLOCK (ALT '*') (ALT '/'))) expr) (ALT expr (= op (BLOCK (ALT '+') (ALT '-'))) expr) (ALT INT) (ALT ID) (ALT STRING) (ALT '(' expr ')'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE MAYORQUE (BLOCK (ALT '>'))) (RULE MENORQUE (BLOCK (ALT '<'))) (RULE MAYORIGUAL (BLOCK (ALT '>='))) (RULE MENORIGUAL (BLOCK (ALT '<='))) (RULE DOBLEIGUAL (BLOCK (ALT '=='))) (RULE NEGACION (BLOCK (ALT '!=')))))
2024-03-15 11:52:12:088 grammar LogManager.java:25 imported actions: []
2024-03-15 11:52:12:088 grammar LogManager.java:25 imported rule: (RULE INSERT (BLOCK (ALT 'iniciar')))
2024-03-15 11:52:12:088 grammar LogManager.java:25 imported rule: (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9]))))))
2024-03-15 11:52:12:088 grammar LogManager.java:25 imported rule: (RULE CODE (BLOCK (ALT 'codigo')))
2024-03-15 11:52:12:088 grammar LogManager.java:25 imported rule: (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z]))))))
2024-03-15 11:52:12:088 grammar LogManager.java:25 imported rule: (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"')))
2024-03-15 11:52:12:088 grammar LogManager.java:25 imported rule: (RULE SEMI (BLOCK (ALT ';')))
2024-03-15 11:52:12:088 grammar LogManager.java:25 imported rule: (RULE MUL (BLOCK (ALT '*')))
2024-03-15 11:52:12:088 grammar LogManager.java:25 imported rule: (RULE DIV (BLOCK (ALT '/')))
2024-03-15 11:52:12:088 grammar LogManager.java:25 imported rule: (RULE ADD (BLOCK (ALT '+')))
2024-03-15 11:52:12:088 grammar LogManager.java:25 imported rule: (RULE SUB (BLOCK (ALT '-')))
2024-03-15 11:52:12:088 grammar LogManager.java:25 imported rule: (RULE IF (BLOCK (ALT 'if')))
2024-03-15 11:52:12:088 grammar LogManager.java:25 imported rule: (RULE ELSE (BLOCK (ALT 'else')))
2024-03-15 11:52:12:088 grammar LogManager.java:25 imported rule: (RULE MAYORQUE (BLOCK (ALT '>')))
2024-03-15 11:52:12:088 grammar LogManager.java:25 imported rule: (RULE MENORQUE (BLOCK (ALT '<')))
2024-03-15 11:52:12:088 grammar LogManager.java:25 imported rule: (RULE MAYORIGUAL (BLOCK (ALT '>=')))
2024-03-15 11:52:12:088 grammar LogManager.java:25 imported rule: (RULE MENORIGUAL (BLOCK (ALT '<=')))
2024-03-15 11:52:12:088 grammar LogManager.java:25 imported rule: (RULE DOBLEIGUAL (BLOCK (ALT '==')))
2024-03-15 11:52:12:088 grammar LogManager.java:25 imported rule: (RULE NEGACION (BLOCK (ALT '!=')))
2024-03-15 11:52:12:088 grammar LogManager.java:25 imported rule: (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))
2024-03-15 11:52:12:088 grammar LogManager.java:25 Grammar: (COMBINED_GRAMMAR CodeFile (import LexerRules) (RULES (RULE start (BLOCK (ALT INSERT CODE '{' content '}'))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT asignaciones) (ALT imprimir) (ALT condiciones))) (RULE declaraciones (BLOCK (ALT tipo ID SEMI) (ALT tipo ID '=' expr SEMI))) (RULE asignaciones (BLOCK (ALT ID '=' expr SEMI))) (RULE imprimir (BLOCK (ALT 'MostrarMensaje(' expr ')' SEMI))) (RULE condiciones (BLOCK (ALT IF '(' condicion ')' '{' (* (BLOCK (ALT expresiones))) '}' (? (BLOCK (ALT OtherwiseBlock)))))) (RULE OtherwiseBlock (BLOCK (ALT ELSE '{' (* (BLOCK (ALT expresiones))) '}'))) (RULE condicion (BLOCK (ALT expr (= op (BLOCK (ALT MAYORQUE) (ALT MENORQUE) (ALT MAYORIGUAL) (ALT MENORIGUAL) (ALT DOBLEIGUAL) (ALT NEGACION))) expr))) (RULE tipo (BLOCK (ALT 'margit') (ALT 'radahn') (ALT 'godrick'))) (RULE expr (BLOCK (ALT expr (= op (BLOCK (ALT '*') (ALT '/'))) expr) (ALT expr (= op (BLOCK (ALT '+') (ALT '-'))) expr) (ALT INT) (ALT ID) (ALT STRING) (ALT '(' expr ')'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE MAYORQUE (BLOCK (ALT '>'))) (RULE MENORQUE (BLOCK (ALT '<'))) (RULE MAYORIGUAL (BLOCK (ALT '>='))) (RULE MENORIGUAL (BLOCK (ALT '<='))) (RULE DOBLEIGUAL (BLOCK (ALT '=='))) (RULE NEGACION (BLOCK (ALT '!='))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z])))))) (RULE SEMI (BLOCK (ALT ';'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-03-15 11:52:12:121 grammar LogManager.java:25 after: (COMBINED_GRAMMAR CodeFile (import LexerRules) (RULES (RULE start (BLOCK (ALT INSERT CODE '{' content '}'))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT asignaciones) (ALT imprimir) (ALT condiciones))) (RULE declaraciones (BLOCK (ALT tipo ID SEMI) (ALT tipo ID '=' expr SEMI))) (RULE asignaciones (BLOCK (ALT ID '=' expr SEMI))) (RULE imprimir (BLOCK (ALT 'MostrarMensaje(' expr ')' SEMI))) (RULE condiciones (BLOCK (ALT IF '(' condicion ')' '{' (* (BLOCK (ALT expresiones))) '}' (? (BLOCK (ALT OtherwiseBlock)))))) (RULE OtherwiseBlock (BLOCK (ALT ELSE '{' (* (BLOCK (ALT expresiones))) '}'))) (RULE condicion (BLOCK (ALT expr (= op (SET MAYORQUE MENORQUE MAYORIGUAL MENORIGUAL DOBLEIGUAL NEGACION)) expr))) (RULE tipo (BLOCK (ALT (SET 'margit' 'radahn' 'godrick')))) (RULE expr (BLOCK (ALT expr (= op (SET '*' '/')) expr) (ALT expr (= op (SET '+' '-')) expr) (ALT INT) (ALT ID) (ALT STRING) (ALT '(' expr ')'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE MAYORQUE (BLOCK (ALT '>'))) (RULE MENORQUE (BLOCK (ALT '<'))) (RULE MAYORIGUAL (BLOCK (ALT '>='))) (RULE MENORIGUAL (BLOCK (ALT '<='))) (RULE DOBLEIGUAL (BLOCK (ALT '=='))) (RULE NEGACION (BLOCK (ALT '!='))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z])))))) (RULE SEMI (BLOCK (ALT ';'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-03-15 11:52:12:161 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR CodeFile (import LexerRules) (RULES (RULE start (BLOCK (ALT INSERT CODE '{' content '}'))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT asignaciones) (ALT imprimir) (ALT condiciones))) (RULE declaraciones (BLOCK (ALT tipo ID SEMI) (ALT tipo ID '=' expr SEMI))) (RULE asignaciones (BLOCK (ALT ID '=' expr SEMI))) (RULE imprimir (BLOCK (ALT 'MostrarMensaje(' expr ')' SEMI))) (RULE condiciones (BLOCK (ALT IF '(' condicion ')' '{' (* (BLOCK (ALT expresiones))) '}' (? (BLOCK (ALT OtherwiseBlock)))))) (RULE condicion (BLOCK (ALT expr (= op (SET MAYORQUE MENORQUE MAYORIGUAL MENORIGUAL DOBLEIGUAL NEGACION)) expr))) (RULE tipo (BLOCK (ALT (SET 'margit' 'radahn' 'godrick')))) (RULE expr (BLOCK (ALT expr (= op (SET '*' '/')) expr) (ALT expr (= op (SET '+' '-')) expr) (ALT INT) (ALT ID) (ALT STRING) (ALT '(' expr ')')))))
2024-03-15 11:52:12:161 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR CodeFileLexer (RULES (RULE T__0 (BLOCK (ALT '{'))) (RULE T__1 (BLOCK (ALT '}'))) (RULE T__2 (BLOCK (ALT '='))) (RULE T__3 (BLOCK (ALT 'MostrarMensaje('))) (RULE T__4 (BLOCK (ALT ')'))) (RULE T__5 (BLOCK (ALT '('))) (RULE T__6 (BLOCK (ALT 'margit'))) (RULE T__7 (BLOCK (ALT 'radahn'))) (RULE T__8 (BLOCK (ALT 'godrick'))) (RULE OtherwiseBlock (BLOCK (ALT ELSE '{' (* (BLOCK (ALT expresiones))) '}'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE MAYORQUE (BLOCK (ALT '>'))) (RULE MENORQUE (BLOCK (ALT '<'))) (RULE MAYORIGUAL (BLOCK (ALT '>='))) (RULE MENORIGUAL (BLOCK (ALT '<='))) (RULE DOBLEIGUAL (BLOCK (ALT '=='))) (RULE NEGACION (BLOCK (ALT '!='))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z])))))) (RULE SEMI (BLOCK (ALT ';'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-03-15 11:52:12:343 left-recursion LogManager.java:25 expr
    :   ( {} INT<tokenIndex=241>  
        | ID<tokenIndex=248>  
        | STRING<tokenIndex=255>  
        | '('<tokenIndex=262> expr<tokenIndex=264> ')'<tokenIndex=266>  
        )
        (
          {this.precpred(this._ctx, 6)}?<p=6> op=('*'<tokenIndex=207> | '/'<tokenIndex=211>) expr<tokenIndex=214,p=7>
                  | {this.precpred(this._ctx, 5)}?<p=5> op=('+'<tokenIndex=227> | '-'<tokenIndex=231>) expr<tokenIndex=234,p=6>
        )*
    ;
2024-03-15 11:52:12:349 grammar LogManager.java:25 added: (RULE expr (BLOCK (ALT (BLOCK (ALT {} (INT (ELEMENT_OPTIONS (= tokenIndex 241)))) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 248)))) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 255)))) (ALT ('(' (ELEMENT_OPTIONS (= tokenIndex 262))) (expr (ELEMENT_OPTIONS (= tokenIndex 264))) (')' (ELEMENT_OPTIONS (= tokenIndex 266))))) (* (BLOCK (ALT ({this.precpred(this._ctx, 6)}? (ELEMENT_OPTIONS (= p 6))) (= op (SET ('*' (ELEMENT_OPTIONS (= tokenIndex 207))) ('/' (ELEMENT_OPTIONS (= tokenIndex 211))))) (expr (ELEMENT_OPTIONS (= tokenIndex 214) (= p 7)))) (ALT ({this.precpred(this._ctx, 5)}? (ELEMENT_OPTIONS (= p 5))) (= op (SET ('+' (ELEMENT_OPTIONS (= tokenIndex 227))) ('-' (ELEMENT_OPTIONS (= tokenIndex 231))))) (expr (ELEMENT_OPTIONS (= tokenIndex 234) (= p 6)))))))))
2024-03-15 11:52:12:422 semantics LogManager.java:25 tokens={EOF=-1, INSERT=1, CODE=2, ID=3, SEMI=4, IF=5, OtherwiseBlock=6, MAYORQUE=7, MENORQUE=8, MAYORIGUAL=9, MENORIGUAL=10, DOBLEIGUAL=11, NEGACION=12, INT=13, STRING=14}
2024-03-15 11:52:12:422 semantics LogManager.java:25 strings={}
