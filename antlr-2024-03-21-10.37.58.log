2024-03-21 10:37:56:768 grammar LogManager.java:25 load LexerRules from ./grammar/CodeFile.g4
2024-03-21 10:37:56:777 grammar LogManager.java:25 before: (COMBINED_GRAMMAR CodeFile (import LexerRules) (RULES (RULE start (BLOCK (ALT INSERT CODE '{' content '}'))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT asignaciones) (ALT imprimir) (ALT ordenCondicion))) (RULE declaraciones (BLOCK (ALT tipo ID SEMI) (ALT tipo ID '=' expr SEMI))) (RULE asignaciones (BLOCK (ALT ID '=' expr SEMI))) (RULE imprimir (BLOCK (ALT 'MostrarMensaje(' expr ')' SEMI))) (RULE ordenCondicion (BLOCK (ALT condition_if (* (BLOCK (ALT otherwiseWithCondition))) (? (BLOCK (ALT otherwise)))))) (RULE condition_if (BLOCK (ALT IF '(' condicion) (ALT condicionSimple ')' '{' (* (BLOCK (ALT expresiones))) '}'))) (RULE otherwiseWithCondition (BLOCK (ALT ELSE condition_if))) (RULE otherwise (BLOCK (ALT ELSE '{' (* (BLOCK (ALT expresiones))) '}'))) (RULE condicion (BLOCK (ALT expr (= op (BLOCK (ALT MAYORQUE) (ALT MENORQUE) (ALT MAYORIGUAL) (ALT MENORIGUAL) (ALT DOBLEIGUAL) (ALT NEGACION))) expr))) (RULE condicionSimple (BLOCK (ALT VERDADERO) (ALT FALSE))) (RULE tipo (BLOCK (ALT 'margit') (ALT 'radahn') (ALT 'godrick'))) (RULE expr (BLOCK (ALT expr (= op (BLOCK (ALT '*') (ALT '/'))) expr) (ALT expr (= op (BLOCK (ALT '+') (ALT '-'))) expr) (ALT INT) (ALT ID) (ALT STRING) (ALT '(' expr ')'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE MAYORQUE (BLOCK (ALT '>'))) (RULE MENORQUE (BLOCK (ALT '<'))) (RULE MAYORIGUAL (BLOCK (ALT '>='))) (RULE MENORIGUAL (BLOCK (ALT '<='))) (RULE DOBLEIGUAL (BLOCK (ALT '=='))) (RULE NEGACION (BLOCK (ALT '!='))) (RULE VERDADERO (BLOCK (ALT 'true'))) (RULE FALSE (BLOCK (ALT 'false')))))
2024-03-21 10:37:56:783 grammar LogManager.java:25 imported actions: []
2024-03-21 10:37:56:785 grammar LogManager.java:25 imported rule: (RULE INSERT (BLOCK (ALT 'iniciar')))
2024-03-21 10:37:56:785 grammar LogManager.java:25 imported rule: (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9]))))))
2024-03-21 10:37:56:785 grammar LogManager.java:25 imported rule: (RULE CODE (BLOCK (ALT 'codigo')))
2024-03-21 10:37:56:785 grammar LogManager.java:25 imported rule: (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z]))))))
2024-03-21 10:37:56:785 grammar LogManager.java:25 imported rule: (RULE SEMI (BLOCK (ALT ';')))
2024-03-21 10:37:56:785 grammar LogManager.java:25 imported rule: (RULE MUL (BLOCK (ALT '*')))
2024-03-21 10:37:56:785 grammar LogManager.java:25 imported rule: (RULE DIV (BLOCK (ALT '/')))
2024-03-21 10:37:56:785 grammar LogManager.java:25 imported rule: (RULE ADD (BLOCK (ALT '+')))
2024-03-21 10:37:56:785 grammar LogManager.java:25 imported rule: (RULE SUB (BLOCK (ALT '-')))
2024-03-21 10:37:56:785 grammar LogManager.java:25 imported rule: (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))
2024-03-21 10:37:56:785 grammar LogManager.java:25 Grammar: (COMBINED_GRAMMAR CodeFile (import LexerRules) (RULES (RULE start (BLOCK (ALT INSERT CODE '{' content '}'))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT asignaciones) (ALT imprimir) (ALT ordenCondicion))) (RULE declaraciones (BLOCK (ALT tipo ID SEMI) (ALT tipo ID '=' expr SEMI))) (RULE asignaciones (BLOCK (ALT ID '=' expr SEMI))) (RULE imprimir (BLOCK (ALT 'MostrarMensaje(' expr ')' SEMI))) (RULE ordenCondicion (BLOCK (ALT condition_if (* (BLOCK (ALT otherwiseWithCondition))) (? (BLOCK (ALT otherwise)))))) (RULE condition_if (BLOCK (ALT IF '(' condicion) (ALT condicionSimple ')' '{' (* (BLOCK (ALT expresiones))) '}'))) (RULE otherwiseWithCondition (BLOCK (ALT ELSE condition_if))) (RULE otherwise (BLOCK (ALT ELSE '{' (* (BLOCK (ALT expresiones))) '}'))) (RULE condicion (BLOCK (ALT expr (= op (BLOCK (ALT MAYORQUE) (ALT MENORQUE) (ALT MAYORIGUAL) (ALT MENORIGUAL) (ALT DOBLEIGUAL) (ALT NEGACION))) expr))) (RULE condicionSimple (BLOCK (ALT VERDADERO) (ALT FALSE))) (RULE tipo (BLOCK (ALT 'margit') (ALT 'radahn') (ALT 'godrick'))) (RULE expr (BLOCK (ALT expr (= op (BLOCK (ALT '*') (ALT '/'))) expr) (ALT expr (= op (BLOCK (ALT '+') (ALT '-'))) expr) (ALT INT) (ALT ID) (ALT STRING) (ALT '(' expr ')'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE MAYORQUE (BLOCK (ALT '>'))) (RULE MENORQUE (BLOCK (ALT '<'))) (RULE MAYORIGUAL (BLOCK (ALT '>='))) (RULE MENORIGUAL (BLOCK (ALT '<='))) (RULE DOBLEIGUAL (BLOCK (ALT '=='))) (RULE NEGACION (BLOCK (ALT '!='))) (RULE VERDADERO (BLOCK (ALT 'true'))) (RULE FALSE (BLOCK (ALT 'false'))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z])))))) (RULE SEMI (BLOCK (ALT ';'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-03-21 10:37:56:818 grammar LogManager.java:25 after: (COMBINED_GRAMMAR CodeFile (import LexerRules) (RULES (RULE start (BLOCK (ALT INSERT CODE '{' content '}'))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT asignaciones) (ALT imprimir) (ALT ordenCondicion))) (RULE declaraciones (BLOCK (ALT tipo ID SEMI) (ALT tipo ID '=' expr SEMI))) (RULE asignaciones (BLOCK (ALT ID '=' expr SEMI))) (RULE imprimir (BLOCK (ALT 'MostrarMensaje(' expr ')' SEMI))) (RULE ordenCondicion (BLOCK (ALT condition_if (* (BLOCK (ALT otherwiseWithCondition))) (? (BLOCK (ALT otherwise)))))) (RULE condition_if (BLOCK (ALT IF '(' condicion) (ALT condicionSimple ')' '{' (* (BLOCK (ALT expresiones))) '}'))) (RULE otherwiseWithCondition (BLOCK (ALT ELSE condition_if))) (RULE otherwise (BLOCK (ALT ELSE '{' (* (BLOCK (ALT expresiones))) '}'))) (RULE condicion (BLOCK (ALT expr (= op (SET MAYORQUE MENORQUE MAYORIGUAL MENORIGUAL DOBLEIGUAL NEGACION)) expr))) (RULE condicionSimple (BLOCK (ALT (SET VERDADERO FALSE)))) (RULE tipo (BLOCK (ALT (SET 'margit' 'radahn' 'godrick')))) (RULE expr (BLOCK (ALT expr (= op (SET '*' '/')) expr) (ALT expr (= op (SET '+' '-')) expr) (ALT INT) (ALT ID) (ALT STRING) (ALT '(' expr ')'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE MAYORQUE (BLOCK (ALT '>'))) (RULE MENORQUE (BLOCK (ALT '<'))) (RULE MAYORIGUAL (BLOCK (ALT '>='))) (RULE MENORIGUAL (BLOCK (ALT '<='))) (RULE DOBLEIGUAL (BLOCK (ALT '=='))) (RULE NEGACION (BLOCK (ALT '!='))) (RULE VERDADERO (BLOCK (ALT 'true'))) (RULE FALSE (BLOCK (ALT 'false'))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z])))))) (RULE SEMI (BLOCK (ALT ';'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-03-21 10:37:56:868 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR CodeFile (import LexerRules) (RULES (RULE start (BLOCK (ALT INSERT CODE '{' content '}'))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT asignaciones) (ALT imprimir) (ALT ordenCondicion))) (RULE declaraciones (BLOCK (ALT tipo ID SEMI) (ALT tipo ID '=' expr SEMI))) (RULE asignaciones (BLOCK (ALT ID '=' expr SEMI))) (RULE imprimir (BLOCK (ALT 'MostrarMensaje(' expr ')' SEMI))) (RULE ordenCondicion (BLOCK (ALT condition_if (* (BLOCK (ALT otherwiseWithCondition))) (? (BLOCK (ALT otherwise)))))) (RULE condition_if (BLOCK (ALT IF '(' condicion) (ALT condicionSimple ')' '{' (* (BLOCK (ALT expresiones))) '}'))) (RULE otherwiseWithCondition (BLOCK (ALT ELSE condition_if))) (RULE otherwise (BLOCK (ALT ELSE '{' (* (BLOCK (ALT expresiones))) '}'))) (RULE condicion (BLOCK (ALT expr (= op (SET MAYORQUE MENORQUE MAYORIGUAL MENORIGUAL DOBLEIGUAL NEGACION)) expr))) (RULE condicionSimple (BLOCK (ALT (SET VERDADERO FALSE)))) (RULE tipo (BLOCK (ALT (SET 'margit' 'radahn' 'godrick')))) (RULE expr (BLOCK (ALT expr (= op (SET '*' '/')) expr) (ALT expr (= op (SET '+' '-')) expr) (ALT INT) (ALT ID) (ALT STRING) (ALT '(' expr ')')))))
2024-03-21 10:37:56:868 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR CodeFileLexer (RULES (RULE T__0 (BLOCK (ALT '{'))) (RULE T__1 (BLOCK (ALT '}'))) (RULE T__2 (BLOCK (ALT '='))) (RULE T__3 (BLOCK (ALT 'MostrarMensaje('))) (RULE T__4 (BLOCK (ALT ')'))) (RULE T__5 (BLOCK (ALT '('))) (RULE T__6 (BLOCK (ALT 'margit'))) (RULE T__7 (BLOCK (ALT 'radahn'))) (RULE T__8 (BLOCK (ALT 'godrick'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE MAYORQUE (BLOCK (ALT '>'))) (RULE MENORQUE (BLOCK (ALT '<'))) (RULE MAYORIGUAL (BLOCK (ALT '>='))) (RULE MENORIGUAL (BLOCK (ALT '<='))) (RULE DOBLEIGUAL (BLOCK (ALT '=='))) (RULE NEGACION (BLOCK (ALT '!='))) (RULE VERDADERO (BLOCK (ALT 'true'))) (RULE FALSE (BLOCK (ALT 'false'))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z])))))) (RULE SEMI (BLOCK (ALT ';'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-03-21 10:37:57:561 left-recursion LogManager.java:25 expr
    :   ( {} INT<tokenIndex=280>  
        | ID<tokenIndex=287>  
        | STRING<tokenIndex=294>  
        | '('<tokenIndex=301> expr<tokenIndex=303> ')'<tokenIndex=305>  
        )
        (
          {this.precpred(this._ctx, 6)}?<p=6> op=('*'<tokenIndex=246> | '/'<tokenIndex=250>) expr<tokenIndex=253,p=7>
                  | {this.precpred(this._ctx, 5)}?<p=5> op=('+'<tokenIndex=266> | '-'<tokenIndex=270>) expr<tokenIndex=273,p=6>
        )*
    ;
2024-03-21 10:37:57:593 grammar LogManager.java:25 added: (RULE expr (BLOCK (ALT (BLOCK (ALT {} (INT (ELEMENT_OPTIONS (= tokenIndex 280)))) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 287)))) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 294)))) (ALT ('(' (ELEMENT_OPTIONS (= tokenIndex 301))) (expr (ELEMENT_OPTIONS (= tokenIndex 303))) (')' (ELEMENT_OPTIONS (= tokenIndex 305))))) (* (BLOCK (ALT ({this.precpred(this._ctx, 6)}? (ELEMENT_OPTIONS (= p 6))) (= op (SET ('*' (ELEMENT_OPTIONS (= tokenIndex 246))) ('/' (ELEMENT_OPTIONS (= tokenIndex 250))))) (expr (ELEMENT_OPTIONS (= tokenIndex 253) (= p 7)))) (ALT ({this.precpred(this._ctx, 5)}? (ELEMENT_OPTIONS (= p 5))) (= op (SET ('+' (ELEMENT_OPTIONS (= tokenIndex 266))) ('-' (ELEMENT_OPTIONS (= tokenIndex 270))))) (expr (ELEMENT_OPTIONS (= tokenIndex 273) (= p 6)))))))))
2024-03-21 10:37:57:634 semantics LogManager.java:25 tokens={EOF=-1, T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, IF=10, ELSE=11, STRING=12, MAYORQUE=13, MENORQUE=14, MAYORIGUAL=15, MENORIGUAL=16, DOBLEIGUAL=17, NEGACION=18, VERDADERO=19, FALSE=20, INSERT=21, INT=22, CODE=23, ID=24, SEMI=25, MUL=26, DIV=27, ADD=28, SUB=29, WS=30}
2024-03-21 10:37:57:634 semantics LogManager.java:25 strings={'{'=1, '}'=2, '='=3, 'MostrarMensaje('=4, ')'=5, '('=6, 'margit'=7, 'radahn'=8, 'godrick'=9, 'if'=10, 'else'=11, '>'=13, '<'=14, '>='=15, '<='=16, '=='=17, '!='=18, 'true'=19, 'false'=20, 'iniciar'=21, 'codigo'=23, ';'=25, '*'=26, '/'=27, '+'=28, '-'=29}
2024-03-21 10:37:57:675 LL1 LogManager.java:25 
DECISION 0 in rule content
2024-03-21 10:37:57:675 LL1 LogManager.java:25 look=[{4, 7..10, 19..20, 24}, 2]
2024-03-21 10:37:57:683 LL1 LogManager.java:25 LL(1)? true
2024-03-21 10:37:57:683 LL1 LogManager.java:25 
DECISION 1 in rule expresiones
2024-03-21 10:37:57:683 LL1 LogManager.java:25 look=[{7..9}, 24, 4, {10, 19..20}]
2024-03-21 10:37:57:683 LL1 LogManager.java:25 LL(1)? true
2024-03-21 10:37:57:683 LL1 LogManager.java:25 
DECISION 2 in rule declaraciones
2024-03-21 10:37:57:683 LL1 LogManager.java:25 look=[{7..9}, {7..9}]
2024-03-21 10:37:57:683 LL1 LogManager.java:25 LL(1)? false
2024-03-21 10:37:57:683 LL1 LogManager.java:25 
DECISION 3 in rule ordenCondicion
2024-03-21 10:37:57:683 LL1 LogManager.java:25 look=[11, {2, 4, 7..11, 19..20, 24}]
2024-03-21 10:37:57:683 LL1 LogManager.java:25 LL(1)? false
2024-03-21 10:37:57:683 LL1 LogManager.java:25 
DECISION 4 in rule ordenCondicion
2024-03-21 10:37:57:683 LL1 LogManager.java:25 look=[11, {2, 4, 7..10, 19..20, 24}]
2024-03-21 10:37:57:683 LL1 LogManager.java:25 LL(1)? true
2024-03-21 10:37:57:683 LL1 LogManager.java:25 
DECISION 5 in rule condition_if
2024-03-21 10:37:57:683 LL1 LogManager.java:25 look=[{4, 7..10, 19..20, 24}, 2]
2024-03-21 10:37:57:683 LL1 LogManager.java:25 LL(1)? true
2024-03-21 10:37:57:683 LL1 LogManager.java:25 
DECISION 6 in rule condition_if
2024-03-21 10:37:57:683 LL1 LogManager.java:25 look=[10, {19..20}]
2024-03-21 10:37:57:683 LL1 LogManager.java:25 LL(1)? true
2024-03-21 10:37:57:683 LL1 LogManager.java:25 
DECISION 7 in rule otherwise
2024-03-21 10:37:57:683 LL1 LogManager.java:25 look=[{4, 7..10, 19..20, 24}, 2]
2024-03-21 10:37:57:683 LL1 LogManager.java:25 LL(1)? true
2024-03-21 10:37:57:683 LL1 LogManager.java:25 
DECISION 8 in rule expr
2024-03-21 10:37:57:683 LL1 LogManager.java:25 look=[22, 24, 12, 6]
2024-03-21 10:37:57:683 LL1 LogManager.java:25 LL(1)? true
2024-03-21 10:37:57:683 LL1 LogManager.java:25 
DECISION 9 in rule expr
2024-03-21 10:37:57:683 LL1 LogManager.java:25 look=[null, null]
2024-03-21 10:37:57:683 LL1 LogManager.java:25 LL(1)? false
2024-03-21 10:37:57:683 LL1 LogManager.java:25 
DECISION 10 in rule expr
2024-03-21 10:37:57:683 LL1 LogManager.java:25 look=[null, null]
2024-03-21 10:37:57:683 LL1 LogManager.java:25 LL(1)? false
2024-03-21 10:37:57:772 action-translator LogManager.java:25 translate 
2024-03-21 10:37:57:775 action-translator LogManager.java:25 translate this.precpred(this._ctx, 6)
2024-03-21 10:37:57:780 action-translator LogManager.java:25 translate this.precpred(this._ctx, 5)
2024-03-21 10:37:57:783 action-translator LogManager.java:25 translate this.precpred(this._ctx, 6)
2024-03-21 10:37:57:783 action-translator LogManager.java:25 translate this.precpred(this._ctx, 5)
