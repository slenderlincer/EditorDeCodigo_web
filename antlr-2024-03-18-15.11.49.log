2024-03-18 15:11:48:449 grammar LogManager.java:25 load LexerRules from ./grammar/CodeFile.g4
2024-03-18 15:11:48:454 grammar LogManager.java:25 before: (COMBINED_GRAMMAR CodeFile (import LexerRules) (RULES (RULE start (BLOCK (ALT INSERT CODE '{' content '}'))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT asignaciones) (ALT imprimir) (ALT condiciones))) (RULE declaraciones (BLOCK (ALT tipo ID SEMI) (ALT tipo ID '=' expr SEMI))) (RULE asignaciones (BLOCK (ALT ID '=' expr SEMI))) (RULE imprimir (BLOCK (ALT 'MostrarMensaje(' expr ')' SEMI))) (RULE condiciones (BLOCK (ALT IF '(' condicion ')' '{' (* (BLOCK (ALT expresiones))) '}' (? (BLOCK (ALT otherwise)))))) (RULE otherwise (BLOCK (ALT ELSE '{' (* (BLOCK (ALT expresiones))) '}'))) (RULE condicion (BLOCK (ALT expr (= op (BLOCK (ALT MAYORQUE) (ALT MENORQUE) (ALT MAYORIGUAL) (ALT MENORIGUAL) (ALT DOBLEIGUAL) (ALT NEGACION))) expr))) (RULE tipo (BLOCK (ALT 'margit') (ALT 'radahn') (ALT 'godrick'))) (RULE expr (BLOCK (ALT expr (= op (BLOCK (ALT '*') (ALT '/'))) expr) (ALT expr (= op (BLOCK (ALT '+') (ALT '-'))) expr) (ALT INT) (ALT ID) (ALT STRING) (ALT FLOAT) (ALT CHAR) (ALT '(' expr ')')))))
2024-03-18 15:11:48:458 grammar LogManager.java:25 imported actions: []
2024-03-18 15:11:48:459 grammar LogManager.java:25 imported rule: (RULE INSERT (BLOCK (ALT 'iniciar')))
2024-03-18 15:11:48:459 grammar LogManager.java:25 imported rule: (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9]))))))
2024-03-18 15:11:48:459 grammar LogManager.java:25 imported rule: (RULE FLOAT (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) [.] (+ (BLOCK (ALT [0-9]))))))
2024-03-18 15:11:48:459 grammar LogManager.java:25 imported rule: (RULE CHAR (BLOCK (ALT [a-zA-Z])))
2024-03-18 15:11:48:459 grammar LogManager.java:25 imported rule: (RULE CODE (BLOCK (ALT 'codigo')))
2024-03-18 15:11:48:459 grammar LogManager.java:25 imported rule: (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z]))))))
2024-03-18 15:11:48:459 grammar LogManager.java:25 imported rule: (RULE SEMI (BLOCK (ALT ';')))
2024-03-18 15:11:48:459 grammar LogManager.java:25 imported rule: (RULE MUL (BLOCK (ALT '*')))
2024-03-18 15:11:48:459 grammar LogManager.java:25 imported rule: (RULE DIV (BLOCK (ALT '/')))
2024-03-18 15:11:48:459 grammar LogManager.java:25 imported rule: (RULE ADD (BLOCK (ALT '+')))
2024-03-18 15:11:48:459 grammar LogManager.java:25 imported rule: (RULE SUB (BLOCK (ALT '-')))
2024-03-18 15:11:48:459 grammar LogManager.java:25 imported rule: (RULE IF (BLOCK (ALT 'condition')))
2024-03-18 15:11:48:459 grammar LogManager.java:25 imported rule: (RULE ELSE (BLOCK (ALT 'otherwise')))
2024-03-18 15:11:48:459 grammar LogManager.java:25 imported rule: (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"')))
2024-03-18 15:11:48:460 grammar LogManager.java:25 imported rule: (RULE MAYORQUE (BLOCK (ALT '>')))
2024-03-18 15:11:48:460 grammar LogManager.java:25 imported rule: (RULE MENORQUE (BLOCK (ALT '<')))
2024-03-18 15:11:48:460 grammar LogManager.java:25 imported rule: (RULE MAYORIGUAL (BLOCK (ALT '>=')))
2024-03-18 15:11:48:460 grammar LogManager.java:25 imported rule: (RULE MENORIGUAL (BLOCK (ALT '<=')))
2024-03-18 15:11:48:460 grammar LogManager.java:25 imported rule: (RULE DOBLEIGUAL (BLOCK (ALT '==')))
2024-03-18 15:11:48:460 grammar LogManager.java:25 imported rule: (RULE NEGACION (BLOCK (ALT '!=')))
2024-03-18 15:11:48:460 grammar LogManager.java:25 imported rule: (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))
2024-03-18 15:11:48:460 grammar LogManager.java:25 Grammar: (COMBINED_GRAMMAR CodeFile (import LexerRules) (RULES (RULE start (BLOCK (ALT INSERT CODE '{' content '}'))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT asignaciones) (ALT imprimir) (ALT condiciones))) (RULE declaraciones (BLOCK (ALT tipo ID SEMI) (ALT tipo ID '=' expr SEMI))) (RULE asignaciones (BLOCK (ALT ID '=' expr SEMI))) (RULE imprimir (BLOCK (ALT 'MostrarMensaje(' expr ')' SEMI))) (RULE condiciones (BLOCK (ALT IF '(' condicion ')' '{' (* (BLOCK (ALT expresiones))) '}' (? (BLOCK (ALT otherwise)))))) (RULE otherwise (BLOCK (ALT ELSE '{' (* (BLOCK (ALT expresiones))) '}'))) (RULE condicion (BLOCK (ALT expr (= op (BLOCK (ALT MAYORQUE) (ALT MENORQUE) (ALT MAYORIGUAL) (ALT MENORIGUAL) (ALT DOBLEIGUAL) (ALT NEGACION))) expr))) (RULE tipo (BLOCK (ALT 'margit') (ALT 'radahn') (ALT 'godrick'))) (RULE expr (BLOCK (ALT expr (= op (BLOCK (ALT '*') (ALT '/'))) expr) (ALT expr (= op (BLOCK (ALT '+') (ALT '-'))) expr) (ALT INT) (ALT ID) (ALT STRING) (ALT FLOAT) (ALT CHAR) (ALT '(' expr ')'))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE FLOAT (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) [.] (+ (BLOCK (ALT [0-9])))))) (RULE CHAR (BLOCK (ALT [a-zA-Z]))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z])))))) (RULE SEMI (BLOCK (ALT ';'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE IF (BLOCK (ALT 'condition'))) (RULE ELSE (BLOCK (ALT 'otherwise'))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE MAYORQUE (BLOCK (ALT '>'))) (RULE MENORQUE (BLOCK (ALT '<'))) (RULE MAYORIGUAL (BLOCK (ALT '>='))) (RULE MENORIGUAL (BLOCK (ALT '<='))) (RULE DOBLEIGUAL (BLOCK (ALT '=='))) (RULE NEGACION (BLOCK (ALT '!='))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-03-18 15:11:48:480 grammar LogManager.java:25 after: (COMBINED_GRAMMAR CodeFile (import LexerRules) (RULES (RULE start (BLOCK (ALT INSERT CODE '{' content '}'))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT asignaciones) (ALT imprimir) (ALT condiciones))) (RULE declaraciones (BLOCK (ALT tipo ID SEMI) (ALT tipo ID '=' expr SEMI))) (RULE asignaciones (BLOCK (ALT ID '=' expr SEMI))) (RULE imprimir (BLOCK (ALT 'MostrarMensaje(' expr ')' SEMI))) (RULE condiciones (BLOCK (ALT IF '(' condicion ')' '{' (* (BLOCK (ALT expresiones))) '}' (? (BLOCK (ALT otherwise)))))) (RULE otherwise (BLOCK (ALT ELSE '{' (* (BLOCK (ALT expresiones))) '}'))) (RULE condicion (BLOCK (ALT expr (= op (SET MAYORQUE MENORQUE MAYORIGUAL MENORIGUAL DOBLEIGUAL NEGACION)) expr))) (RULE tipo (BLOCK (ALT (SET 'margit' 'radahn' 'godrick')))) (RULE expr (BLOCK (ALT expr (= op (SET '*' '/')) expr) (ALT expr (= op (SET '+' '-')) expr) (ALT INT) (ALT ID) (ALT STRING) (ALT FLOAT) (ALT CHAR) (ALT '(' expr ')'))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE FLOAT (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) [.] (+ (BLOCK (ALT [0-9])))))) (RULE CHAR (BLOCK (ALT [a-zA-Z]))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z])))))) (RULE SEMI (BLOCK (ALT ';'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE IF (BLOCK (ALT 'condition'))) (RULE ELSE (BLOCK (ALT 'otherwise'))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE MAYORQUE (BLOCK (ALT '>'))) (RULE MENORQUE (BLOCK (ALT '<'))) (RULE MAYORIGUAL (BLOCK (ALT '>='))) (RULE MENORIGUAL (BLOCK (ALT '<='))) (RULE DOBLEIGUAL (BLOCK (ALT '=='))) (RULE NEGACION (BLOCK (ALT '!='))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-03-18 15:11:48:512 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR CodeFile (import LexerRules) (RULES (RULE start (BLOCK (ALT INSERT CODE '{' content '}'))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT asignaciones) (ALT imprimir) (ALT condiciones))) (RULE declaraciones (BLOCK (ALT tipo ID SEMI) (ALT tipo ID '=' expr SEMI))) (RULE asignaciones (BLOCK (ALT ID '=' expr SEMI))) (RULE imprimir (BLOCK (ALT 'MostrarMensaje(' expr ')' SEMI))) (RULE condiciones (BLOCK (ALT IF '(' condicion ')' '{' (* (BLOCK (ALT expresiones))) '}' (? (BLOCK (ALT otherwise)))))) (RULE otherwise (BLOCK (ALT ELSE '{' (* (BLOCK (ALT expresiones))) '}'))) (RULE condicion (BLOCK (ALT expr (= op (SET MAYORQUE MENORQUE MAYORIGUAL MENORIGUAL DOBLEIGUAL NEGACION)) expr))) (RULE tipo (BLOCK (ALT (SET 'margit' 'radahn' 'godrick')))) (RULE expr (BLOCK (ALT expr (= op (SET '*' '/')) expr) (ALT expr (= op (SET '+' '-')) expr) (ALT INT) (ALT ID) (ALT STRING) (ALT FLOAT) (ALT CHAR) (ALT '(' expr ')')))))
2024-03-18 15:11:48:512 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR CodeFileLexer (RULES (RULE T__0 (BLOCK (ALT '{'))) (RULE T__1 (BLOCK (ALT '}'))) (RULE T__2 (BLOCK (ALT '='))) (RULE T__3 (BLOCK (ALT 'MostrarMensaje('))) (RULE T__4 (BLOCK (ALT ')'))) (RULE T__5 (BLOCK (ALT '('))) (RULE T__6 (BLOCK (ALT 'margit'))) (RULE T__7 (BLOCK (ALT 'radahn'))) (RULE T__8 (BLOCK (ALT 'godrick'))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE FLOAT (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) [.] (+ (BLOCK (ALT [0-9])))))) (RULE CHAR (BLOCK (ALT [a-zA-Z]))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z])))))) (RULE SEMI (BLOCK (ALT ';'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE IF (BLOCK (ALT 'condition'))) (RULE ELSE (BLOCK (ALT 'otherwise'))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE MAYORQUE (BLOCK (ALT '>'))) (RULE MENORQUE (BLOCK (ALT '<'))) (RULE MAYORIGUAL (BLOCK (ALT '>='))) (RULE MENORIGUAL (BLOCK (ALT '<='))) (RULE DOBLEIGUAL (BLOCK (ALT '=='))) (RULE NEGACION (BLOCK (ALT '!='))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-03-18 15:11:48:854 left-recursion LogManager.java:25 expr
    :   ( {} INT<tokenIndex=241>  
        | ID<tokenIndex=248>  
        | STRING<tokenIndex=255>  
        | FLOAT<tokenIndex=262>  
        | CHAR<tokenIndex=269>  
        | '('<tokenIndex=276> expr<tokenIndex=278> ')'<tokenIndex=280>  
        )
        (
          {this.precpred(this._ctx, 8)}?<p=8> op=('*'<tokenIndex=207> | '/'<tokenIndex=211>) expr<tokenIndex=214,p=9>
                  | {this.precpred(this._ctx, 7)}?<p=7> op=('+'<tokenIndex=227> | '-'<tokenIndex=231>) expr<tokenIndex=234,p=8>
        )*
    ;
2024-03-18 15:11:48:875 grammar LogManager.java:25 added: (RULE expr (BLOCK (ALT (BLOCK (ALT {} (INT (ELEMENT_OPTIONS (= tokenIndex 241)))) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 248)))) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 255)))) (ALT (FLOAT (ELEMENT_OPTIONS (= tokenIndex 262)))) (ALT (CHAR (ELEMENT_OPTIONS (= tokenIndex 269)))) (ALT ('(' (ELEMENT_OPTIONS (= tokenIndex 276))) (expr (ELEMENT_OPTIONS (= tokenIndex 278))) (')' (ELEMENT_OPTIONS (= tokenIndex 280))))) (* (BLOCK (ALT ({this.precpred(this._ctx, 8)}? (ELEMENT_OPTIONS (= p 8))) (= op (SET ('*' (ELEMENT_OPTIONS (= tokenIndex 207))) ('/' (ELEMENT_OPTIONS (= tokenIndex 211))))) (expr (ELEMENT_OPTIONS (= tokenIndex 214) (= p 9)))) (ALT ({this.precpred(this._ctx, 7)}? (ELEMENT_OPTIONS (= p 7))) (= op (SET ('+' (ELEMENT_OPTIONS (= tokenIndex 227))) ('-' (ELEMENT_OPTIONS (= tokenIndex 231))))) (expr (ELEMENT_OPTIONS (= tokenIndex 234) (= p 8)))))))))
2024-03-18 15:11:48:881 semantics LogManager.java:25 tokens={EOF=-1, T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, INSERT=10, INT=11, FLOAT=12, CHAR=13, CODE=14, ID=15, SEMI=16, MUL=17, DIV=18, ADD=19, SUB=20, IF=21, ELSE=22, STRING=23, MAYORQUE=24, MENORQUE=25, MAYORIGUAL=26, MENORIGUAL=27, DOBLEIGUAL=28, NEGACION=29, WS=30}
2024-03-18 15:11:48:881 semantics LogManager.java:25 strings={'{'=1, '}'=2, '='=3, 'MostrarMensaje('=4, ')'=5, '('=6, 'margit'=7, 'radahn'=8, 'godrick'=9, 'iniciar'=10, 'codigo'=14, ';'=16, '*'=17, '/'=18, '+'=19, '-'=20, 'condition'=21, 'otherwise'=22, '>'=24, '<'=25, '>='=26, '<='=27, '=='=28, '!='=29}
2024-03-18 15:11:48:898 LL1 LogManager.java:25 
DECISION 0 in rule content
2024-03-18 15:11:48:899 LL1 LogManager.java:25 look=[{4, 7..9, 15, 21}, 2]
2024-03-18 15:11:48:900 LL1 LogManager.java:25 LL(1)? true
2024-03-18 15:11:48:900 LL1 LogManager.java:25 
DECISION 1 in rule expresiones
2024-03-18 15:11:48:900 LL1 LogManager.java:25 look=[{7..9}, 15, 4, 21]
2024-03-18 15:11:48:900 LL1 LogManager.java:25 LL(1)? true
2024-03-18 15:11:48:900 LL1 LogManager.java:25 
DECISION 2 in rule declaraciones
2024-03-18 15:11:48:900 LL1 LogManager.java:25 look=[{7..9}, {7..9}]
2024-03-18 15:11:48:901 LL1 LogManager.java:25 LL(1)? false
2024-03-18 15:11:48:901 LL1 LogManager.java:25 
DECISION 3 in rule condiciones
2024-03-18 15:11:48:901 LL1 LogManager.java:25 look=[{4, 7..9, 15, 21}, 2]
2024-03-18 15:11:48:901 LL1 LogManager.java:25 LL(1)? true
2024-03-18 15:11:48:901 LL1 LogManager.java:25 
DECISION 4 in rule condiciones
2024-03-18 15:11:48:901 LL1 LogManager.java:25 look=[22, {2, 4, 7..9, 15, 21}]
2024-03-18 15:11:48:902 LL1 LogManager.java:25 LL(1)? true
2024-03-18 15:11:48:902 LL1 LogManager.java:25 
DECISION 5 in rule otherwise
2024-03-18 15:11:48:902 LL1 LogManager.java:25 look=[{4, 7..9, 15, 21}, 2]
2024-03-18 15:11:48:902 LL1 LogManager.java:25 LL(1)? true
2024-03-18 15:11:48:902 LL1 LogManager.java:25 
DECISION 6 in rule expr
2024-03-18 15:11:48:902 LL1 LogManager.java:25 look=[11, 15, 23, 12, 13, 6]
2024-03-18 15:11:48:902 LL1 LogManager.java:25 LL(1)? true
2024-03-18 15:11:48:902 LL1 LogManager.java:25 
DECISION 7 in rule expr
2024-03-18 15:11:48:902 LL1 LogManager.java:25 look=[null, null]
2024-03-18 15:11:48:903 LL1 LogManager.java:25 LL(1)? false
2024-03-18 15:11:48:903 LL1 LogManager.java:25 
DECISION 8 in rule expr
2024-03-18 15:11:48:903 LL1 LogManager.java:25 look=[null, null]
2024-03-18 15:11:48:903 LL1 LogManager.java:25 LL(1)? false
2024-03-18 15:11:48:965 action-translator LogManager.java:25 translate 
2024-03-18 15:11:48:968 action-translator LogManager.java:25 translate this.precpred(this._ctx, 8)
2024-03-18 15:11:48:969 action-translator LogManager.java:25 translate this.precpred(this._ctx, 7)
2024-03-18 15:11:48:972 action-translator LogManager.java:25 translate this.precpred(this._ctx, 8)
2024-03-18 15:11:48:972 action-translator LogManager.java:25 translate this.precpred(this._ctx, 7)
