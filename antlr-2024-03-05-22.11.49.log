2024-03-05 22:11:49:313 grammar LogManager.java:25 load LexerRules from ./grammar/CodeFile.g4
2024-03-05 22:11:49:315 grammar LogManager.java:25 before: (COMBINED_GRAMMAR CodeFile (import LexerRules) (RULES (RULE start (BLOCK (ALT INSERT CODE '{' content '}'))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT asignaciones) (ALT imprimir))) (RULE declaraciones (BLOCK (ALT tipo ID SEMI) (ALT tipo ID '=' expr SEMI))) (RULE asignaciones (BLOCK (ALT ID '=' expr SEMI))) (RULE imprimir (BLOCK (ALT 'printf(' mensaje ')' SEMI))) (RULE mensaje (BLOCK (ALT TEXTO) (ALT expr) (ALT ID))) (RULE tipo (BLOCK (ALT 'margit') (ALT 'radahn') (ALT 'godrick'))) (RULE expr (BLOCK (ALT expr (= op (BLOCK (ALT '*') (ALT '/'))) expr) (ALT expr (= op (BLOCK (ALT '+') (ALT '-'))) expr) (ALT INT) (ALT ID) (ALT '(' expr ')'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE TEXTO (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"')))))
2024-03-05 22:11:49:315 grammar LogManager.java:25 imported actions: []
2024-03-05 22:11:49:318 grammar LogManager.java:25 imported rule: (RULE INSERT (BLOCK (ALT 'iniciar')))
2024-03-05 22:11:49:318 grammar LogManager.java:25 imported rule: (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9]))))))
2024-03-05 22:11:49:318 grammar LogManager.java:25 imported rule: (RULE CODE (BLOCK (ALT 'codigo')))
2024-03-05 22:11:49:318 grammar LogManager.java:25 imported rule: (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z]))))))
2024-03-05 22:11:49:318 grammar LogManager.java:25 imported rule: (RULE SEMI (BLOCK (ALT ';')))
2024-03-05 22:11:49:318 grammar LogManager.java:25 imported rule: (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))
2024-03-05 22:11:49:318 grammar LogManager.java:25 Grammar: (COMBINED_GRAMMAR CodeFile (import LexerRules) (RULES (RULE start (BLOCK (ALT INSERT CODE '{' content '}'))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT asignaciones) (ALT imprimir))) (RULE declaraciones (BLOCK (ALT tipo ID SEMI) (ALT tipo ID '=' expr SEMI))) (RULE asignaciones (BLOCK (ALT ID '=' expr SEMI))) (RULE imprimir (BLOCK (ALT 'printf(' mensaje ')' SEMI))) (RULE mensaje (BLOCK (ALT TEXTO) (ALT expr) (ALT ID))) (RULE tipo (BLOCK (ALT 'margit') (ALT 'radahn') (ALT 'godrick'))) (RULE expr (BLOCK (ALT expr (= op (BLOCK (ALT '*') (ALT '/'))) expr) (ALT expr (= op (BLOCK (ALT '+') (ALT '-'))) expr) (ALT INT) (ALT ID) (ALT '(' expr ')'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE TEXTO (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z])))))) (RULE SEMI (BLOCK (ALT ';'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-03-05 22:11:49:332 grammar LogManager.java:25 after: (COMBINED_GRAMMAR CodeFile (import LexerRules) (RULES (RULE start (BLOCK (ALT INSERT CODE '{' content '}'))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT asignaciones) (ALT imprimir))) (RULE declaraciones (BLOCK (ALT tipo ID SEMI) (ALT tipo ID '=' expr SEMI))) (RULE asignaciones (BLOCK (ALT ID '=' expr SEMI))) (RULE imprimir (BLOCK (ALT 'printf(' mensaje ')' SEMI))) (RULE mensaje (BLOCK (ALT TEXTO) (ALT expr) (ALT ID))) (RULE tipo (BLOCK (ALT (SET 'margit' 'radahn' 'godrick')))) (RULE expr (BLOCK (ALT expr (= op (SET '*' '/')) expr) (ALT expr (= op (SET '+' '-')) expr) (ALT INT) (ALT ID) (ALT '(' expr ')'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE TEXTO (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z])))))) (RULE SEMI (BLOCK (ALT ';'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-03-05 22:11:49:353 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR CodeFile (import LexerRules) (RULES (RULE start (BLOCK (ALT INSERT CODE '{' content '}'))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT asignaciones) (ALT imprimir))) (RULE declaraciones (BLOCK (ALT tipo ID SEMI) (ALT tipo ID '=' expr SEMI))) (RULE asignaciones (BLOCK (ALT ID '=' expr SEMI))) (RULE imprimir (BLOCK (ALT 'printf(' mensaje ')' SEMI))) (RULE mensaje (BLOCK (ALT TEXTO) (ALT expr) (ALT ID))) (RULE tipo (BLOCK (ALT (SET 'margit' 'radahn' 'godrick')))) (RULE expr (BLOCK (ALT expr (= op (SET '*' '/')) expr) (ALT expr (= op (SET '+' '-')) expr) (ALT INT) (ALT ID) (ALT '(' expr ')')))))
2024-03-05 22:11:49:353 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR CodeFileLexer (RULES (RULE T__0 (BLOCK (ALT '{'))) (RULE T__1 (BLOCK (ALT '}'))) (RULE T__2 (BLOCK (ALT '='))) (RULE T__3 (BLOCK (ALT 'printf('))) (RULE T__4 (BLOCK (ALT ')'))) (RULE T__5 (BLOCK (ALT 'margit'))) (RULE T__6 (BLOCK (ALT 'radahn'))) (RULE T__7 (BLOCK (ALT 'godrick'))) (RULE T__8 (BLOCK (ALT '('))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE TEXTO (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z])))))) (RULE SEMI (BLOCK (ALT ';'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-03-05 22:11:49:560 left-recursion LogManager.java:25 expr
    :   ( {} INT<tokenIndex=173>  
        | ID<tokenIndex=180>  
        | '('<tokenIndex=187> expr<tokenIndex=189> ')'<tokenIndex=191>  
        )
        (
          {this.precpred(this._ctx, 5)}?<p=5> op=('*'<tokenIndex=139> | '/'<tokenIndex=143>) expr<tokenIndex=146,p=6>
                  | {this.precpred(this._ctx, 4)}?<p=4> op=('+'<tokenIndex=159> | '-'<tokenIndex=163>) expr<tokenIndex=166,p=5>
        )*
    ;
2024-03-05 22:11:49:570 grammar LogManager.java:25 added: (RULE expr (BLOCK (ALT (BLOCK (ALT {} (INT (ELEMENT_OPTIONS (= tokenIndex 173)))) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 180)))) (ALT ('(' (ELEMENT_OPTIONS (= tokenIndex 187))) (expr (ELEMENT_OPTIONS (= tokenIndex 189))) (')' (ELEMENT_OPTIONS (= tokenIndex 191))))) (* (BLOCK (ALT ({this.precpred(this._ctx, 5)}? (ELEMENT_OPTIONS (= p 5))) (= op (SET ('*' (ELEMENT_OPTIONS (= tokenIndex 139))) ('/' (ELEMENT_OPTIONS (= tokenIndex 143))))) (expr (ELEMENT_OPTIONS (= tokenIndex 146) (= p 6)))) (ALT ({this.precpred(this._ctx, 4)}? (ELEMENT_OPTIONS (= p 4))) (= op (SET ('+' (ELEMENT_OPTIONS (= tokenIndex 159))) ('-' (ELEMENT_OPTIONS (= tokenIndex 163))))) (expr (ELEMENT_OPTIONS (= tokenIndex 166) (= p 5)))))))))
2024-03-05 22:11:49:574 semantics LogManager.java:25 tokens={EOF=-1, T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, MUL=10, DIV=11, ADD=12, SUB=13, TEXTO=14, INSERT=15, INT=16, CODE=17, ID=18, SEMI=19, WS=20}
2024-03-05 22:11:49:574 semantics LogManager.java:25 strings={'{'=1, '}'=2, '='=3, 'printf('=4, ')'=5, 'margit'=6, 'radahn'=7, 'godrick'=8, '('=9, '*'=10, '/'=11, '+'=12, '-'=13, 'iniciar'=15, 'codigo'=17, ';'=19}
2024-03-05 22:11:49:580 LL1 LogManager.java:25 
DECISION 0 in rule content
2024-03-05 22:11:49:580 LL1 LogManager.java:25 look=[{4, 6..8, 18}, 2]
2024-03-05 22:11:49:580 LL1 LogManager.java:25 LL(1)? true
2024-03-05 22:11:49:580 LL1 LogManager.java:25 
DECISION 1 in rule expresiones
2024-03-05 22:11:49:580 LL1 LogManager.java:25 look=[{6..8}, 18, 4]
2024-03-05 22:11:49:580 LL1 LogManager.java:25 LL(1)? true
2024-03-05 22:11:49:580 LL1 LogManager.java:25 
DECISION 2 in rule declaraciones
2024-03-05 22:11:49:580 LL1 LogManager.java:25 look=[{6..8}, {6..8}]
2024-03-05 22:11:49:580 LL1 LogManager.java:25 LL(1)? false
2024-03-05 22:11:49:580 LL1 LogManager.java:25 
DECISION 3 in rule mensaje
2024-03-05 22:11:49:580 LL1 LogManager.java:25 look=[14, {9, 16, 18}, 18]
2024-03-05 22:11:49:580 LL1 LogManager.java:25 LL(1)? false
2024-03-05 22:11:49:580 LL1 LogManager.java:25 
DECISION 4 in rule expr
2024-03-05 22:11:49:580 LL1 LogManager.java:25 look=[16, 18, 9]
2024-03-05 22:11:49:580 LL1 LogManager.java:25 LL(1)? true
2024-03-05 22:11:49:580 LL1 LogManager.java:25 
DECISION 5 in rule expr
2024-03-05 22:11:49:580 LL1 LogManager.java:25 look=[null, null]
2024-03-05 22:11:49:580 LL1 LogManager.java:25 LL(1)? false
2024-03-05 22:11:49:580 LL1 LogManager.java:25 
DECISION 6 in rule expr
2024-03-05 22:11:49:580 LL1 LogManager.java:25 look=[null, null]
2024-03-05 22:11:49:580 LL1 LogManager.java:25 LL(1)? false
2024-03-05 22:11:49:623 action-translator LogManager.java:25 translate 
2024-03-05 22:11:49:623 action-translator LogManager.java:25 translate this.precpred(this._ctx, 5)
2024-03-05 22:11:49:623 action-translator LogManager.java:25 translate this.precpred(this._ctx, 4)
2024-03-05 22:11:49:623 action-translator LogManager.java:25 translate this.precpred(this._ctx, 5)
2024-03-05 22:11:49:623 action-translator LogManager.java:25 translate this.precpred(this._ctx, 4)
