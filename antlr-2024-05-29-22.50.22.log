2024-05-29 22:50:22:470 grammar LogManager.java:25 load lexerRulesCV from ./grammar/CVtoJasmin.g4
2024-05-29 22:50:22:475 grammar LogManager.java:25 before: (COMBINED_GRAMMAR CVtoJasmin (import lexerRulesCV) (RULES (RULE start (BLOCK (ALT INSERT CODE ALLAVE content CLLAVE))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT assignament) (ALT imprimir) (ALT ordencondicional) (ALT while))) (RULE declaraciones (BLOCK (ALT tipo ID (? (BLOCK (ALT EQUALS expr))) SEMI))) (RULE assignament (BLOCK (ALT ID EQUALS expr SEMI) (ALT ID (= com (BLOCK (ALT '+=') (ALT '-=') (ALT '*=') (ALT '/=') (ALT '%='))) (? (BLOCK (ALT expr))) SEMI) (ALT ID (= com (BLOCK (ALT '--') (ALT '++'))) (? (BLOCK (ALT expr))) SEMI))) (RULE imprimir (BLOCK (ALT PRINT APARENTESIS expr CPARENTESIS SEMI))) (RULE tipo (BLOCK (ALT (BLOCK (ALT 'margit') (ALT 'radahn') (ALT 'godrick'))))) (RULE expr (BLOCK (ALT APARENTESIS expr CPARENTESIS) (ALT expr (= op (BLOCK (ALT MUL) (ALT DIV) (ALT MOD))) expr) (ALT expr (= op (BLOCK (ALT ADD) (ALT SUB))) expr) (ALT (= operator (BLOCK (ALT '<') (ALT '>') (ALT '<=') (ALT '>=') (ALT '==') (ALT '!=') (ALT 'true') (ALT 'false') (ALT '!true') (ALT '!false')))) (ALT expr (= operator (BLOCK (ALT '<') (ALT '>') (ALT '<=') (ALT '>=') (ALT '==') (ALT '!=') (ALT 'true') (ALT 'false') (ALT '!true') (ALT '!false'))) expr) (ALT expr (= operator (BLOCK (ALT '&&') (ALT '||'))) expr) (ALT INT) (ALT ID) (ALT STRING) (ALT FLOAT) (ALT CHAR))) (RULE ordencondicional (BLOCK (ALT condicional (* (BLOCK (ALT condicional_elseif))) (? (BLOCK (ALT condicional_else)))))) (RULE condicional (BLOCK (ALT IF APARENTESIS expr CPARENTESIS ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE condicional_elseif (BLOCK (ALT ELSE condicional))) (RULE condicional_else (BLOCK (ALT ELSE ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE while (BLOCK (ALT WHILE APARENTESIS (BLOCK (ALT expr)) CPARENTESIS ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE MOD (BLOCK (ALT '%'))) (RULE COMA (BLOCK (ALT ','))) (RULE NEGAN (BLOCK (ALT '!')))))
2024-05-29 22:50:22:478 grammar LogManager.java:25 imported actions: []
2024-05-29 22:50:22:480 grammar LogManager.java:25 imported rule: (RULE APARENTESIS (BLOCK (ALT '(')))
2024-05-29 22:50:22:480 grammar LogManager.java:25 imported rule: (RULE CPARENTESIS (BLOCK (ALT ')')))
2024-05-29 22:50:22:480 grammar LogManager.java:25 imported rule: (RULE ALLAVE (BLOCK (ALT '{')))
2024-05-29 22:50:22:480 grammar LogManager.java:25 imported rule: (RULE CLLAVE (BLOCK (ALT '}')))
2024-05-29 22:50:22:480 grammar LogManager.java:25 imported rule: (RULE EQUALS (BLOCK (ALT '=')))
2024-05-29 22:50:22:480 grammar LogManager.java:25 imported rule: (RULE MUL (BLOCK (ALT '*')))
2024-05-29 22:50:22:480 grammar LogManager.java:25 imported rule: (RULE DIV (BLOCK (ALT '/')))
2024-05-29 22:50:22:480 grammar LogManager.java:25 imported rule: (RULE ADD (BLOCK (ALT '+')))
2024-05-29 22:50:22:480 grammar LogManager.java:25 imported rule: (RULE SUB (BLOCK (ALT '-')))
2024-05-29 22:50:22:480 grammar LogManager.java:25 imported rule: (RULE PRINT (BLOCK (ALT 'MostrarMensaje')))
2024-05-29 22:50:22:480 grammar LogManager.java:25 imported rule: (RULE IF (BLOCK (ALT 'verificar')))
2024-05-29 22:50:22:480 grammar LogManager.java:25 imported rule: (RULE ELSE (BLOCK (ALT 'contrario')))
2024-05-29 22:50:22:480 grammar LogManager.java:25 imported rule: (RULE WHILE (BLOCK (ALT 'repetir')))
2024-05-29 22:50:22:480 grammar LogManager.java:25 imported rule: (RULE COND_MAT (BLOCK (ALT (BLOCK (ALT '<') (ALT '>') (ALT '<=') (ALT '>=')))))
2024-05-29 22:50:22:480 grammar LogManager.java:25 imported rule: (RULE COND_LOG (BLOCK (ALT (BLOCK (ALT '==') (ALT '!=') (ALT 'true') (ALT 'false') (ALT '!true') (ALT '!false')))))
2024-05-29 22:50:22:480 grammar LogManager.java:25 imported rule: (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"')))
2024-05-29 22:50:22:480 grammar LogManager.java:25 imported rule: (RULE INT (BLOCK (ALT (? (BLOCK (ALT '-'))) (+ (BLOCK (ALT [0-9]))))))
2024-05-29 22:50:22:480 grammar LogManager.java:25 imported rule: (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z]))) (* (BLOCK (ALT [_a-zA-Z0-9]))))))
2024-05-29 22:50:22:480 grammar LogManager.java:25 imported rule: (RULE FLOAT (BLOCK (ALT (? (BLOCK (ALT '-'))) (+ (BLOCK (ALT [0-9]))) [.] (+ (BLOCK (ALT [0-9]))))))
2024-05-29 22:50:22:480 grammar LogManager.java:25 imported rule: (RULE CHAR (BLOCK (ALT '"' (? (BLOCK (ALT [a-zA-Z]))) '"')))
2024-05-29 22:50:22:480 grammar LogManager.java:25 imported rule: (RULE SEMI (BLOCK (ALT ';')))
2024-05-29 22:50:22:480 grammar LogManager.java:25 imported rule: (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip)))
2024-05-29 22:50:22:480 grammar LogManager.java:25 imported rule: (RULE BLOCK_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip)))
2024-05-29 22:50:22:480 grammar LogManager.java:25 imported rule: (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))
2024-05-29 22:50:22:480 grammar LogManager.java:25 Grammar: (COMBINED_GRAMMAR CVtoJasmin (import lexerRulesCV) (RULES (RULE start (BLOCK (ALT INSERT CODE ALLAVE content CLLAVE))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT assignament) (ALT imprimir) (ALT ordencondicional) (ALT while))) (RULE declaraciones (BLOCK (ALT tipo ID (? (BLOCK (ALT EQUALS expr))) SEMI))) (RULE assignament (BLOCK (ALT ID EQUALS expr SEMI) (ALT ID (= com (BLOCK (ALT '+=') (ALT '-=') (ALT '*=') (ALT '/=') (ALT '%='))) (? (BLOCK (ALT expr))) SEMI) (ALT ID (= com (BLOCK (ALT '--') (ALT '++'))) (? (BLOCK (ALT expr))) SEMI))) (RULE imprimir (BLOCK (ALT PRINT APARENTESIS expr CPARENTESIS SEMI))) (RULE tipo (BLOCK (ALT (BLOCK (ALT 'margit') (ALT 'radahn') (ALT 'godrick'))))) (RULE expr (BLOCK (ALT APARENTESIS expr CPARENTESIS) (ALT expr (= op (BLOCK (ALT MUL) (ALT DIV) (ALT MOD))) expr) (ALT expr (= op (BLOCK (ALT ADD) (ALT SUB))) expr) (ALT (= operator (BLOCK (ALT '<') (ALT '>') (ALT '<=') (ALT '>=') (ALT '==') (ALT '!=') (ALT 'true') (ALT 'false') (ALT '!true') (ALT '!false')))) (ALT expr (= operator (BLOCK (ALT '<') (ALT '>') (ALT '<=') (ALT '>=') (ALT '==') (ALT '!=') (ALT 'true') (ALT 'false') (ALT '!true') (ALT '!false'))) expr) (ALT expr (= operator (BLOCK (ALT '&&') (ALT '||'))) expr) (ALT INT) (ALT ID) (ALT STRING) (ALT FLOAT) (ALT CHAR))) (RULE ordencondicional (BLOCK (ALT condicional (* (BLOCK (ALT condicional_elseif))) (? (BLOCK (ALT condicional_else)))))) (RULE condicional (BLOCK (ALT IF APARENTESIS expr CPARENTESIS ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE condicional_elseif (BLOCK (ALT ELSE condicional))) (RULE condicional_else (BLOCK (ALT ELSE ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE while (BLOCK (ALT WHILE APARENTESIS (BLOCK (ALT expr)) CPARENTESIS ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE MOD (BLOCK (ALT '%'))) (RULE COMA (BLOCK (ALT ','))) (RULE NEGAN (BLOCK (ALT '!'))) (RULE APARENTESIS (BLOCK (ALT '('))) (RULE CPARENTESIS (BLOCK (ALT ')'))) (RULE ALLAVE (BLOCK (ALT '{'))) (RULE CLLAVE (BLOCK (ALT '}'))) (RULE EQUALS (BLOCK (ALT '='))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PRINT (BLOCK (ALT 'MostrarMensaje'))) (RULE IF (BLOCK (ALT 'verificar'))) (RULE ELSE (BLOCK (ALT 'contrario'))) (RULE WHILE (BLOCK (ALT 'repetir'))) (RULE COND_MAT (BLOCK (ALT (BLOCK (ALT '<') (ALT '>') (ALT '<=') (ALT '>='))))) (RULE COND_LOG (BLOCK (ALT (BLOCK (ALT '==') (ALT '!=') (ALT 'true') (ALT 'false') (ALT '!true') (ALT '!false'))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE INT (BLOCK (ALT (? (BLOCK (ALT '-'))) (+ (BLOCK (ALT [0-9])))))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z]))) (* (BLOCK (ALT [_a-zA-Z0-9])))))) (RULE FLOAT (BLOCK (ALT (? (BLOCK (ALT '-'))) (+ (BLOCK (ALT [0-9]))) [.] (+ (BLOCK (ALT [0-9])))))) (RULE CHAR (BLOCK (ALT '"' (? (BLOCK (ALT [a-zA-Z]))) '"'))) (RULE SEMI (BLOCK (ALT ';'))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE BLOCK_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-05-29 22:50:22:503 grammar LogManager.java:25 after: (COMBINED_GRAMMAR CVtoJasmin (import lexerRulesCV) (RULES (RULE start (BLOCK (ALT INSERT CODE ALLAVE content CLLAVE))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT assignament) (ALT imprimir) (ALT ordencondicional) (ALT while))) (RULE declaraciones (BLOCK (ALT tipo ID (? (BLOCK (ALT EQUALS expr))) SEMI))) (RULE assignament (BLOCK (ALT ID EQUALS expr SEMI) (ALT ID (= com (SET '+=' '-=' '*=' '/=' '%=')) (? (BLOCK (ALT expr))) SEMI) (ALT ID (= com (SET '--' '++')) (? (BLOCK (ALT expr))) SEMI))) (RULE imprimir (BLOCK (ALT PRINT APARENTESIS expr CPARENTESIS SEMI))) (RULE tipo (BLOCK (ALT (SET 'margit' 'radahn' 'godrick')))) (RULE expr (BLOCK (ALT APARENTESIS expr CPARENTESIS) (ALT expr (= op (SET MUL DIV MOD)) expr) (ALT expr (= op (SET ADD SUB)) expr) (ALT (= operator (SET '<' '>' '<=' '>=' '==' '!=' 'true' 'false' '!true' '!false'))) (ALT expr (= operator (SET '<' '>' '<=' '>=' '==' '!=' 'true' 'false' '!true' '!false')) expr) (ALT expr (= operator (SET '&&' '||')) expr) (ALT INT) (ALT ID) (ALT STRING) (ALT FLOAT) (ALT CHAR))) (RULE ordencondicional (BLOCK (ALT condicional (* (BLOCK (ALT condicional_elseif))) (? (BLOCK (ALT condicional_else)))))) (RULE condicional (BLOCK (ALT IF APARENTESIS expr CPARENTESIS ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE condicional_elseif (BLOCK (ALT ELSE condicional))) (RULE condicional_else (BLOCK (ALT ELSE ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE while (BLOCK (ALT WHILE APARENTESIS (BLOCK (ALT expr)) CPARENTESIS ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE MOD (BLOCK (ALT '%'))) (RULE COMA (BLOCK (ALT ','))) (RULE NEGAN (BLOCK (ALT '!'))) (RULE APARENTESIS (BLOCK (ALT '('))) (RULE CPARENTESIS (BLOCK (ALT ')'))) (RULE ALLAVE (BLOCK (ALT '{'))) (RULE CLLAVE (BLOCK (ALT '}'))) (RULE EQUALS (BLOCK (ALT '='))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PRINT (BLOCK (ALT 'MostrarMensaje'))) (RULE IF (BLOCK (ALT 'verificar'))) (RULE ELSE (BLOCK (ALT 'contrario'))) (RULE WHILE (BLOCK (ALT 'repetir'))) (RULE COND_MAT (BLOCK (ALT (BLOCK (ALT '<') (ALT '>') (ALT '<=') (ALT '>='))))) (RULE COND_LOG (BLOCK (ALT (BLOCK (ALT '==') (ALT '!=') (ALT 'true') (ALT 'false') (ALT '!true') (ALT '!false'))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE INT (BLOCK (ALT (? (BLOCK (ALT '-'))) (+ (BLOCK (ALT [0-9])))))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z]))) (* (BLOCK (ALT [_a-zA-Z0-9])))))) (RULE FLOAT (BLOCK (ALT (? (BLOCK (ALT '-'))) (+ (BLOCK (ALT [0-9]))) [.] (+ (BLOCK (ALT [0-9])))))) (RULE CHAR (BLOCK (ALT '"' (? (BLOCK (ALT [a-zA-Z]))) '"'))) (RULE SEMI (BLOCK (ALT ';'))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE BLOCK_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-05-29 22:50:22:527 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR CVtoJasmin (import lexerRulesCV) (RULES (RULE start (BLOCK (ALT INSERT CODE ALLAVE content CLLAVE))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT assignament) (ALT imprimir) (ALT ordencondicional) (ALT while))) (RULE declaraciones (BLOCK (ALT tipo ID (? (BLOCK (ALT EQUALS expr))) SEMI))) (RULE assignament (BLOCK (ALT ID EQUALS expr SEMI) (ALT ID (= com (SET '+=' '-=' '*=' '/=' '%=')) (? (BLOCK (ALT expr))) SEMI) (ALT ID (= com (SET '--' '++')) (? (BLOCK (ALT expr))) SEMI))) (RULE imprimir (BLOCK (ALT PRINT APARENTESIS expr CPARENTESIS SEMI))) (RULE tipo (BLOCK (ALT (SET 'margit' 'radahn' 'godrick')))) (RULE expr (BLOCK (ALT APARENTESIS expr CPARENTESIS) (ALT expr (= op (SET MUL DIV MOD)) expr) (ALT expr (= op (SET ADD SUB)) expr) (ALT (= operator (SET '<' '>' '<=' '>=' '==' '!=' 'true' 'false' '!true' '!false'))) (ALT expr (= operator (SET '<' '>' '<=' '>=' '==' '!=' 'true' 'false' '!true' '!false')) expr) (ALT expr (= operator (SET '&&' '||')) expr) (ALT INT) (ALT ID) (ALT STRING) (ALT FLOAT) (ALT CHAR))) (RULE ordencondicional (BLOCK (ALT condicional (* (BLOCK (ALT condicional_elseif))) (? (BLOCK (ALT condicional_else)))))) (RULE condicional (BLOCK (ALT IF APARENTESIS expr CPARENTESIS ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE condicional_elseif (BLOCK (ALT ELSE condicional))) (RULE condicional_else (BLOCK (ALT ELSE ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE while (BLOCK (ALT WHILE APARENTESIS (BLOCK (ALT expr)) CPARENTESIS ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE)))))
2024-05-29 22:50:22:528 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR CVtoJasminLexer (RULES (RULE T__0 (BLOCK (ALT '+='))) (RULE T__1 (BLOCK (ALT '-='))) (RULE T__2 (BLOCK (ALT '*='))) (RULE T__3 (BLOCK (ALT '/='))) (RULE T__4 (BLOCK (ALT '%='))) (RULE T__5 (BLOCK (ALT '--'))) (RULE T__6 (BLOCK (ALT '++'))) (RULE T__7 (BLOCK (ALT 'margit'))) (RULE T__8 (BLOCK (ALT 'radahn'))) (RULE T__9 (BLOCK (ALT 'godrick'))) (RULE T__10 (BLOCK (ALT '<'))) (RULE T__11 (BLOCK (ALT '>'))) (RULE T__12 (BLOCK (ALT '<='))) (RULE T__13 (BLOCK (ALT '>='))) (RULE T__14 (BLOCK (ALT '=='))) (RULE T__15 (BLOCK (ALT '!='))) (RULE T__16 (BLOCK (ALT 'true'))) (RULE T__17 (BLOCK (ALT 'false'))) (RULE T__18 (BLOCK (ALT '!true'))) (RULE T__19 (BLOCK (ALT '!false'))) (RULE T__20 (BLOCK (ALT '&&'))) (RULE T__21 (BLOCK (ALT '||'))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE MOD (BLOCK (ALT '%'))) (RULE COMA (BLOCK (ALT ','))) (RULE NEGAN (BLOCK (ALT '!'))) (RULE APARENTESIS (BLOCK (ALT '('))) (RULE CPARENTESIS (BLOCK (ALT ')'))) (RULE ALLAVE (BLOCK (ALT '{'))) (RULE CLLAVE (BLOCK (ALT '}'))) (RULE EQUALS (BLOCK (ALT '='))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PRINT (BLOCK (ALT 'MostrarMensaje'))) (RULE IF (BLOCK (ALT 'verificar'))) (RULE ELSE (BLOCK (ALT 'contrario'))) (RULE WHILE (BLOCK (ALT 'repetir'))) (RULE COND_MAT (BLOCK (ALT (BLOCK (ALT '<') (ALT '>') (ALT '<=') (ALT '>='))))) (RULE COND_LOG (BLOCK (ALT (BLOCK (ALT '==') (ALT '!=') (ALT 'true') (ALT 'false') (ALT '!true') (ALT '!false'))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE INT (BLOCK (ALT (? (BLOCK (ALT '-'))) (+ (BLOCK (ALT [0-9])))))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z]))) (* (BLOCK (ALT [_a-zA-Z0-9])))))) (RULE FLOAT (BLOCK (ALT (? (BLOCK (ALT '-'))) (+ (BLOCK (ALT [0-9]))) [.] (+ (BLOCK (ALT [0-9])))))) (RULE CHAR (BLOCK (ALT '"' (? (BLOCK (ALT [a-zA-Z]))) '"'))) (RULE SEMI (BLOCK (ALT ';'))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE BLOCK_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-05-29 22:50:22:771 left-recursion LogManager.java:25 expr
    :   ( {} APARENTESIS<tokenIndex=186> expr<tokenIndex=188> CPARENTESIS<tokenIndex=190> 
        | operator=('<'<tokenIndex=233>|'>'<tokenIndex=235>|'<='<tokenIndex=237>|'>='<tokenIndex=239>|'=='<tokenIndex=241>|'!='<tokenIndex=243>|'true'<tokenIndex=245>|'false'<tokenIndex=247>| '!true'<tokenIndex=250>|'!false'<tokenIndex=252>) 
        | INT<tokenIndex=302> 
        | ID<tokenIndex=306> 
        | STRING<tokenIndex=310> 
        | FLOAT<tokenIndex=314> 
        | CHAR<tokenIndex=318> 
        )
        (
          {this.precpred(this._ctx, 10)}?<p=10> op=(MUL<tokenIndex=199> | DIV<tokenIndex=203> | MOD<tokenIndex=207>) expr<tokenIndex=210,p=11>
                  | {this.precpred(this._ctx, 9)}?<p=9> op=(ADD<tokenIndex=219> | SUB<tokenIndex=223>) expr<tokenIndex=226,p=10>
                  | {this.precpred(this._ctx, 7)}?<p=7> operator=('<'<tokenIndex=262>|'>'<tokenIndex=264>|'<='<tokenIndex=266>|'>='<tokenIndex=268>|'=='<tokenIndex=270>|'!='<tokenIndex=272>|'true'<tokenIndex=274>|'false'<tokenIndex=276>| '!true'<tokenIndex=279>|'!false'<tokenIndex=281>) expr<tokenIndex=284,p=8>
                  | {this.precpred(this._ctx, 6)}?<p=6> operator=('&&'<tokenIndex=293>|'||'<tokenIndex=295>) expr<tokenIndex=298,p=7>
        )*
    ;
2024-05-29 22:50:22:785 grammar LogManager.java:25 added: (RULE expr (BLOCK (ALT (BLOCK (ALT {} (APARENTESIS (ELEMENT_OPTIONS (= tokenIndex 186))) (expr (ELEMENT_OPTIONS (= tokenIndex 188))) (CPARENTESIS (ELEMENT_OPTIONS (= tokenIndex 190)))) (ALT (= operator (SET ('<' (ELEMENT_OPTIONS (= tokenIndex 233))) ('>' (ELEMENT_OPTIONS (= tokenIndex 235))) ('<=' (ELEMENT_OPTIONS (= tokenIndex 237))) ('>=' (ELEMENT_OPTIONS (= tokenIndex 239))) ('==' (ELEMENT_OPTIONS (= tokenIndex 241))) ('!=' (ELEMENT_OPTIONS (= tokenIndex 243))) ('true' (ELEMENT_OPTIONS (= tokenIndex 245))) ('false' (ELEMENT_OPTIONS (= tokenIndex 247))) ('!true' (ELEMENT_OPTIONS (= tokenIndex 250))) ('!false' (ELEMENT_OPTIONS (= tokenIndex 252)))))) (ALT (INT (ELEMENT_OPTIONS (= tokenIndex 302)))) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 306)))) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 310)))) (ALT (FLOAT (ELEMENT_OPTIONS (= tokenIndex 314)))) (ALT (CHAR (ELEMENT_OPTIONS (= tokenIndex 318))))) (* (BLOCK (ALT ({this.precpred(this._ctx, 10)}? (ELEMENT_OPTIONS (= p 10))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 199))) (DIV (ELEMENT_OPTIONS (= tokenIndex 203))) (MOD (ELEMENT_OPTIONS (= tokenIndex 207))))) (expr (ELEMENT_OPTIONS (= tokenIndex 210) (= p 11)))) (ALT ({this.precpred(this._ctx, 9)}? (ELEMENT_OPTIONS (= p 9))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 219))) (SUB (ELEMENT_OPTIONS (= tokenIndex 223))))) (expr (ELEMENT_OPTIONS (= tokenIndex 226) (= p 10)))) (ALT ({this.precpred(this._ctx, 7)}? (ELEMENT_OPTIONS (= p 7))) (= operator (SET ('<' (ELEMENT_OPTIONS (= tokenIndex 262))) ('>' (ELEMENT_OPTIONS (= tokenIndex 264))) ('<=' (ELEMENT_OPTIONS (= tokenIndex 266))) ('>=' (ELEMENT_OPTIONS (= tokenIndex 268))) ('==' (ELEMENT_OPTIONS (= tokenIndex 270))) ('!=' (ELEMENT_OPTIONS (= tokenIndex 272))) ('true' (ELEMENT_OPTIONS (= tokenIndex 274))) ('false' (ELEMENT_OPTIONS (= tokenIndex 276))) ('!true' (ELEMENT_OPTIONS (= tokenIndex 279))) ('!false' (ELEMENT_OPTIONS (= tokenIndex 281))))) (expr (ELEMENT_OPTIONS (= tokenIndex 284) (= p 8)))) (ALT ({this.precpred(this._ctx, 6)}? (ELEMENT_OPTIONS (= p 6))) (= operator (SET ('&&' (ELEMENT_OPTIONS (= tokenIndex 293))) ('||' (ELEMENT_OPTIONS (= tokenIndex 295))))) (expr (ELEMENT_OPTIONS (= tokenIndex 298) (= p 7)))))))))
2024-05-29 22:50:22:789 semantics LogManager.java:25 tokens={EOF=-1, T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, INSERT=23, CODE=24, MOD=25, COMA=26, NEGAN=27, APARENTESIS=28, CPARENTESIS=29, ALLAVE=30, CLLAVE=31, EQUALS=32, MUL=33, DIV=34, ADD=35, SUB=36, PRINT=37, IF=38, ELSE=39, WHILE=40, COND_MAT=41, COND_LOG=42, STRING=43, INT=44, ID=45, FLOAT=46, CHAR=47, SEMI=48, LINE_COMMENT=49, BLOCK_COMMENT=50, WS=51}
2024-05-29 22:50:22:789 semantics LogManager.java:25 strings={'+='=1, '-='=2, '*='=3, '/='=4, '%='=5, '--'=6, '++'=7, 'margit'=8, 'radahn'=9, 'godrick'=10, '<'=11, '>'=12, '<='=13, '>='=14, '=='=15, '!='=16, 'true'=17, 'false'=18, '!true'=19, '!false'=20, '&&'=21, '||'=22, 'iniciar'=23, 'codigo'=24, '%'=25, ','=26, '!'=27, '('=28, ')'=29, '{'=30, '}'=31, '='=32, '*'=33, '/'=34, '+'=35, '-'=36, 'MostrarMensaje'=37, 'verificar'=38, 'contrario'=39, 'repetir'=40, ';'=48}
2024-05-29 22:50:22:801 LL1 LogManager.java:25 
DECISION 0 in rule content
2024-05-29 22:50:22:801 LL1 LogManager.java:25 LL(1)? false
2024-05-29 22:50:22:801 LL1 LogManager.java:25 
DECISION 1 in rule expresiones
2024-05-29 22:50:22:802 LL1 LogManager.java:25 look=[{8..10}, 45, 37, 38, 40]
2024-05-29 22:50:22:802 LL1 LogManager.java:25 LL(1)? true
2024-05-29 22:50:22:802 LL1 LogManager.java:25 
DECISION 2 in rule declaraciones
2024-05-29 22:50:22:802 LL1 LogManager.java:25 look=[32, 48]
2024-05-29 22:50:22:802 LL1 LogManager.java:25 LL(1)? true
2024-05-29 22:50:22:802 LL1 LogManager.java:25 
DECISION 3 in rule assignament
2024-05-29 22:50:22:802 LL1 LogManager.java:25 look=[{11..20, 28, 43..47}, 48]
2024-05-29 22:50:22:802 LL1 LogManager.java:25 LL(1)? true
2024-05-29 22:50:22:802 LL1 LogManager.java:25 
DECISION 4 in rule assignament
2024-05-29 22:50:22:802 LL1 LogManager.java:25 look=[{11..20, 28, 43..47}, 48]
2024-05-29 22:50:22:802 LL1 LogManager.java:25 LL(1)? true
2024-05-29 22:50:22:802 LL1 LogManager.java:25 
DECISION 5 in rule assignament
2024-05-29 22:50:22:802 LL1 LogManager.java:25 look=[45, 45, 45]
2024-05-29 22:50:22:802 LL1 LogManager.java:25 LL(1)? false
2024-05-29 22:50:22:802 LL1 LogManager.java:25 
DECISION 6 in rule expr
2024-05-29 22:50:22:802 LL1 LogManager.java:25 look=[28, {11..20}, 44, 45, 43, 46, 47]
2024-05-29 22:50:22:803 LL1 LogManager.java:25 LL(1)? true
2024-05-29 22:50:22:803 LL1 LogManager.java:25 
DECISION 7 in rule expr
2024-05-29 22:50:22:803 LL1 LogManager.java:25 look=[null, null, null, null]
2024-05-29 22:50:22:803 LL1 LogManager.java:25 LL(1)? false
2024-05-29 22:50:22:803 LL1 LogManager.java:25 
DECISION 8 in rule expr
2024-05-29 22:50:22:803 LL1 LogManager.java:25 look=[null, null]
2024-05-29 22:50:22:803 LL1 LogManager.java:25 LL(1)? false
2024-05-29 22:50:22:803 LL1 LogManager.java:25 
DECISION 9 in rule ordencondicional
2024-05-29 22:50:22:803 LL1 LogManager.java:25 look=[39, {8..10, 31, 37..40, 45}]
2024-05-29 22:50:22:803 LL1 LogManager.java:25 LL(1)? false
2024-05-29 22:50:22:803 LL1 LogManager.java:25 
DECISION 10 in rule ordencondicional
2024-05-29 22:50:22:804 LL1 LogManager.java:25 look=[39, {8..10, 31, 37..38, 40, 45}]
2024-05-29 22:50:22:804 LL1 LogManager.java:25 LL(1)? true
2024-05-29 22:50:22:804 LL1 LogManager.java:25 
DECISION 11 in rule condicional
2024-05-29 22:50:22:804 LL1 LogManager.java:25 look=[{8..10, 37..38, 40, 45}, 31]
2024-05-29 22:50:22:804 LL1 LogManager.java:25 LL(1)? true
2024-05-29 22:50:22:804 LL1 LogManager.java:25 
DECISION 12 in rule condicional_else
2024-05-29 22:50:22:804 LL1 LogManager.java:25 look=[{8..10, 37..38, 40, 45}, 31]
2024-05-29 22:50:22:804 LL1 LogManager.java:25 LL(1)? true
2024-05-29 22:50:22:804 LL1 LogManager.java:25 
DECISION 13 in rule while
2024-05-29 22:50:22:805 LL1 LogManager.java:25 look=[{8..10, 37..38, 40, 45}, 31]
2024-05-29 22:50:22:805 LL1 LogManager.java:25 LL(1)? true
2024-05-29 22:50:22:837 action-translator LogManager.java:25 translate 
2024-05-29 22:50:22:838 action-translator LogManager.java:25 translate this.precpred(this._ctx, 10)
2024-05-29 22:50:22:840 action-translator LogManager.java:25 translate this.precpred(this._ctx, 9)
2024-05-29 22:50:22:840 action-translator LogManager.java:25 translate this.precpred(this._ctx, 7)
2024-05-29 22:50:22:841 action-translator LogManager.java:25 translate this.precpred(this._ctx, 6)
2024-05-29 22:50:22:842 action-translator LogManager.java:25 translate this.precpred(this._ctx, 10)
2024-05-29 22:50:22:842 action-translator LogManager.java:25 translate this.precpred(this._ctx, 9)
2024-05-29 22:50:22:842 action-translator LogManager.java:25 translate this.precpred(this._ctx, 7)
2024-05-29 22:50:22:842 action-translator LogManager.java:25 translate this.precpred(this._ctx, 6)
