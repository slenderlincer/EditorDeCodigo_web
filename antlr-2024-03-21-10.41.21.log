2024-03-21 10:41:20:715 grammar LogManager.java:25 load LexerRules from ./grammar/CodeFile.g4
2024-03-21 10:41:20:723 grammar LogManager.java:25 before: (COMBINED_GRAMMAR CodeFile (import LexerRules) (RULES (RULE start (BLOCK (ALT INSERT CODE '{' content '}'))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT asignaciones) (ALT imprimir) (ALT ordenCondicion))) (RULE declaraciones (BLOCK (ALT tipo ID SEMI) (ALT tipo ID '=' expr SEMI))) (RULE asignaciones (BLOCK (ALT ID '=' expr SEMI))) (RULE imprimir (BLOCK (ALT 'MostrarMensaje(' expr ')' SEMI))) (RULE ordenCondicion (BLOCK (ALT condition_if (* (BLOCK (ALT otherwiseWithCondition))) (? (BLOCK (ALT otherwise)))))) (RULE condition_if (BLOCK (ALT IF '(' condicion ')' '{' (* (BLOCK (ALT expresiones))) '}'))) (RULE otherwiseWithCondition (BLOCK (ALT ELSE condition_if))) (RULE otherwise (BLOCK (ALT ELSE '{' (* (BLOCK (ALT expresiones))) '}'))) (RULE condicion (BLOCK (ALT expr (= op (BLOCK (ALT MAYORQUE) (ALT MENORQUE) (ALT MAYORIGUAL) (ALT MENORIGUAL) (ALT DOBLEIGUAL) (ALT NEGACION))) expr) (ALT (= op (BLOCK (ALT VERDADERO) (ALT FALSE)))))) (RULE tipo (BLOCK (ALT 'margit') (ALT 'radahn') (ALT 'godrick'))) (RULE expr (BLOCK (ALT expr (= op (BLOCK (ALT '*') (ALT '/'))) expr) (ALT expr (= op (BLOCK (ALT '+') (ALT '-'))) expr) (ALT INT) (ALT ID) (ALT STRING) (ALT '(' expr ')'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE MAYORQUE (BLOCK (ALT '>'))) (RULE MENORQUE (BLOCK (ALT '<'))) (RULE MAYORIGUAL (BLOCK (ALT '>='))) (RULE MENORIGUAL (BLOCK (ALT '<='))) (RULE DOBLEIGUAL (BLOCK (ALT '=='))) (RULE NEGACION (BLOCK (ALT '!='))) (RULE VERDADERO (BLOCK (ALT 'true'))) (RULE FALSE (BLOCK (ALT 'false')))))
2024-03-21 10:41:20:731 grammar LogManager.java:25 imported actions: []
2024-03-21 10:41:20:731 grammar LogManager.java:25 imported rule: (RULE INSERT (BLOCK (ALT 'iniciar')))
2024-03-21 10:41:20:731 grammar LogManager.java:25 imported rule: (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9]))))))
2024-03-21 10:41:20:731 grammar LogManager.java:25 imported rule: (RULE CODE (BLOCK (ALT 'codigo')))
2024-03-21 10:41:20:731 grammar LogManager.java:25 imported rule: (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z]))))))
2024-03-21 10:41:20:731 grammar LogManager.java:25 imported rule: (RULE SEMI (BLOCK (ALT ';')))
2024-03-21 10:41:20:731 grammar LogManager.java:25 imported rule: (RULE MUL (BLOCK (ALT '*')))
2024-03-21 10:41:20:731 grammar LogManager.java:25 imported rule: (RULE DIV (BLOCK (ALT '/')))
2024-03-21 10:41:20:731 grammar LogManager.java:25 imported rule: (RULE ADD (BLOCK (ALT '+')))
2024-03-21 10:41:20:731 grammar LogManager.java:25 imported rule: (RULE SUB (BLOCK (ALT '-')))
2024-03-21 10:41:20:731 grammar LogManager.java:25 imported rule: (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))
2024-03-21 10:41:20:731 grammar LogManager.java:25 Grammar: (COMBINED_GRAMMAR CodeFile (import LexerRules) (RULES (RULE start (BLOCK (ALT INSERT CODE '{' content '}'))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT asignaciones) (ALT imprimir) (ALT ordenCondicion))) (RULE declaraciones (BLOCK (ALT tipo ID SEMI) (ALT tipo ID '=' expr SEMI))) (RULE asignaciones (BLOCK (ALT ID '=' expr SEMI))) (RULE imprimir (BLOCK (ALT 'MostrarMensaje(' expr ')' SEMI))) (RULE ordenCondicion (BLOCK (ALT condition_if (* (BLOCK (ALT otherwiseWithCondition))) (? (BLOCK (ALT otherwise)))))) (RULE condition_if (BLOCK (ALT IF '(' condicion ')' '{' (* (BLOCK (ALT expresiones))) '}'))) (RULE otherwiseWithCondition (BLOCK (ALT ELSE condition_if))) (RULE otherwise (BLOCK (ALT ELSE '{' (* (BLOCK (ALT expresiones))) '}'))) (RULE condicion (BLOCK (ALT expr (= op (BLOCK (ALT MAYORQUE) (ALT MENORQUE) (ALT MAYORIGUAL) (ALT MENORIGUAL) (ALT DOBLEIGUAL) (ALT NEGACION))) expr) (ALT (= op (BLOCK (ALT VERDADERO) (ALT FALSE)))))) (RULE tipo (BLOCK (ALT 'margit') (ALT 'radahn') (ALT 'godrick'))) (RULE expr (BLOCK (ALT expr (= op (BLOCK (ALT '*') (ALT '/'))) expr) (ALT expr (= op (BLOCK (ALT '+') (ALT '-'))) expr) (ALT INT) (ALT ID) (ALT STRING) (ALT '(' expr ')'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE MAYORQUE (BLOCK (ALT '>'))) (RULE MENORQUE (BLOCK (ALT '<'))) (RULE MAYORIGUAL (BLOCK (ALT '>='))) (RULE MENORIGUAL (BLOCK (ALT '<='))) (RULE DOBLEIGUAL (BLOCK (ALT '=='))) (RULE NEGACION (BLOCK (ALT '!='))) (RULE VERDADERO (BLOCK (ALT 'true'))) (RULE FALSE (BLOCK (ALT 'false'))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z])))))) (RULE SEMI (BLOCK (ALT ';'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-03-21 10:41:20:781 grammar LogManager.java:25 after: (COMBINED_GRAMMAR CodeFile (import LexerRules) (RULES (RULE start (BLOCK (ALT INSERT CODE '{' content '}'))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT asignaciones) (ALT imprimir) (ALT ordenCondicion))) (RULE declaraciones (BLOCK (ALT tipo ID SEMI) (ALT tipo ID '=' expr SEMI))) (RULE asignaciones (BLOCK (ALT ID '=' expr SEMI))) (RULE imprimir (BLOCK (ALT 'MostrarMensaje(' expr ')' SEMI))) (RULE ordenCondicion (BLOCK (ALT condition_if (* (BLOCK (ALT otherwiseWithCondition))) (? (BLOCK (ALT otherwise)))))) (RULE condition_if (BLOCK (ALT IF '(' condicion ')' '{' (* (BLOCK (ALT expresiones))) '}'))) (RULE otherwiseWithCondition (BLOCK (ALT ELSE condition_if))) (RULE otherwise (BLOCK (ALT ELSE '{' (* (BLOCK (ALT expresiones))) '}'))) (RULE condicion (BLOCK (ALT expr (= op (SET MAYORQUE MENORQUE MAYORIGUAL MENORIGUAL DOBLEIGUAL NEGACION)) expr) (ALT (= op (SET VERDADERO FALSE))))) (RULE tipo (BLOCK (ALT (SET 'margit' 'radahn' 'godrick')))) (RULE expr (BLOCK (ALT expr (= op (SET '*' '/')) expr) (ALT expr (= op (SET '+' '-')) expr) (ALT INT) (ALT ID) (ALT STRING) (ALT '(' expr ')'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE MAYORQUE (BLOCK (ALT '>'))) (RULE MENORQUE (BLOCK (ALT '<'))) (RULE MAYORIGUAL (BLOCK (ALT '>='))) (RULE MENORIGUAL (BLOCK (ALT '<='))) (RULE DOBLEIGUAL (BLOCK (ALT '=='))) (RULE NEGACION (BLOCK (ALT '!='))) (RULE VERDADERO (BLOCK (ALT 'true'))) (RULE FALSE (BLOCK (ALT 'false'))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z])))))) (RULE SEMI (BLOCK (ALT ';'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-03-21 10:41:20:855 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR CodeFile (import LexerRules) (RULES (RULE start (BLOCK (ALT INSERT CODE '{' content '}'))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT asignaciones) (ALT imprimir) (ALT ordenCondicion))) (RULE declaraciones (BLOCK (ALT tipo ID SEMI) (ALT tipo ID '=' expr SEMI))) (RULE asignaciones (BLOCK (ALT ID '=' expr SEMI))) (RULE imprimir (BLOCK (ALT 'MostrarMensaje(' expr ')' SEMI))) (RULE ordenCondicion (BLOCK (ALT condition_if (* (BLOCK (ALT otherwiseWithCondition))) (? (BLOCK (ALT otherwise)))))) (RULE condition_if (BLOCK (ALT IF '(' condicion ')' '{' (* (BLOCK (ALT expresiones))) '}'))) (RULE otherwiseWithCondition (BLOCK (ALT ELSE condition_if))) (RULE otherwise (BLOCK (ALT ELSE '{' (* (BLOCK (ALT expresiones))) '}'))) (RULE condicion (BLOCK (ALT expr (= op (SET MAYORQUE MENORQUE MAYORIGUAL MENORIGUAL DOBLEIGUAL NEGACION)) expr) (ALT (= op (SET VERDADERO FALSE))))) (RULE tipo (BLOCK (ALT (SET 'margit' 'radahn' 'godrick')))) (RULE expr (BLOCK (ALT expr (= op (SET '*' '/')) expr) (ALT expr (= op (SET '+' '-')) expr) (ALT INT) (ALT ID) (ALT STRING) (ALT '(' expr ')')))))
2024-03-21 10:41:20:856 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR CodeFileLexer (RULES (RULE T__0 (BLOCK (ALT '{'))) (RULE T__1 (BLOCK (ALT '}'))) (RULE T__2 (BLOCK (ALT '='))) (RULE T__3 (BLOCK (ALT 'MostrarMensaje('))) (RULE T__4 (BLOCK (ALT ')'))) (RULE T__5 (BLOCK (ALT '('))) (RULE T__6 (BLOCK (ALT 'margit'))) (RULE T__7 (BLOCK (ALT 'radahn'))) (RULE T__8 (BLOCK (ALT 'godrick'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE MAYORQUE (BLOCK (ALT '>'))) (RULE MENORQUE (BLOCK (ALT '<'))) (RULE MAYORIGUAL (BLOCK (ALT '>='))) (RULE MENORIGUAL (BLOCK (ALT '<='))) (RULE DOBLEIGUAL (BLOCK (ALT '=='))) (RULE NEGACION (BLOCK (ALT '!='))) (RULE VERDADERO (BLOCK (ALT 'true'))) (RULE FALSE (BLOCK (ALT 'false'))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z])))))) (RULE SEMI (BLOCK (ALT ';'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
