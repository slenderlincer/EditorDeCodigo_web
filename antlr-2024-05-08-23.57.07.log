2024-05-08 23:57:06:157 grammar LogManager.java:25 load lexerRulesCV from ./grammar/CodeFile.g4
2024-05-08 23:57:06:161 grammar LogManager.java:25 before: (COMBINED_GRAMMAR CodeFile (import lexerRulesCV) (RULES (RULE start (BLOCK (ALT INSERT CODE ALLAVE content CLLAVE))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT assignament) (ALT imprimir) (ALT ordencondicional) (ALT while))) (RULE declaraciones (BLOCK (ALT tipo ID SEMI) (ALT tipo ID EQUALS expr SEMI))) (RULE assignament (BLOCK (ALT ID EQUALS expr SEMI) (ALT ID (= com (BLOCK (ALT '+=') (ALT '-=') (ALT '*=') (ALT '/='))) (? (BLOCK (ALT expr))) SEMI) (ALT ID (= com (BLOCK (ALT '--') (ALT '++'))) (? (BLOCK (ALT expr))) SEMI))) (RULE imprimir (BLOCK (ALT PRINT APARENTESIS expr CPARENTESIS SEMI))) (RULE tipo (BLOCK (ALT (BLOCK (ALT 'margit') (ALT 'radahn') (ALT 'godrick') (ALT 'godfrey'))))) (RULE expr (BLOCK (ALT APARENTESIS expr CPARENTESIS) (ALT expr (= op (BLOCK (ALT '*') (ALT '/'))) expr) (ALT expr (= op (BLOCK (ALT '+') (ALT '-'))) expr) (ALT expr COMA expr) (ALT expr RES expr) (ALT NEGAN expr) (ALT (= op (BLOCK (ALT '+') (ALT '-'))) expr) (ALT (= operator (BLOCK (ALT '<') (ALT '>') (ALT '<=') (ALT '>=')))) (ALT (= operator (BLOCK (ALT '==') (ALT '!=') (ALT '&&') (ALT '||') (ALT 'true') (ALT 'false') (ALT '!true') (ALT '!false')))) (ALT expr (= operator (BLOCK (ALT '<') (ALT '>') (ALT '<=') (ALT '>='))) expr) (ALT expr (= operator (BLOCK (ALT '==') (ALT '!=') (ALT '&&') (ALT '||') (ALT 'true') (ALT 'false') (ALT '!true') (ALT '!false'))) expr) (ALT INT) (ALT ID) (ALT STRING) (ALT FLOAT) (ALT CHAR))) (RULE ordencondicional (BLOCK (ALT condicional (* (BLOCK (ALT condicional_elseif))) (? (BLOCK (ALT condicional_else)))))) (RULE condicional (BLOCK (ALT IF APARENTESIS expr CPARENTESIS ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE condicional_elseif (BLOCK (ALT ELSE condicional))) (RULE condicional_else (BLOCK (ALT ELSE ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE while (BLOCK (ALT WHILE APARENTESIS (BLOCK (ALT expr)) CPARENTESIS ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE RES (BLOCK (ALT '%'))) (RULE COMA (BLOCK (ALT ','))) (RULE NEGAN (BLOCK (ALT '!')))))
2024-05-08 23:57:06:173 grammar LogManager.java:25 imported actions: []
2024-05-08 23:57:06:173 grammar LogManager.java:25 imported rule: (RULE APARENTESIS (BLOCK (ALT '(')))
2024-05-08 23:57:06:173 grammar LogManager.java:25 imported rule: (RULE CPARENTESIS (BLOCK (ALT ')')))
2024-05-08 23:57:06:173 grammar LogManager.java:25 imported rule: (RULE ALLAVE (BLOCK (ALT '{')))
2024-05-08 23:57:06:173 grammar LogManager.java:25 imported rule: (RULE CLLAVE (BLOCK (ALT '}')))
2024-05-08 23:57:06:173 grammar LogManager.java:25 imported rule: (RULE EQUALS (BLOCK (ALT '=')))
2024-05-08 23:57:06:173 grammar LogManager.java:25 imported rule: (RULE MUL (BLOCK (ALT '*')))
2024-05-08 23:57:06:173 grammar LogManager.java:25 imported rule: (RULE DIV (BLOCK (ALT '/')))
2024-05-08 23:57:06:173 grammar LogManager.java:25 imported rule: (RULE ADD (BLOCK (ALT '+')))
2024-05-08 23:57:06:173 grammar LogManager.java:25 imported rule: (RULE SUB (BLOCK (ALT '-')))
2024-05-08 23:57:06:173 grammar LogManager.java:25 imported rule: (RULE PRINT (BLOCK (ALT 'MostrarMensaje')))
2024-05-08 23:57:06:173 grammar LogManager.java:25 imported rule: (RULE IF (BLOCK (ALT 'if')))
2024-05-08 23:57:06:173 grammar LogManager.java:25 imported rule: (RULE ELSE (BLOCK (ALT 'else')))
2024-05-08 23:57:06:173 grammar LogManager.java:25 imported rule: (RULE WHILE (BLOCK (ALT 'while')))
2024-05-08 23:57:06:173 grammar LogManager.java:25 imported rule: (RULE COND_MAT (BLOCK (ALT (BLOCK (ALT '<') (ALT '>') (ALT '<=') (ALT '>=')))))
2024-05-08 23:57:06:173 grammar LogManager.java:25 imported rule: (RULE COND_LOG (BLOCK (ALT (BLOCK (ALT '==') (ALT '!=') (ALT 'true') (ALT 'false') (ALT '&&') (ALT '||') (ALT '!true') (ALT '!false')))))
2024-05-08 23:57:06:173 grammar LogManager.java:25 imported rule: (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"')))
2024-05-08 23:57:06:173 grammar LogManager.java:25 imported rule: (RULE INT (BLOCK (ALT (? (BLOCK (ALT '-'))) (+ (BLOCK (ALT [0-9]))))))
2024-05-08 23:57:06:173 grammar LogManager.java:25 imported rule: (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z]))) (* (BLOCK (ALT [_a-zA-Z0-9]))))))
2024-05-08 23:57:06:173 grammar LogManager.java:25 imported rule: (RULE FLOAT (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) [.] (+ (BLOCK (ALT [0-9]))))))
2024-05-08 23:57:06:173 grammar LogManager.java:25 imported rule: (RULE CHAR (BLOCK (ALT '"' (? (BLOCK (ALT [a-zA-Z]))) '"')))
2024-05-08 23:57:06:173 grammar LogManager.java:25 imported rule: (RULE SEMI (BLOCK (ALT ';')))
2024-05-08 23:57:06:173 grammar LogManager.java:25 imported rule: (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))
2024-05-08 23:57:06:178 grammar LogManager.java:25 Grammar: (COMBINED_GRAMMAR CodeFile (import lexerRulesCV) (RULES (RULE start (BLOCK (ALT INSERT CODE ALLAVE content CLLAVE))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT assignament) (ALT imprimir) (ALT ordencondicional) (ALT while))) (RULE declaraciones (BLOCK (ALT tipo ID SEMI) (ALT tipo ID EQUALS expr SEMI))) (RULE assignament (BLOCK (ALT ID EQUALS expr SEMI) (ALT ID (= com (BLOCK (ALT '+=') (ALT '-=') (ALT '*=') (ALT '/='))) (? (BLOCK (ALT expr))) SEMI) (ALT ID (= com (BLOCK (ALT '--') (ALT '++'))) (? (BLOCK (ALT expr))) SEMI))) (RULE imprimir (BLOCK (ALT PRINT APARENTESIS expr CPARENTESIS SEMI))) (RULE tipo (BLOCK (ALT (BLOCK (ALT 'margit') (ALT 'radahn') (ALT 'godrick') (ALT 'godfrey'))))) (RULE expr (BLOCK (ALT APARENTESIS expr CPARENTESIS) (ALT expr (= op (BLOCK (ALT '*') (ALT '/'))) expr) (ALT expr (= op (BLOCK (ALT '+') (ALT '-'))) expr) (ALT expr COMA expr) (ALT expr RES expr) (ALT NEGAN expr) (ALT (= op (BLOCK (ALT '+') (ALT '-'))) expr) (ALT (= operator (BLOCK (ALT '<') (ALT '>') (ALT '<=') (ALT '>=')))) (ALT (= operator (BLOCK (ALT '==') (ALT '!=') (ALT '&&') (ALT '||') (ALT 'true') (ALT 'false') (ALT '!true') (ALT '!false')))) (ALT expr (= operator (BLOCK (ALT '<') (ALT '>') (ALT '<=') (ALT '>='))) expr) (ALT expr (= operator (BLOCK (ALT '==') (ALT '!=') (ALT '&&') (ALT '||') (ALT 'true') (ALT 'false') (ALT '!true') (ALT '!false'))) expr) (ALT INT) (ALT ID) (ALT STRING) (ALT FLOAT) (ALT CHAR))) (RULE ordencondicional (BLOCK (ALT condicional (* (BLOCK (ALT condicional_elseif))) (? (BLOCK (ALT condicional_else)))))) (RULE condicional (BLOCK (ALT IF APARENTESIS expr CPARENTESIS ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE condicional_elseif (BLOCK (ALT ELSE condicional))) (RULE condicional_else (BLOCK (ALT ELSE ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE while (BLOCK (ALT WHILE APARENTESIS (BLOCK (ALT expr)) CPARENTESIS ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE RES (BLOCK (ALT '%'))) (RULE COMA (BLOCK (ALT ','))) (RULE NEGAN (BLOCK (ALT '!'))) (RULE APARENTESIS (BLOCK (ALT '('))) (RULE CPARENTESIS (BLOCK (ALT ')'))) (RULE ALLAVE (BLOCK (ALT '{'))) (RULE CLLAVE (BLOCK (ALT '}'))) (RULE EQUALS (BLOCK (ALT '='))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PRINT (BLOCK (ALT 'MostrarMensaje'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE COND_MAT (BLOCK (ALT (BLOCK (ALT '<') (ALT '>') (ALT '<=') (ALT '>='))))) (RULE COND_LOG (BLOCK (ALT (BLOCK (ALT '==') (ALT '!=') (ALT 'true') (ALT 'false') (ALT '&&') (ALT '||') (ALT '!true') (ALT '!false'))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE INT (BLOCK (ALT (? (BLOCK (ALT '-'))) (+ (BLOCK (ALT [0-9])))))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z]))) (* (BLOCK (ALT [_a-zA-Z0-9])))))) (RULE FLOAT (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) [.] (+ (BLOCK (ALT [0-9])))))) (RULE CHAR (BLOCK (ALT '"' (? (BLOCK (ALT [a-zA-Z]))) '"'))) (RULE SEMI (BLOCK (ALT ';'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-05-08 23:57:06:220 grammar LogManager.java:25 after: (COMBINED_GRAMMAR CodeFile (import lexerRulesCV) (RULES (RULE start (BLOCK (ALT INSERT CODE ALLAVE content CLLAVE))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT assignament) (ALT imprimir) (ALT ordencondicional) (ALT while))) (RULE declaraciones (BLOCK (ALT tipo ID SEMI) (ALT tipo ID EQUALS expr SEMI))) (RULE assignament (BLOCK (ALT ID EQUALS expr SEMI) (ALT ID (= com (SET '+=' '-=' '*=' '/=')) (? (BLOCK (ALT expr))) SEMI) (ALT ID (= com (SET '--' '++')) (? (BLOCK (ALT expr))) SEMI))) (RULE imprimir (BLOCK (ALT PRINT APARENTESIS expr CPARENTESIS SEMI))) (RULE tipo (BLOCK (ALT (SET 'margit' 'radahn' 'godrick' 'godfrey')))) (RULE expr (BLOCK (ALT APARENTESIS expr CPARENTESIS) (ALT expr (= op (SET '*' '/')) expr) (ALT expr (= op (SET '+' '-')) expr) (ALT expr COMA expr) (ALT expr RES expr) (ALT NEGAN expr) (ALT (= op (SET '+' '-')) expr) (ALT (= operator (SET '<' '>' '<=' '>='))) (ALT (= operator (SET '==' '!=' '&&' '||' 'true' 'false' '!true' '!false'))) (ALT expr (= operator (SET '<' '>' '<=' '>=')) expr) (ALT expr (= operator (SET '==' '!=' '&&' '||' 'true' 'false' '!true' '!false')) expr) (ALT INT) (ALT ID) (ALT STRING) (ALT FLOAT) (ALT CHAR))) (RULE ordencondicional (BLOCK (ALT condicional (* (BLOCK (ALT condicional_elseif))) (? (BLOCK (ALT condicional_else)))))) (RULE condicional (BLOCK (ALT IF APARENTESIS expr CPARENTESIS ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE condicional_elseif (BLOCK (ALT ELSE condicional))) (RULE condicional_else (BLOCK (ALT ELSE ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE while (BLOCK (ALT WHILE APARENTESIS (BLOCK (ALT expr)) CPARENTESIS ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE RES (BLOCK (ALT '%'))) (RULE COMA (BLOCK (ALT ','))) (RULE NEGAN (BLOCK (ALT '!'))) (RULE APARENTESIS (BLOCK (ALT '('))) (RULE CPARENTESIS (BLOCK (ALT ')'))) (RULE ALLAVE (BLOCK (ALT '{'))) (RULE CLLAVE (BLOCK (ALT '}'))) (RULE EQUALS (BLOCK (ALT '='))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PRINT (BLOCK (ALT 'MostrarMensaje'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE COND_MAT (BLOCK (ALT (BLOCK (ALT '<') (ALT '>') (ALT '<=') (ALT '>='))))) (RULE COND_LOG (BLOCK (ALT (BLOCK (ALT '==') (ALT '!=') (ALT 'true') (ALT 'false') (ALT '&&') (ALT '||') (ALT '!true') (ALT '!false'))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE INT (BLOCK (ALT (? (BLOCK (ALT '-'))) (+ (BLOCK (ALT [0-9])))))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z]))) (* (BLOCK (ALT [_a-zA-Z0-9])))))) (RULE FLOAT (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) [.] (+ (BLOCK (ALT [0-9])))))) (RULE CHAR (BLOCK (ALT '"' (? (BLOCK (ALT [a-zA-Z]))) '"'))) (RULE SEMI (BLOCK (ALT ';'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-05-08 23:57:06:268 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR CodeFile (import lexerRulesCV) (RULES (RULE start (BLOCK (ALT INSERT CODE ALLAVE content CLLAVE))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT assignament) (ALT imprimir) (ALT ordencondicional) (ALT while))) (RULE declaraciones (BLOCK (ALT tipo ID SEMI) (ALT tipo ID EQUALS expr SEMI))) (RULE assignament (BLOCK (ALT ID EQUALS expr SEMI) (ALT ID (= com (SET '+=' '-=' '*=' '/=')) (? (BLOCK (ALT expr))) SEMI) (ALT ID (= com (SET '--' '++')) (? (BLOCK (ALT expr))) SEMI))) (RULE imprimir (BLOCK (ALT PRINT APARENTESIS expr CPARENTESIS SEMI))) (RULE tipo (BLOCK (ALT (SET 'margit' 'radahn' 'godrick' 'godfrey')))) (RULE expr (BLOCK (ALT APARENTESIS expr CPARENTESIS) (ALT expr (= op (SET '*' '/')) expr) (ALT expr (= op (SET '+' '-')) expr) (ALT expr COMA expr) (ALT expr RES expr) (ALT NEGAN expr) (ALT (= op (SET '+' '-')) expr) (ALT (= operator (SET '<' '>' '<=' '>='))) (ALT (= operator (SET '==' '!=' '&&' '||' 'true' 'false' '!true' '!false'))) (ALT expr (= operator (SET '<' '>' '<=' '>=')) expr) (ALT expr (= operator (SET '==' '!=' '&&' '||' 'true' 'false' '!true' '!false')) expr) (ALT INT) (ALT ID) (ALT STRING) (ALT FLOAT) (ALT CHAR))) (RULE ordencondicional (BLOCK (ALT condicional (* (BLOCK (ALT condicional_elseif))) (? (BLOCK (ALT condicional_else)))))) (RULE condicional (BLOCK (ALT IF APARENTESIS expr CPARENTESIS ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE condicional_elseif (BLOCK (ALT ELSE condicional))) (RULE condicional_else (BLOCK (ALT ELSE ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE while (BLOCK (ALT WHILE APARENTESIS (BLOCK (ALT expr)) CPARENTESIS ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE)))))
2024-05-08 23:57:06:276 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR CodeFileLexer (RULES (RULE T__0 (BLOCK (ALT '+='))) (RULE T__1 (BLOCK (ALT '-='))) (RULE T__2 (BLOCK (ALT '*='))) (RULE T__3 (BLOCK (ALT '/='))) (RULE T__4 (BLOCK (ALT '--'))) (RULE T__5 (BLOCK (ALT '++'))) (RULE T__6 (BLOCK (ALT 'margit'))) (RULE T__7 (BLOCK (ALT 'radahn'))) (RULE T__8 (BLOCK (ALT 'godrick'))) (RULE T__9 (BLOCK (ALT 'godfrey'))) (RULE T__10 (BLOCK (ALT '<'))) (RULE T__11 (BLOCK (ALT '>'))) (RULE T__12 (BLOCK (ALT '<='))) (RULE T__13 (BLOCK (ALT '>='))) (RULE T__14 (BLOCK (ALT '=='))) (RULE T__15 (BLOCK (ALT '!='))) (RULE T__16 (BLOCK (ALT '&&'))) (RULE T__17 (BLOCK (ALT '||'))) (RULE T__18 (BLOCK (ALT 'true'))) (RULE T__19 (BLOCK (ALT 'false'))) (RULE T__20 (BLOCK (ALT '!true'))) (RULE T__21 (BLOCK (ALT '!false'))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE RES (BLOCK (ALT '%'))) (RULE COMA (BLOCK (ALT ','))) (RULE NEGAN (BLOCK (ALT '!'))) (RULE APARENTESIS (BLOCK (ALT '('))) (RULE CPARENTESIS (BLOCK (ALT ')'))) (RULE ALLAVE (BLOCK (ALT '{'))) (RULE CLLAVE (BLOCK (ALT '}'))) (RULE EQUALS (BLOCK (ALT '='))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PRINT (BLOCK (ALT 'MostrarMensaje'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE COND_MAT (BLOCK (ALT (BLOCK (ALT '<') (ALT '>') (ALT '<=') (ALT '>='))))) (RULE COND_LOG (BLOCK (ALT (BLOCK (ALT '==') (ALT '!=') (ALT 'true') (ALT 'false') (ALT '&&') (ALT '||') (ALT '!true') (ALT '!false'))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE INT (BLOCK (ALT (? (BLOCK (ALT '-'))) (+ (BLOCK (ALT [0-9])))))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z]))) (* (BLOCK (ALT [_a-zA-Z0-9])))))) (RULE FLOAT (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) [.] (+ (BLOCK (ALT [0-9])))))) (RULE CHAR (BLOCK (ALT '"' (? (BLOCK (ALT [a-zA-Z]))) '"'))) (RULE SEMI (BLOCK (ALT ';'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-05-08 23:57:06:854 left-recursion LogManager.java:25 expr
    :   ( {} APARENTESIS<tokenIndex=195> expr<tokenIndex=197> CPARENTESIS<tokenIndex=199>  
        | NEGAN<tokenIndex=267> expr<tokenIndex=269,p=11> 
        | op=('+'<tokenIndex=279>|'-'<tokenIndex=281>) expr<tokenIndex=284,p=10> 
        | operator=('<'<tokenIndex=294>|'>'<tokenIndex=296>|'<='<tokenIndex=298>|'>='<tokenIndex=300>)  
        | operator=('=='<tokenIndex=311>|'!='<tokenIndex=313>|'&&'<tokenIndex=315>|'||'<tokenIndex=317>|'true'<tokenIndex=319>|'false'<tokenIndex=321>| '!true'<tokenIndex=324>|'!false'<tokenIndex=326>)   
        | INT<tokenIndex=385>  
        | ID<tokenIndex=392>  
        | STRING<tokenIndex=399>  
        | FLOAT<tokenIndex=406>  
        | CHAR<tokenIndex=413>  
        )
        (
          {this.precpred(this._ctx, 15)}?<p=15> op=('*'<tokenIndex=211> | '/'<tokenIndex=215>) expr<tokenIndex=218,p=16>
                  | {this.precpred(this._ctx, 14)}?<p=14> op=('+'<tokenIndex=231> | '-'<tokenIndex=235>) expr<tokenIndex=238,p=15>
                  | {this.precpred(this._ctx, 13)}?<p=13> COMA<tokenIndex=247> expr<tokenIndex=249,p=14>
                  | {this.precpred(this._ctx, 12)}?<p=12> RES<tokenIndex=258> expr<tokenIndex=260,p=13>
                  | {this.precpred(this._ctx, 7)}?<p=7> operator=('<'<tokenIndex=339>|'>'<tokenIndex=341>|'<='<tokenIndex=343>|'>='<tokenIndex=345>) expr<tokenIndex=348,p=8>
                  | {this.precpred(this._ctx, 6)}?<p=6> operator=('=='<tokenIndex=360>|'!='<tokenIndex=362>|'&&'<tokenIndex=364>|'||'<tokenIndex=366>|'true'<tokenIndex=368>|'false'<tokenIndex=370>| '!true'<tokenIndex=373>|'!false'<tokenIndex=375>) expr<tokenIndex=378,p=7>
        )*
    ;
2024-05-08 23:57:06:891 grammar LogManager.java:25 added: (RULE expr (BLOCK (ALT (BLOCK (ALT {} (APARENTESIS (ELEMENT_OPTIONS (= tokenIndex 195))) (expr (ELEMENT_OPTIONS (= tokenIndex 197))) (CPARENTESIS (ELEMENT_OPTIONS (= tokenIndex 199)))) (ALT (NEGAN (ELEMENT_OPTIONS (= tokenIndex 267))) (expr (ELEMENT_OPTIONS (= tokenIndex 269) (= p 11)))) (ALT (= op (SET ('+' (ELEMENT_OPTIONS (= tokenIndex 279))) ('-' (ELEMENT_OPTIONS (= tokenIndex 281))))) (expr (ELEMENT_OPTIONS (= tokenIndex 284) (= p 10)))) (ALT (= operator (SET ('<' (ELEMENT_OPTIONS (= tokenIndex 294))) ('>' (ELEMENT_OPTIONS (= tokenIndex 296))) ('<=' (ELEMENT_OPTIONS (= tokenIndex 298))) ('>=' (ELEMENT_OPTIONS (= tokenIndex 300)))))) (ALT (= operator (SET ('==' (ELEMENT_OPTIONS (= tokenIndex 311))) ('!=' (ELEMENT_OPTIONS (= tokenIndex 313))) ('&&' (ELEMENT_OPTIONS (= tokenIndex 315))) ('||' (ELEMENT_OPTIONS (= tokenIndex 317))) ('true' (ELEMENT_OPTIONS (= tokenIndex 319))) ('false' (ELEMENT_OPTIONS (= tokenIndex 321))) ('!true' (ELEMENT_OPTIONS (= tokenIndex 324))) ('!false' (ELEMENT_OPTIONS (= tokenIndex 326)))))) (ALT (INT (ELEMENT_OPTIONS (= tokenIndex 385)))) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 392)))) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 399)))) (ALT (FLOAT (ELEMENT_OPTIONS (= tokenIndex 406)))) (ALT (CHAR (ELEMENT_OPTIONS (= tokenIndex 413))))) (* (BLOCK (ALT ({this.precpred(this._ctx, 15)}? (ELEMENT_OPTIONS (= p 15))) (= op (SET ('*' (ELEMENT_OPTIONS (= tokenIndex 211))) ('/' (ELEMENT_OPTIONS (= tokenIndex 215))))) (expr (ELEMENT_OPTIONS (= tokenIndex 218) (= p 16)))) (ALT ({this.precpred(this._ctx, 14)}? (ELEMENT_OPTIONS (= p 14))) (= op (SET ('+' (ELEMENT_OPTIONS (= tokenIndex 231))) ('-' (ELEMENT_OPTIONS (= tokenIndex 235))))) (expr (ELEMENT_OPTIONS (= tokenIndex 238) (= p 15)))) (ALT ({this.precpred(this._ctx, 13)}? (ELEMENT_OPTIONS (= p 13))) (COMA (ELEMENT_OPTIONS (= tokenIndex 247))) (expr (ELEMENT_OPTIONS (= tokenIndex 249) (= p 14)))) (ALT ({this.precpred(this._ctx, 12)}? (ELEMENT_OPTIONS (= p 12))) (RES (ELEMENT_OPTIONS (= tokenIndex 258))) (expr (ELEMENT_OPTIONS (= tokenIndex 260) (= p 13)))) (ALT ({this.precpred(this._ctx, 7)}? (ELEMENT_OPTIONS (= p 7))) (= operator (SET ('<' (ELEMENT_OPTIONS (= tokenIndex 339))) ('>' (ELEMENT_OPTIONS (= tokenIndex 341))) ('<=' (ELEMENT_OPTIONS (= tokenIndex 343))) ('>=' (ELEMENT_OPTIONS (= tokenIndex 345))))) (expr (ELEMENT_OPTIONS (= tokenIndex 348) (= p 8)))) (ALT ({this.precpred(this._ctx, 6)}? (ELEMENT_OPTIONS (= p 6))) (= operator (SET ('==' (ELEMENT_OPTIONS (= tokenIndex 360))) ('!=' (ELEMENT_OPTIONS (= tokenIndex 362))) ('&&' (ELEMENT_OPTIONS (= tokenIndex 364))) ('||' (ELEMENT_OPTIONS (= tokenIndex 366))) ('true' (ELEMENT_OPTIONS (= tokenIndex 368))) ('false' (ELEMENT_OPTIONS (= tokenIndex 370))) ('!true' (ELEMENT_OPTIONS (= tokenIndex 373))) ('!false' (ELEMENT_OPTIONS (= tokenIndex 375))))) (expr (ELEMENT_OPTIONS (= tokenIndex 378) (= p 7)))))))))
2024-05-08 23:57:06:896 semantics LogManager.java:25 tokens={EOF=-1, T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, INSERT=23, CODE=24, RES=25, COMA=26, NEGAN=27, APARENTESIS=28, CPARENTESIS=29, ALLAVE=30, CLLAVE=31, EQUALS=32, MUL=33, DIV=34, ADD=35, SUB=36, PRINT=37, IF=38, ELSE=39, WHILE=40, COND_MAT=41, COND_LOG=42, STRING=43, INT=44, ID=45, FLOAT=46, CHAR=47, SEMI=48, WS=49}
2024-05-08 23:57:06:896 semantics LogManager.java:25 strings={'+='=1, '-='=2, '*='=3, '/='=4, '--'=5, '++'=6, 'margit'=7, 'radahn'=8, 'godrick'=9, 'godfrey'=10, '<'=11, '>'=12, '<='=13, '>='=14, '=='=15, '!='=16, '&&'=17, '||'=18, 'true'=19, 'false'=20, '!true'=21, '!false'=22, 'iniciar'=23, 'codigo'=24, '%'=25, ','=26, '!'=27, '('=28, ')'=29, '{'=30, '}'=31, '='=32, '*'=33, '/'=34, '+'=35, '-'=36, 'MostrarMensaje'=37, 'if'=38, 'else'=39, 'while'=40, ';'=48}
2024-05-08 23:57:06:968 LL1 LogManager.java:25 
DECISION 0 in rule content
2024-05-08 23:57:06:968 LL1 LogManager.java:25 LL(1)? false
2024-05-08 23:57:06:968 LL1 LogManager.java:25 
DECISION 1 in rule expresiones
2024-05-08 23:57:06:968 LL1 LogManager.java:25 look=[{7..10}, 45, 37, 38, 40]
2024-05-08 23:57:06:968 LL1 LogManager.java:25 LL(1)? true
2024-05-08 23:57:06:968 LL1 LogManager.java:25 
DECISION 2 in rule declaraciones
2024-05-08 23:57:06:968 LL1 LogManager.java:25 look=[{7..10}, {7..10}]
2024-05-08 23:57:06:968 LL1 LogManager.java:25 LL(1)? false
2024-05-08 23:57:06:968 LL1 LogManager.java:25 
DECISION 3 in rule assignament
2024-05-08 23:57:06:968 LL1 LogManager.java:25 look=[{11..22, 27..28, 35..36, 43..47}, 48]
2024-05-08 23:57:06:968 LL1 LogManager.java:25 LL(1)? true
2024-05-08 23:57:06:968 LL1 LogManager.java:25 
DECISION 4 in rule assignament
2024-05-08 23:57:06:968 LL1 LogManager.java:25 look=[{11..22, 27..28, 35..36, 43..47}, 48]
2024-05-08 23:57:06:968 LL1 LogManager.java:25 LL(1)? true
2024-05-08 23:57:06:968 LL1 LogManager.java:25 
DECISION 5 in rule assignament
2024-05-08 23:57:06:968 LL1 LogManager.java:25 look=[45, 45, 45]
2024-05-08 23:57:06:968 LL1 LogManager.java:25 LL(1)? false
2024-05-08 23:57:06:968 LL1 LogManager.java:25 
DECISION 6 in rule expr
2024-05-08 23:57:06:968 LL1 LogManager.java:25 look=[28, 27, {35..36}, {11..14}, {15..22}, 44, 45, 43, 46, 47]
2024-05-08 23:57:06:968 LL1 LogManager.java:25 LL(1)? true
2024-05-08 23:57:06:968 LL1 LogManager.java:25 
DECISION 7 in rule expr
2024-05-08 23:57:06:968 LL1 LogManager.java:25 look=[null, null, null, null, null, null]
2024-05-08 23:57:06:968 LL1 LogManager.java:25 LL(1)? false
2024-05-08 23:57:06:968 LL1 LogManager.java:25 
DECISION 8 in rule expr
2024-05-08 23:57:06:968 LL1 LogManager.java:25 look=[null, null]
2024-05-08 23:57:06:968 LL1 LogManager.java:25 LL(1)? false
2024-05-08 23:57:06:968 LL1 LogManager.java:25 
DECISION 9 in rule ordencondicional
2024-05-08 23:57:06:968 LL1 LogManager.java:25 look=[39, {7..10, 31, 37..40, 45}]
2024-05-08 23:57:06:968 LL1 LogManager.java:25 LL(1)? false
2024-05-08 23:57:06:968 LL1 LogManager.java:25 
DECISION 10 in rule ordencondicional
2024-05-08 23:57:06:968 LL1 LogManager.java:25 look=[39, {7..10, 31, 37..38, 40, 45}]
2024-05-08 23:57:06:968 LL1 LogManager.java:25 LL(1)? true
2024-05-08 23:57:06:968 LL1 LogManager.java:25 
DECISION 11 in rule condicional
2024-05-08 23:57:06:968 LL1 LogManager.java:25 look=[{7..10, 37..38, 40, 45}, 31]
2024-05-08 23:57:06:968 LL1 LogManager.java:25 LL(1)? true
2024-05-08 23:57:06:968 LL1 LogManager.java:25 
DECISION 12 in rule condicional_else
2024-05-08 23:57:06:976 LL1 LogManager.java:25 look=[{7..10, 37..38, 40, 45}, 31]
2024-05-08 23:57:06:976 LL1 LogManager.java:25 LL(1)? true
2024-05-08 23:57:06:976 LL1 LogManager.java:25 
DECISION 13 in rule while
2024-05-08 23:57:06:976 LL1 LogManager.java:25 look=[{7..10, 37..38, 40, 45}, 31]
2024-05-08 23:57:06:976 LL1 LogManager.java:25 LL(1)? true
2024-05-08 23:57:07:064 action-translator LogManager.java:25 translate 
2024-05-08 23:57:07:081 action-translator LogManager.java:25 translate this.precpred(this._ctx, 15)
2024-05-08 23:57:07:082 action-translator LogManager.java:25 translate this.precpred(this._ctx, 14)
2024-05-08 23:57:07:082 action-translator LogManager.java:25 translate this.precpred(this._ctx, 13)
2024-05-08 23:57:07:082 action-translator LogManager.java:25 translate this.precpred(this._ctx, 12)
2024-05-08 23:57:07:087 action-translator LogManager.java:25 translate this.precpred(this._ctx, 7)
2024-05-08 23:57:07:087 action-translator LogManager.java:25 translate this.precpred(this._ctx, 6)
2024-05-08 23:57:07:089 action-translator LogManager.java:25 translate this.precpred(this._ctx, 15)
2024-05-08 23:57:07:089 action-translator LogManager.java:25 translate this.precpred(this._ctx, 14)
2024-05-08 23:57:07:089 action-translator LogManager.java:25 translate this.precpred(this._ctx, 13)
2024-05-08 23:57:07:089 action-translator LogManager.java:25 translate this.precpred(this._ctx, 12)
2024-05-08 23:57:07:089 action-translator LogManager.java:25 translate this.precpred(this._ctx, 7)
2024-05-08 23:57:07:089 action-translator LogManager.java:25 translate this.precpred(this._ctx, 6)
