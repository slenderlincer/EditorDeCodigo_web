2024-02-14 14:34:55:064 grammar LogManager.java:25 before: (COMBINED_GRAMMAR CodeFile (RULES (RULE start (BLOCK (ALT INSERT CODE '{' content '}'))) (RULE content (BLOCK (ALT (* (BLOCK (ALT declaraciones)))))) (RULE declaraciones (BLOCK (ALT tipo ID SEMI))) (RULE tipo (BLOCK (ALT INT) (ALT CHAR) (ALT FLOAT))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE INT (BLOCK (ALT 'wyn'))) (RULE CHAR (BLOCK (ALT 'ludwyn'))) (RULE FLOAT (BLOCK (ALT 'astora'))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z])))))) (RULE SEMI (BLOCK (ALT ';'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-02-14 14:34:55:076 grammar LogManager.java:25 after: (COMBINED_GRAMMAR CodeFile (RULES (RULE start (BLOCK (ALT INSERT CODE '{' content '}'))) (RULE content (BLOCK (ALT (* (BLOCK (ALT declaraciones)))))) (RULE declaraciones (BLOCK (ALT tipo ID SEMI))) (RULE tipo (BLOCK (ALT INT) (ALT CHAR) (ALT FLOAT))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE INT (BLOCK (ALT 'wyn'))) (RULE CHAR (BLOCK (ALT 'ludwyn'))) (RULE FLOAT (BLOCK (ALT 'astora'))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z])))))) (RULE SEMI (BLOCK (ALT ';'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-02-14 14:34:55:109 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR CodeFile (RULES (RULE start (BLOCK (ALT INSERT CODE '{' content '}'))) (RULE content (BLOCK (ALT (* (BLOCK (ALT declaraciones)))))) (RULE declaraciones (BLOCK (ALT tipo ID SEMI))) (RULE tipo (BLOCK (ALT INT) (ALT CHAR) (ALT FLOAT)))))
2024-02-14 14:34:55:109 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR CodeFileLexer (RULES (RULE T__0 (BLOCK (ALT '{'))) (RULE T__1 (BLOCK (ALT '}'))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE INT (BLOCK (ALT 'wyn'))) (RULE CHAR (BLOCK (ALT 'ludwyn'))) (RULE FLOAT (BLOCK (ALT 'astora'))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z])))))) (RULE SEMI (BLOCK (ALT ';'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-02-14 14:34:55:344 semantics LogManager.java:25 tokens={EOF=-1, T__0=1, T__1=2, INSERT=3, CODE=4, INT=5, CHAR=6, FLOAT=7, ID=8, SEMI=9, WS=10}
2024-02-14 14:34:55:344 semantics LogManager.java:25 strings={'{'=1, '}'=2, 'iniciar'=3, 'codigo'=4, 'wyn'=5, 'ludwyn'=6, 'astora'=7, ';'=9}
2024-02-14 14:34:55:349 LL1 LogManager.java:25 
DECISION 0 in rule content
2024-02-14 14:34:55:349 LL1 LogManager.java:25 look=[{5..7}, 2]
2024-02-14 14:34:55:353 LL1 LogManager.java:25 LL(1)? true
2024-02-14 14:34:55:353 LL1 LogManager.java:25 
DECISION 1 in rule tipo
2024-02-14 14:34:55:353 LL1 LogManager.java:25 look=[5, 6, 7]
2024-02-14 14:34:55:353 LL1 LogManager.java:25 LL(1)? true
