2024-03-20 17:04:53:431 grammar LogManager.java:25 load LexerRules from ./grammar/CodeFile.g4
2024-03-20 17:04:53:432 grammar LogManager.java:25 before: (COMBINED_GRAMMAR CodeFile (import LexerRules) (RULES (RULE start (BLOCK (ALT INSERT CODE '{' content '}'))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT asignaciones) (ALT imprimir) (ALT condition_if))) (RULE declaraciones (BLOCK (ALT tipo ID SEMI) (ALT tipo ID '=' expr SEMI))) (RULE asignaciones (BLOCK (ALT ID '=' expr SEMI))) (RULE imprimir (BLOCK (ALT 'MostrarMensaje(' expr ')' SEMI))) (RULE condition_if (BLOCK (ALT IF '(' condicion ')' '{' (* (BLOCK (ALT expresiones))) '}' (* (BLOCK (ALT ELSEIF '(' condicion ')' '{' (* (BLOCK (ALT expresiones))) '}'))) (? (BLOCK (ALT ELSE '{' (* (BLOCK (ALT expresiones))) '}')))))) (RULE condicion (BLOCK (ALT expr (= op (BLOCK (ALT MAYORQUE) (ALT MENORQUE) (ALT MAYORIGUAL) (ALT MENORIGUAL) (ALT DOBLEIGUAL) (ALT NEGACION))) expr) (ALT VERDADERO))) (RULE tipo (BLOCK (ALT 'margit') (ALT 'radahn') (ALT 'godrick'))) (RULE expr (BLOCK (ALT expr (= op (BLOCK (ALT '*') (ALT '/'))) expr) (ALT expr (= op (BLOCK (ALT '+') (ALT '-'))) expr) (ALT INT) (ALT ID) (ALT STRING) (ALT '(' expr ')'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSEIF (BLOCK (ALT 'else' 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE MAYORQUE (BLOCK (ALT '>'))) (RULE MENORQUE (BLOCK (ALT '<'))) (RULE MAYORIGUAL (BLOCK (ALT '>='))) (RULE MENORIGUAL (BLOCK (ALT '<='))) (RULE DOBLEIGUAL (BLOCK (ALT '=='))) (RULE NEGACION (BLOCK (ALT '!='))) (RULE VERDADERO (BLOCK (ALT 'verdad')))))
2024-03-20 17:04:53:439 grammar LogManager.java:25 imported actions: []
2024-03-20 17:04:53:444 grammar LogManager.java:25 imported rule: (RULE INSERT (BLOCK (ALT 'iniciar')))
2024-03-20 17:04:53:444 grammar LogManager.java:25 imported rule: (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9]))))))
2024-03-20 17:04:53:444 grammar LogManager.java:25 imported rule: (RULE CODE (BLOCK (ALT 'codigo')))
2024-03-20 17:04:53:444 grammar LogManager.java:25 imported rule: (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z]))))))
2024-03-20 17:04:53:444 grammar LogManager.java:25 imported rule: (RULE SEMI (BLOCK (ALT ';')))
2024-03-20 17:04:53:444 grammar LogManager.java:25 imported rule: (RULE MUL (BLOCK (ALT '*')))
2024-03-20 17:04:53:444 grammar LogManager.java:25 imported rule: (RULE DIV (BLOCK (ALT '/')))
2024-03-20 17:04:53:444 grammar LogManager.java:25 imported rule: (RULE ADD (BLOCK (ALT '+')))
2024-03-20 17:04:53:444 grammar LogManager.java:25 imported rule: (RULE SUB (BLOCK (ALT '-')))
2024-03-20 17:04:53:444 grammar LogManager.java:25 imported rule: (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))
2024-03-20 17:04:53:444 grammar LogManager.java:25 Grammar: (COMBINED_GRAMMAR CodeFile (import LexerRules) (RULES (RULE start (BLOCK (ALT INSERT CODE '{' content '}'))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT asignaciones) (ALT imprimir) (ALT condition_if))) (RULE declaraciones (BLOCK (ALT tipo ID SEMI) (ALT tipo ID '=' expr SEMI))) (RULE asignaciones (BLOCK (ALT ID '=' expr SEMI))) (RULE imprimir (BLOCK (ALT 'MostrarMensaje(' expr ')' SEMI))) (RULE condition_if (BLOCK (ALT IF '(' condicion ')' '{' (* (BLOCK (ALT expresiones))) '}' (* (BLOCK (ALT ELSEIF '(' condicion ')' '{' (* (BLOCK (ALT expresiones))) '}'))) (? (BLOCK (ALT ELSE '{' (* (BLOCK (ALT expresiones))) '}')))))) (RULE condicion (BLOCK (ALT expr (= op (BLOCK (ALT MAYORQUE) (ALT MENORQUE) (ALT MAYORIGUAL) (ALT MENORIGUAL) (ALT DOBLEIGUAL) (ALT NEGACION))) expr) (ALT VERDADERO))) (RULE tipo (BLOCK (ALT 'margit') (ALT 'radahn') (ALT 'godrick'))) (RULE expr (BLOCK (ALT expr (= op (BLOCK (ALT '*') (ALT '/'))) expr) (ALT expr (= op (BLOCK (ALT '+') (ALT '-'))) expr) (ALT INT) (ALT ID) (ALT STRING) (ALT '(' expr ')'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSEIF (BLOCK (ALT 'else' 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE MAYORQUE (BLOCK (ALT '>'))) (RULE MENORQUE (BLOCK (ALT '<'))) (RULE MAYORIGUAL (BLOCK (ALT '>='))) (RULE MENORIGUAL (BLOCK (ALT '<='))) (RULE DOBLEIGUAL (BLOCK (ALT '=='))) (RULE NEGACION (BLOCK (ALT '!='))) (RULE VERDADERO (BLOCK (ALT 'verdad'))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z])))))) (RULE SEMI (BLOCK (ALT ';'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-03-20 17:04:53:480 grammar LogManager.java:25 after: (COMBINED_GRAMMAR CodeFile (import LexerRules) (RULES (RULE start (BLOCK (ALT INSERT CODE '{' content '}'))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT asignaciones) (ALT imprimir) (ALT condition_if))) (RULE declaraciones (BLOCK (ALT tipo ID SEMI) (ALT tipo ID '=' expr SEMI))) (RULE asignaciones (BLOCK (ALT ID '=' expr SEMI))) (RULE imprimir (BLOCK (ALT 'MostrarMensaje(' expr ')' SEMI))) (RULE condition_if (BLOCK (ALT IF '(' condicion ')' '{' (* (BLOCK (ALT expresiones))) '}' (* (BLOCK (ALT ELSEIF '(' condicion ')' '{' (* (BLOCK (ALT expresiones))) '}'))) (? (BLOCK (ALT ELSE '{' (* (BLOCK (ALT expresiones))) '}')))))) (RULE condicion (BLOCK (ALT expr (= op (SET MAYORQUE MENORQUE MAYORIGUAL MENORIGUAL DOBLEIGUAL NEGACION)) expr) (ALT VERDADERO))) (RULE tipo (BLOCK (ALT (SET 'margit' 'radahn' 'godrick')))) (RULE expr (BLOCK (ALT expr (= op (SET '*' '/')) expr) (ALT expr (= op (SET '+' '-')) expr) (ALT INT) (ALT ID) (ALT STRING) (ALT '(' expr ')'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSEIF (BLOCK (ALT 'else' 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE MAYORQUE (BLOCK (ALT '>'))) (RULE MENORQUE (BLOCK (ALT '<'))) (RULE MAYORIGUAL (BLOCK (ALT '>='))) (RULE MENORIGUAL (BLOCK (ALT '<='))) (RULE DOBLEIGUAL (BLOCK (ALT '=='))) (RULE NEGACION (BLOCK (ALT '!='))) (RULE VERDADERO (BLOCK (ALT 'verdad'))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z])))))) (RULE SEMI (BLOCK (ALT ';'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-03-20 17:04:53:523 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR CodeFile (import LexerRules) (RULES (RULE start (BLOCK (ALT INSERT CODE '{' content '}'))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT asignaciones) (ALT imprimir) (ALT condition_if))) (RULE declaraciones (BLOCK (ALT tipo ID SEMI) (ALT tipo ID '=' expr SEMI))) (RULE asignaciones (BLOCK (ALT ID '=' expr SEMI))) (RULE imprimir (BLOCK (ALT 'MostrarMensaje(' expr ')' SEMI))) (RULE condition_if (BLOCK (ALT IF '(' condicion ')' '{' (* (BLOCK (ALT expresiones))) '}' (* (BLOCK (ALT ELSEIF '(' condicion ')' '{' (* (BLOCK (ALT expresiones))) '}'))) (? (BLOCK (ALT ELSE '{' (* (BLOCK (ALT expresiones))) '}')))))) (RULE condicion (BLOCK (ALT expr (= op (SET MAYORQUE MENORQUE MAYORIGUAL MENORIGUAL DOBLEIGUAL NEGACION)) expr) (ALT VERDADERO))) (RULE tipo (BLOCK (ALT (SET 'margit' 'radahn' 'godrick')))) (RULE expr (BLOCK (ALT expr (= op (SET '*' '/')) expr) (ALT expr (= op (SET '+' '-')) expr) (ALT INT) (ALT ID) (ALT STRING) (ALT '(' expr ')')))))
2024-03-20 17:04:53:523 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR CodeFileLexer (RULES (RULE T__0 (BLOCK (ALT '{'))) (RULE T__1 (BLOCK (ALT '}'))) (RULE T__2 (BLOCK (ALT '='))) (RULE T__3 (BLOCK (ALT 'MostrarMensaje('))) (RULE T__4 (BLOCK (ALT ')'))) (RULE T__5 (BLOCK (ALT '('))) (RULE T__6 (BLOCK (ALT 'margit'))) (RULE T__7 (BLOCK (ALT 'radahn'))) (RULE T__8 (BLOCK (ALT 'godrick'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSEIF (BLOCK (ALT 'else' 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE MAYORQUE (BLOCK (ALT '>'))) (RULE MENORQUE (BLOCK (ALT '<'))) (RULE MAYORIGUAL (BLOCK (ALT '>='))) (RULE MENORIGUAL (BLOCK (ALT '<='))) (RULE DOBLEIGUAL (BLOCK (ALT '=='))) (RULE NEGACION (BLOCK (ALT '!='))) (RULE VERDADERO (BLOCK (ALT 'verdad'))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z])))))) (RULE SEMI (BLOCK (ALT ';'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-03-20 17:04:53:956 left-recursion LogManager.java:25 expr
    :   ( {} INT<tokenIndex=263>  
        | ID<tokenIndex=270>  
        | STRING<tokenIndex=277>  
        | '('<tokenIndex=284> expr<tokenIndex=286> ')'<tokenIndex=288>  
        )
        (
          {this.precpred(this._ctx, 6)}?<p=6> op=('*'<tokenIndex=229> | '/'<tokenIndex=233>) expr<tokenIndex=236,p=7>
                  | {this.precpred(this._ctx, 5)}?<p=5> op=('+'<tokenIndex=249> | '-'<tokenIndex=253>) expr<tokenIndex=256,p=6>
        )*
    ;
2024-03-20 17:04:53:971 grammar LogManager.java:25 added: (RULE expr (BLOCK (ALT (BLOCK (ALT {} (INT (ELEMENT_OPTIONS (= tokenIndex 263)))) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 270)))) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 277)))) (ALT ('(' (ELEMENT_OPTIONS (= tokenIndex 284))) (expr (ELEMENT_OPTIONS (= tokenIndex 286))) (')' (ELEMENT_OPTIONS (= tokenIndex 288))))) (* (BLOCK (ALT ({this.precpred(this._ctx, 6)}? (ELEMENT_OPTIONS (= p 6))) (= op (SET ('*' (ELEMENT_OPTIONS (= tokenIndex 229))) ('/' (ELEMENT_OPTIONS (= tokenIndex 233))))) (expr (ELEMENT_OPTIONS (= tokenIndex 236) (= p 7)))) (ALT ({this.precpred(this._ctx, 5)}? (ELEMENT_OPTIONS (= p 5))) (= op (SET ('+' (ELEMENT_OPTIONS (= tokenIndex 249))) ('-' (ELEMENT_OPTIONS (= tokenIndex 253))))) (expr (ELEMENT_OPTIONS (= tokenIndex 256) (= p 6)))))))))
2024-03-20 17:04:53:983 semantics LogManager.java:25 tokens={EOF=-1, T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, IF=10, ELSEIF=11, ELSE=12, STRING=13, MAYORQUE=14, MENORQUE=15, MAYORIGUAL=16, MENORIGUAL=17, DOBLEIGUAL=18, NEGACION=19, VERDADERO=20, INSERT=21, INT=22, CODE=23, ID=24, SEMI=25, MUL=26, DIV=27, ADD=28, SUB=29, WS=30}
2024-03-20 17:04:53:983 semantics LogManager.java:25 strings={'{'=1, '}'=2, '='=3, 'MostrarMensaje('=4, ')'=5, '('=6, 'margit'=7, 'radahn'=8, 'godrick'=9, 'if'=10, 'else'=12, '>'=14, '<'=15, '>='=16, '<='=17, '=='=18, '!='=19, 'verdad'=20, 'iniciar'=21, 'codigo'=23, ';'=25, '*'=26, '/'=27, '+'=28, '-'=29}
2024-03-20 17:04:54:013 LL1 LogManager.java:25 
DECISION 0 in rule content
2024-03-20 17:04:54:021 LL1 LogManager.java:25 look=[{4, 7..10, 24}, 2]
2024-03-20 17:04:54:021 LL1 LogManager.java:25 LL(1)? true
2024-03-20 17:04:54:021 LL1 LogManager.java:25 
DECISION 1 in rule expresiones
2024-03-20 17:04:54:021 LL1 LogManager.java:25 look=[{7..9}, 24, 4, 10]
2024-03-20 17:04:54:021 LL1 LogManager.java:25 LL(1)? true
2024-03-20 17:04:54:021 LL1 LogManager.java:25 
DECISION 2 in rule declaraciones
2024-03-20 17:04:54:021 LL1 LogManager.java:25 look=[{7..9}, {7..9}]
2024-03-20 17:04:54:021 LL1 LogManager.java:25 LL(1)? false
2024-03-20 17:04:54:021 LL1 LogManager.java:25 
DECISION 3 in rule condition_if
2024-03-20 17:04:54:021 LL1 LogManager.java:25 look=[{4, 7..10, 24}, 2]
2024-03-20 17:04:54:021 LL1 LogManager.java:25 LL(1)? true
2024-03-20 17:04:54:021 LL1 LogManager.java:25 
DECISION 4 in rule condition_if
2024-03-20 17:04:54:021 LL1 LogManager.java:25 look=[{4, 7..10, 24}, 2]
2024-03-20 17:04:54:021 LL1 LogManager.java:25 LL(1)? true
2024-03-20 17:04:54:021 LL1 LogManager.java:25 
DECISION 5 in rule condition_if
2024-03-20 17:04:54:021 LL1 LogManager.java:25 look=[11, {2, 4, 7..10, 12, 24}]
2024-03-20 17:04:54:025 LL1 LogManager.java:25 LL(1)? true
2024-03-20 17:04:54:025 LL1 LogManager.java:25 
DECISION 6 in rule condition_if
2024-03-20 17:04:54:025 LL1 LogManager.java:25 look=[{4, 7..10, 24}, 2]
2024-03-20 17:04:54:025 LL1 LogManager.java:25 LL(1)? true
2024-03-20 17:04:54:025 LL1 LogManager.java:25 
DECISION 7 in rule condition_if
2024-03-20 17:04:54:025 LL1 LogManager.java:25 look=[12, {2, 4, 7..10, 24}]
2024-03-20 17:04:54:025 LL1 LogManager.java:25 LL(1)? true
2024-03-20 17:04:54:025 LL1 LogManager.java:25 
DECISION 8 in rule condicion
2024-03-20 17:04:54:025 LL1 LogManager.java:25 look=[{6, 13, 22, 24}, 20]
2024-03-20 17:04:54:025 LL1 LogManager.java:25 LL(1)? true
2024-03-20 17:04:54:025 LL1 LogManager.java:25 
DECISION 9 in rule expr
2024-03-20 17:04:54:025 LL1 LogManager.java:25 look=[22, 24, 13, 6]
2024-03-20 17:04:54:025 LL1 LogManager.java:25 LL(1)? true
2024-03-20 17:04:54:025 LL1 LogManager.java:25 
DECISION 10 in rule expr
2024-03-20 17:04:54:025 LL1 LogManager.java:25 look=[null, null]
2024-03-20 17:04:54:025 LL1 LogManager.java:25 LL(1)? false
2024-03-20 17:04:54:025 LL1 LogManager.java:25 
DECISION 11 in rule expr
2024-03-20 17:04:54:029 LL1 LogManager.java:25 look=[null, null]
2024-03-20 17:04:54:029 LL1 LogManager.java:25 LL(1)? false
2024-03-20 17:04:54:101 action-translator LogManager.java:25 translate 
2024-03-20 17:04:54:109 action-translator LogManager.java:25 translate this.precpred(this._ctx, 6)
2024-03-20 17:04:54:109 action-translator LogManager.java:25 translate this.precpred(this._ctx, 5)
2024-03-20 17:04:54:109 action-translator LogManager.java:25 translate this.precpred(this._ctx, 6)
2024-03-20 17:04:54:109 action-translator LogManager.java:25 translate this.precpred(this._ctx, 5)
