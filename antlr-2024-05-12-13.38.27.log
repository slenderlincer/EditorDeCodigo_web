2024-05-12 13:38:26:678 grammar LogManager.java:25 load lexerRulesCV from ./grammar/CodeFile.g4
2024-05-12 13:38:26:684 grammar LogManager.java:25 before: (COMBINED_GRAMMAR CodeFile (import lexerRulesCV) (RULES (RULE start (BLOCK (ALT INSERT CODE ALLAVE content CLLAVE))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT assignament) (ALT imprimir) (ALT ordencondicional) (ALT while))) (RULE declaraciones (BLOCK (ALT tipo ID SEMI (? (BLOCK (ALT expr))) SEMI))) (RULE assignament (BLOCK (ALT ID EQUALS expr SEMI) (ALT ID (= com (BLOCK (ALT '+=') (ALT '-=') (ALT '*=') (ALT '/='))) (? (BLOCK (ALT expr))) SEMI) (ALT ID (= com (BLOCK (ALT '--') (ALT '++'))) (? (BLOCK (ALT expr))) SEMI))) (RULE imprimir (BLOCK (ALT PRINT APARENTESIS expr CPARENTESIS SEMI))) (RULE tipo (BLOCK (ALT (BLOCK (ALT 'margit') (ALT 'radahn') (ALT 'godrick'))))) (RULE expr (BLOCK (ALT APARENTESIS expr CPARENTESIS) (ALT expr (= op (BLOCK (ALT '*') (ALT '/'))) expr) (ALT expr (= op (BLOCK (ALT '+') (ALT '-'))) expr) (ALT expr COMA expr) (ALT expr RES expr) (ALT NEGAN expr) (ALT (= op (BLOCK (ALT '+') (ALT '-'))) expr) (ALT (= operator (BLOCK (ALT '<') (ALT '>') (ALT '<=') (ALT '>=')))) (ALT (= operator (BLOCK (ALT '==') (ALT '!=') (ALT '&&') (ALT '||') (ALT 'true') (ALT 'false') (ALT '!true') (ALT '!false')))) (ALT expr (= operator (BLOCK (ALT '<') (ALT '>') (ALT '<=') (ALT '>='))) expr) (ALT expr (= operator (BLOCK (ALT '==') (ALT '!=') (ALT '&&') (ALT '||') (ALT 'true') (ALT 'false') (ALT '!true') (ALT '!false'))) expr) (ALT INT) (ALT ID) (ALT STRING) (ALT FLOAT) (ALT CHAR))) (RULE ordencondicional (BLOCK (ALT condicional (* (BLOCK (ALT condicional_elseif))) (? (BLOCK (ALT condicional_else)))))) (RULE condicional (BLOCK (ALT IF APARENTESIS expr CPARENTESIS ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE condicional_elseif (BLOCK (ALT ELSE condicional))) (RULE condicional_else (BLOCK (ALT ELSE ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE while (BLOCK (ALT WHILE APARENTESIS (BLOCK (ALT expr)) CPARENTESIS ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE RES (BLOCK (ALT '%'))) (RULE COMA (BLOCK (ALT ','))) (RULE NEGAN (BLOCK (ALT '!')))))
2024-05-12 13:38:26:691 grammar LogManager.java:25 imported actions: []
2024-05-12 13:38:26:691 grammar LogManager.java:25 imported rule: (RULE APARENTESIS (BLOCK (ALT '(')))
2024-05-12 13:38:26:691 grammar LogManager.java:25 imported rule: (RULE CPARENTESIS (BLOCK (ALT ')')))
2024-05-12 13:38:26:691 grammar LogManager.java:25 imported rule: (RULE ALLAVE (BLOCK (ALT '{')))
2024-05-12 13:38:26:691 grammar LogManager.java:25 imported rule: (RULE CLLAVE (BLOCK (ALT '}')))
2024-05-12 13:38:26:691 grammar LogManager.java:25 imported rule: (RULE EQUALS (BLOCK (ALT '=')))
2024-05-12 13:38:26:691 grammar LogManager.java:25 imported rule: (RULE MUL (BLOCK (ALT '*')))
2024-05-12 13:38:26:691 grammar LogManager.java:25 imported rule: (RULE DIV (BLOCK (ALT '/')))
2024-05-12 13:38:26:691 grammar LogManager.java:25 imported rule: (RULE ADD (BLOCK (ALT '+')))
2024-05-12 13:38:26:691 grammar LogManager.java:25 imported rule: (RULE SUB (BLOCK (ALT '-')))
2024-05-12 13:38:26:691 grammar LogManager.java:25 imported rule: (RULE PRINT (BLOCK (ALT 'MostrarMensaje')))
2024-05-12 13:38:26:691 grammar LogManager.java:25 imported rule: (RULE IF (BLOCK (ALT 'if')))
2024-05-12 13:38:26:691 grammar LogManager.java:25 imported rule: (RULE ELSE (BLOCK (ALT 'else')))
2024-05-12 13:38:26:691 grammar LogManager.java:25 imported rule: (RULE WHILE (BLOCK (ALT 'while')))
2024-05-12 13:38:26:691 grammar LogManager.java:25 imported rule: (RULE COND_MAT (BLOCK (ALT (BLOCK (ALT '<') (ALT '>') (ALT '<=') (ALT '>=')))))
2024-05-12 13:38:26:691 grammar LogManager.java:25 imported rule: (RULE COND_LOG (BLOCK (ALT (BLOCK (ALT '==') (ALT '!=') (ALT 'true') (ALT 'false') (ALT '&&') (ALT '||') (ALT '!true') (ALT '!false')))))
2024-05-12 13:38:26:691 grammar LogManager.java:25 imported rule: (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"')))
2024-05-12 13:38:26:691 grammar LogManager.java:25 imported rule: (RULE INT (BLOCK (ALT (? (BLOCK (ALT '-'))) (+ (BLOCK (ALT [0-9]))))))
2024-05-12 13:38:26:691 grammar LogManager.java:25 imported rule: (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z]))) (* (BLOCK (ALT [_a-zA-Z0-9]))))))
2024-05-12 13:38:26:691 grammar LogManager.java:25 imported rule: (RULE FLOAT (BLOCK (ALT (? (BLOCK (ALT '-'))) (+ (BLOCK (ALT [0-9]))) [.] (+ (BLOCK (ALT [0-9]))))))
2024-05-12 13:38:26:691 grammar LogManager.java:25 imported rule: (RULE CHAR (BLOCK (ALT '"' (? (BLOCK (ALT [a-zA-Z]))) '"')))
2024-05-12 13:38:26:691 grammar LogManager.java:25 imported rule: (RULE SEMI (BLOCK (ALT ';')))
2024-05-12 13:38:26:691 grammar LogManager.java:25 imported rule: (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))
2024-05-12 13:38:26:695 grammar LogManager.java:25 Grammar: (COMBINED_GRAMMAR CodeFile (import lexerRulesCV) (RULES (RULE start (BLOCK (ALT INSERT CODE ALLAVE content CLLAVE))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT assignament) (ALT imprimir) (ALT ordencondicional) (ALT while))) (RULE declaraciones (BLOCK (ALT tipo ID SEMI (? (BLOCK (ALT expr))) SEMI))) (RULE assignament (BLOCK (ALT ID EQUALS expr SEMI) (ALT ID (= com (BLOCK (ALT '+=') (ALT '-=') (ALT '*=') (ALT '/='))) (? (BLOCK (ALT expr))) SEMI) (ALT ID (= com (BLOCK (ALT '--') (ALT '++'))) (? (BLOCK (ALT expr))) SEMI))) (RULE imprimir (BLOCK (ALT PRINT APARENTESIS expr CPARENTESIS SEMI))) (RULE tipo (BLOCK (ALT (BLOCK (ALT 'margit') (ALT 'radahn') (ALT 'godrick'))))) (RULE expr (BLOCK (ALT APARENTESIS expr CPARENTESIS) (ALT expr (= op (BLOCK (ALT '*') (ALT '/'))) expr) (ALT expr (= op (BLOCK (ALT '+') (ALT '-'))) expr) (ALT expr COMA expr) (ALT expr RES expr) (ALT NEGAN expr) (ALT (= op (BLOCK (ALT '+') (ALT '-'))) expr) (ALT (= operator (BLOCK (ALT '<') (ALT '>') (ALT '<=') (ALT '>=')))) (ALT (= operator (BLOCK (ALT '==') (ALT '!=') (ALT '&&') (ALT '||') (ALT 'true') (ALT 'false') (ALT '!true') (ALT '!false')))) (ALT expr (= operator (BLOCK (ALT '<') (ALT '>') (ALT '<=') (ALT '>='))) expr) (ALT expr (= operator (BLOCK (ALT '==') (ALT '!=') (ALT '&&') (ALT '||') (ALT 'true') (ALT 'false') (ALT '!true') (ALT '!false'))) expr) (ALT INT) (ALT ID) (ALT STRING) (ALT FLOAT) (ALT CHAR))) (RULE ordencondicional (BLOCK (ALT condicional (* (BLOCK (ALT condicional_elseif))) (? (BLOCK (ALT condicional_else)))))) (RULE condicional (BLOCK (ALT IF APARENTESIS expr CPARENTESIS ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE condicional_elseif (BLOCK (ALT ELSE condicional))) (RULE condicional_else (BLOCK (ALT ELSE ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE while (BLOCK (ALT WHILE APARENTESIS (BLOCK (ALT expr)) CPARENTESIS ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE RES (BLOCK (ALT '%'))) (RULE COMA (BLOCK (ALT ','))) (RULE NEGAN (BLOCK (ALT '!'))) (RULE APARENTESIS (BLOCK (ALT '('))) (RULE CPARENTESIS (BLOCK (ALT ')'))) (RULE ALLAVE (BLOCK (ALT '{'))) (RULE CLLAVE (BLOCK (ALT '}'))) (RULE EQUALS (BLOCK (ALT '='))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PRINT (BLOCK (ALT 'MostrarMensaje'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE COND_MAT (BLOCK (ALT (BLOCK (ALT '<') (ALT '>') (ALT '<=') (ALT '>='))))) (RULE COND_LOG (BLOCK (ALT (BLOCK (ALT '==') (ALT '!=') (ALT 'true') (ALT 'false') (ALT '&&') (ALT '||') (ALT '!true') (ALT '!false'))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE INT (BLOCK (ALT (? (BLOCK (ALT '-'))) (+ (BLOCK (ALT [0-9])))))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z]))) (* (BLOCK (ALT [_a-zA-Z0-9])))))) (RULE FLOAT (BLOCK (ALT (? (BLOCK (ALT '-'))) (+ (BLOCK (ALT [0-9]))) [.] (+ (BLOCK (ALT [0-9])))))) (RULE CHAR (BLOCK (ALT '"' (? (BLOCK (ALT [a-zA-Z]))) '"'))) (RULE SEMI (BLOCK (ALT ';'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-05-12 13:38:26:716 grammar LogManager.java:25 after: (COMBINED_GRAMMAR CodeFile (import lexerRulesCV) (RULES (RULE start (BLOCK (ALT INSERT CODE ALLAVE content CLLAVE))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT assignament) (ALT imprimir) (ALT ordencondicional) (ALT while))) (RULE declaraciones (BLOCK (ALT tipo ID SEMI (? (BLOCK (ALT expr))) SEMI))) (RULE assignament (BLOCK (ALT ID EQUALS expr SEMI) (ALT ID (= com (SET '+=' '-=' '*=' '/=')) (? (BLOCK (ALT expr))) SEMI) (ALT ID (= com (SET '--' '++')) (? (BLOCK (ALT expr))) SEMI))) (RULE imprimir (BLOCK (ALT PRINT APARENTESIS expr CPARENTESIS SEMI))) (RULE tipo (BLOCK (ALT (SET 'margit' 'radahn' 'godrick')))) (RULE expr (BLOCK (ALT APARENTESIS expr CPARENTESIS) (ALT expr (= op (SET '*' '/')) expr) (ALT expr (= op (SET '+' '-')) expr) (ALT expr COMA expr) (ALT expr RES expr) (ALT NEGAN expr) (ALT (= op (SET '+' '-')) expr) (ALT (= operator (SET '<' '>' '<=' '>='))) (ALT (= operator (SET '==' '!=' '&&' '||' 'true' 'false' '!true' '!false'))) (ALT expr (= operator (SET '<' '>' '<=' '>=')) expr) (ALT expr (= operator (SET '==' '!=' '&&' '||' 'true' 'false' '!true' '!false')) expr) (ALT INT) (ALT ID) (ALT STRING) (ALT FLOAT) (ALT CHAR))) (RULE ordencondicional (BLOCK (ALT condicional (* (BLOCK (ALT condicional_elseif))) (? (BLOCK (ALT condicional_else)))))) (RULE condicional (BLOCK (ALT IF APARENTESIS expr CPARENTESIS ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE condicional_elseif (BLOCK (ALT ELSE condicional))) (RULE condicional_else (BLOCK (ALT ELSE ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE while (BLOCK (ALT WHILE APARENTESIS (BLOCK (ALT expr)) CPARENTESIS ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE RES (BLOCK (ALT '%'))) (RULE COMA (BLOCK (ALT ','))) (RULE NEGAN (BLOCK (ALT '!'))) (RULE APARENTESIS (BLOCK (ALT '('))) (RULE CPARENTESIS (BLOCK (ALT ')'))) (RULE ALLAVE (BLOCK (ALT '{'))) (RULE CLLAVE (BLOCK (ALT '}'))) (RULE EQUALS (BLOCK (ALT '='))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PRINT (BLOCK (ALT 'MostrarMensaje'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE COND_MAT (BLOCK (ALT (BLOCK (ALT '<') (ALT '>') (ALT '<=') (ALT '>='))))) (RULE COND_LOG (BLOCK (ALT (BLOCK (ALT '==') (ALT '!=') (ALT 'true') (ALT 'false') (ALT '&&') (ALT '||') (ALT '!true') (ALT '!false'))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE INT (BLOCK (ALT (? (BLOCK (ALT '-'))) (+ (BLOCK (ALT [0-9])))))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z]))) (* (BLOCK (ALT [_a-zA-Z0-9])))))) (RULE FLOAT (BLOCK (ALT (? (BLOCK (ALT '-'))) (+ (BLOCK (ALT [0-9]))) [.] (+ (BLOCK (ALT [0-9])))))) (RULE CHAR (BLOCK (ALT '"' (? (BLOCK (ALT [a-zA-Z]))) '"'))) (RULE SEMI (BLOCK (ALT ';'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-05-12 13:38:26:749 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR CodeFile (import lexerRulesCV) (RULES (RULE start (BLOCK (ALT INSERT CODE ALLAVE content CLLAVE))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT assignament) (ALT imprimir) (ALT ordencondicional) (ALT while))) (RULE declaraciones (BLOCK (ALT tipo ID SEMI (? (BLOCK (ALT expr))) SEMI))) (RULE assignament (BLOCK (ALT ID EQUALS expr SEMI) (ALT ID (= com (SET '+=' '-=' '*=' '/=')) (? (BLOCK (ALT expr))) SEMI) (ALT ID (= com (SET '--' '++')) (? (BLOCK (ALT expr))) SEMI))) (RULE imprimir (BLOCK (ALT PRINT APARENTESIS expr CPARENTESIS SEMI))) (RULE tipo (BLOCK (ALT (SET 'margit' 'radahn' 'godrick')))) (RULE expr (BLOCK (ALT APARENTESIS expr CPARENTESIS) (ALT expr (= op (SET '*' '/')) expr) (ALT expr (= op (SET '+' '-')) expr) (ALT expr COMA expr) (ALT expr RES expr) (ALT NEGAN expr) (ALT (= op (SET '+' '-')) expr) (ALT (= operator (SET '<' '>' '<=' '>='))) (ALT (= operator (SET '==' '!=' '&&' '||' 'true' 'false' '!true' '!false'))) (ALT expr (= operator (SET '<' '>' '<=' '>=')) expr) (ALT expr (= operator (SET '==' '!=' '&&' '||' 'true' 'false' '!true' '!false')) expr) (ALT INT) (ALT ID) (ALT STRING) (ALT FLOAT) (ALT CHAR))) (RULE ordencondicional (BLOCK (ALT condicional (* (BLOCK (ALT condicional_elseif))) (? (BLOCK (ALT condicional_else)))))) (RULE condicional (BLOCK (ALT IF APARENTESIS expr CPARENTESIS ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE condicional_elseif (BLOCK (ALT ELSE condicional))) (RULE condicional_else (BLOCK (ALT ELSE ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE while (BLOCK (ALT WHILE APARENTESIS (BLOCK (ALT expr)) CPARENTESIS ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE)))))
2024-05-12 13:38:26:750 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR CodeFileLexer (RULES (RULE T__0 (BLOCK (ALT '+='))) (RULE T__1 (BLOCK (ALT '-='))) (RULE T__2 (BLOCK (ALT '*='))) (RULE T__3 (BLOCK (ALT '/='))) (RULE T__4 (BLOCK (ALT '--'))) (RULE T__5 (BLOCK (ALT '++'))) (RULE T__6 (BLOCK (ALT 'margit'))) (RULE T__7 (BLOCK (ALT 'radahn'))) (RULE T__8 (BLOCK (ALT 'godrick'))) (RULE T__9 (BLOCK (ALT '<'))) (RULE T__10 (BLOCK (ALT '>'))) (RULE T__11 (BLOCK (ALT '<='))) (RULE T__12 (BLOCK (ALT '>='))) (RULE T__13 (BLOCK (ALT '=='))) (RULE T__14 (BLOCK (ALT '!='))) (RULE T__15 (BLOCK (ALT '&&'))) (RULE T__16 (BLOCK (ALT '||'))) (RULE T__17 (BLOCK (ALT 'true'))) (RULE T__18 (BLOCK (ALT 'false'))) (RULE T__19 (BLOCK (ALT '!true'))) (RULE T__20 (BLOCK (ALT '!false'))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE RES (BLOCK (ALT '%'))) (RULE COMA (BLOCK (ALT ','))) (RULE NEGAN (BLOCK (ALT '!'))) (RULE APARENTESIS (BLOCK (ALT '('))) (RULE CPARENTESIS (BLOCK (ALT ')'))) (RULE ALLAVE (BLOCK (ALT '{'))) (RULE CLLAVE (BLOCK (ALT '}'))) (RULE EQUALS (BLOCK (ALT '='))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PRINT (BLOCK (ALT 'MostrarMensaje'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE COND_MAT (BLOCK (ALT (BLOCK (ALT '<') (ALT '>') (ALT '<=') (ALT '>='))))) (RULE COND_LOG (BLOCK (ALT (BLOCK (ALT '==') (ALT '!=') (ALT 'true') (ALT 'false') (ALT '&&') (ALT '||') (ALT '!true') (ALT '!false'))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE INT (BLOCK (ALT (? (BLOCK (ALT '-'))) (+ (BLOCK (ALT [0-9])))))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z]))) (* (BLOCK (ALT [_a-zA-Z0-9])))))) (RULE FLOAT (BLOCK (ALT (? (BLOCK (ALT '-'))) (+ (BLOCK (ALT [0-9]))) [.] (+ (BLOCK (ALT [0-9])))))) (RULE CHAR (BLOCK (ALT '"' (? (BLOCK (ALT [a-zA-Z]))) '"'))) (RULE SEMI (BLOCK (ALT ';'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-05-12 13:38:27:100 left-recursion LogManager.java:25 expr
    :   ( {} APARENTESIS<tokenIndex=182> expr<tokenIndex=184> CPARENTESIS<tokenIndex=186>  
        | NEGAN<tokenIndex=254> expr<tokenIndex=256,p=11> 
        | op=('+'<tokenIndex=266>|'-'<tokenIndex=268>) expr<tokenIndex=271,p=10> 
        | operator=('<'<tokenIndex=281>|'>'<tokenIndex=283>|'<='<tokenIndex=285>|'>='<tokenIndex=287>)  
        | operator=('=='<tokenIndex=298>|'!='<tokenIndex=300>|'&&'<tokenIndex=302>|'||'<tokenIndex=304>|'true'<tokenIndex=306>|'false'<tokenIndex=308>| '!true'<tokenIndex=311>|'!false'<tokenIndex=313>)   
        | INT<tokenIndex=372>  
        | ID<tokenIndex=379>  
        | STRING<tokenIndex=386>  
        | FLOAT<tokenIndex=393>  
        | CHAR<tokenIndex=400>  
        )
        (
          {this.precpred(this._ctx, 15)}?<p=15> op=('*'<tokenIndex=198> | '/'<tokenIndex=202>) expr<tokenIndex=205,p=16>
                  | {this.precpred(this._ctx, 14)}?<p=14> op=('+'<tokenIndex=218> | '-'<tokenIndex=222>) expr<tokenIndex=225,p=15>
                  | {this.precpred(this._ctx, 13)}?<p=13> COMA<tokenIndex=234> expr<tokenIndex=236,p=14>
                  | {this.precpred(this._ctx, 12)}?<p=12> RES<tokenIndex=245> expr<tokenIndex=247,p=13>
                  | {this.precpred(this._ctx, 7)}?<p=7> operator=('<'<tokenIndex=326>|'>'<tokenIndex=328>|'<='<tokenIndex=330>|'>='<tokenIndex=332>) expr<tokenIndex=335,p=8>
                  | {this.precpred(this._ctx, 6)}?<p=6> operator=('=='<tokenIndex=347>|'!='<tokenIndex=349>|'&&'<tokenIndex=351>|'||'<tokenIndex=353>|'true'<tokenIndex=355>|'false'<tokenIndex=357>| '!true'<tokenIndex=360>|'!false'<tokenIndex=362>) expr<tokenIndex=365,p=7>
        )*
    ;
2024-05-12 13:38:27:124 grammar LogManager.java:25 added: (RULE expr (BLOCK (ALT (BLOCK (ALT {} (APARENTESIS (ELEMENT_OPTIONS (= tokenIndex 182))) (expr (ELEMENT_OPTIONS (= tokenIndex 184))) (CPARENTESIS (ELEMENT_OPTIONS (= tokenIndex 186)))) (ALT (NEGAN (ELEMENT_OPTIONS (= tokenIndex 254))) (expr (ELEMENT_OPTIONS (= tokenIndex 256) (= p 11)))) (ALT (= op (SET ('+' (ELEMENT_OPTIONS (= tokenIndex 266))) ('-' (ELEMENT_OPTIONS (= tokenIndex 268))))) (expr (ELEMENT_OPTIONS (= tokenIndex 271) (= p 10)))) (ALT (= operator (SET ('<' (ELEMENT_OPTIONS (= tokenIndex 281))) ('>' (ELEMENT_OPTIONS (= tokenIndex 283))) ('<=' (ELEMENT_OPTIONS (= tokenIndex 285))) ('>=' (ELEMENT_OPTIONS (= tokenIndex 287)))))) (ALT (= operator (SET ('==' (ELEMENT_OPTIONS (= tokenIndex 298))) ('!=' (ELEMENT_OPTIONS (= tokenIndex 300))) ('&&' (ELEMENT_OPTIONS (= tokenIndex 302))) ('||' (ELEMENT_OPTIONS (= tokenIndex 304))) ('true' (ELEMENT_OPTIONS (= tokenIndex 306))) ('false' (ELEMENT_OPTIONS (= tokenIndex 308))) ('!true' (ELEMENT_OPTIONS (= tokenIndex 311))) ('!false' (ELEMENT_OPTIONS (= tokenIndex 313)))))) (ALT (INT (ELEMENT_OPTIONS (= tokenIndex 372)))) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 379)))) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 386)))) (ALT (FLOAT (ELEMENT_OPTIONS (= tokenIndex 393)))) (ALT (CHAR (ELEMENT_OPTIONS (= tokenIndex 400))))) (* (BLOCK (ALT ({this.precpred(this._ctx, 15)}? (ELEMENT_OPTIONS (= p 15))) (= op (SET ('*' (ELEMENT_OPTIONS (= tokenIndex 198))) ('/' (ELEMENT_OPTIONS (= tokenIndex 202))))) (expr (ELEMENT_OPTIONS (= tokenIndex 205) (= p 16)))) (ALT ({this.precpred(this._ctx, 14)}? (ELEMENT_OPTIONS (= p 14))) (= op (SET ('+' (ELEMENT_OPTIONS (= tokenIndex 218))) ('-' (ELEMENT_OPTIONS (= tokenIndex 222))))) (expr (ELEMENT_OPTIONS (= tokenIndex 225) (= p 15)))) (ALT ({this.precpred(this._ctx, 13)}? (ELEMENT_OPTIONS (= p 13))) (COMA (ELEMENT_OPTIONS (= tokenIndex 234))) (expr (ELEMENT_OPTIONS (= tokenIndex 236) (= p 14)))) (ALT ({this.precpred(this._ctx, 12)}? (ELEMENT_OPTIONS (= p 12))) (RES (ELEMENT_OPTIONS (= tokenIndex 245))) (expr (ELEMENT_OPTIONS (= tokenIndex 247) (= p 13)))) (ALT ({this.precpred(this._ctx, 7)}? (ELEMENT_OPTIONS (= p 7))) (= operator (SET ('<' (ELEMENT_OPTIONS (= tokenIndex 326))) ('>' (ELEMENT_OPTIONS (= tokenIndex 328))) ('<=' (ELEMENT_OPTIONS (= tokenIndex 330))) ('>=' (ELEMENT_OPTIONS (= tokenIndex 332))))) (expr (ELEMENT_OPTIONS (= tokenIndex 335) (= p 8)))) (ALT ({this.precpred(this._ctx, 6)}? (ELEMENT_OPTIONS (= p 6))) (= operator (SET ('==' (ELEMENT_OPTIONS (= tokenIndex 347))) ('!=' (ELEMENT_OPTIONS (= tokenIndex 349))) ('&&' (ELEMENT_OPTIONS (= tokenIndex 351))) ('||' (ELEMENT_OPTIONS (= tokenIndex 353))) ('true' (ELEMENT_OPTIONS (= tokenIndex 355))) ('false' (ELEMENT_OPTIONS (= tokenIndex 357))) ('!true' (ELEMENT_OPTIONS (= tokenIndex 360))) ('!false' (ELEMENT_OPTIONS (= tokenIndex 362))))) (expr (ELEMENT_OPTIONS (= tokenIndex 365) (= p 7)))))))))
2024-05-12 13:38:27:129 semantics LogManager.java:25 tokens={EOF=-1, T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, T__17=18, T__18=19, T__19=20, T__20=21, INSERT=22, CODE=23, RES=24, COMA=25, NEGAN=26, APARENTESIS=27, CPARENTESIS=28, ALLAVE=29, CLLAVE=30, EQUALS=31, MUL=32, DIV=33, ADD=34, SUB=35, PRINT=36, IF=37, ELSE=38, WHILE=39, COND_MAT=40, COND_LOG=41, STRING=42, INT=43, ID=44, FLOAT=45, CHAR=46, SEMI=47, WS=48}
2024-05-12 13:38:27:129 semantics LogManager.java:25 strings={'+='=1, '-='=2, '*='=3, '/='=4, '--'=5, '++'=6, 'margit'=7, 'radahn'=8, 'godrick'=9, '<'=10, '>'=11, '<='=12, '>='=13, '=='=14, '!='=15, '&&'=16, '||'=17, 'true'=18, 'false'=19, '!true'=20, '!false'=21, 'iniciar'=22, 'codigo'=23, '%'=24, ','=25, '!'=26, '('=27, ')'=28, '{'=29, '}'=30, '='=31, '*'=32, '/'=33, '+'=34, '-'=35, 'MostrarMensaje'=36, 'if'=37, 'else'=38, 'while'=39, ';'=47}
2024-05-12 13:38:27:144 LL1 LogManager.java:25 
DECISION 0 in rule content
2024-05-12 13:38:27:144 LL1 LogManager.java:25 LL(1)? false
2024-05-12 13:38:27:144 LL1 LogManager.java:25 
DECISION 1 in rule expresiones
2024-05-12 13:38:27:144 LL1 LogManager.java:25 look=[{7..9}, 44, 36, 37, 39]
2024-05-12 13:38:27:144 LL1 LogManager.java:25 LL(1)? true
2024-05-12 13:38:27:144 LL1 LogManager.java:25 
DECISION 2 in rule declaraciones
2024-05-12 13:38:27:144 LL1 LogManager.java:25 look=[{10..21, 26..27, 34..35, 42..46}, 47]
2024-05-12 13:38:27:144 LL1 LogManager.java:25 LL(1)? true
2024-05-12 13:38:27:144 LL1 LogManager.java:25 
DECISION 3 in rule assignament
2024-05-12 13:38:27:144 LL1 LogManager.java:25 look=[{10..21, 26..27, 34..35, 42..46}, 47]
2024-05-12 13:38:27:144 LL1 LogManager.java:25 LL(1)? true
2024-05-12 13:38:27:144 LL1 LogManager.java:25 
DECISION 4 in rule assignament
2024-05-12 13:38:27:147 LL1 LogManager.java:25 look=[{10..21, 26..27, 34..35, 42..46}, 47]
2024-05-12 13:38:27:147 LL1 LogManager.java:25 LL(1)? true
2024-05-12 13:38:27:147 LL1 LogManager.java:25 
DECISION 5 in rule assignament
2024-05-12 13:38:27:147 LL1 LogManager.java:25 look=[44, 44, 44]
2024-05-12 13:38:27:147 LL1 LogManager.java:25 LL(1)? false
2024-05-12 13:38:27:147 LL1 LogManager.java:25 
DECISION 6 in rule expr
2024-05-12 13:38:27:147 LL1 LogManager.java:25 look=[27, 26, {34..35}, {10..13}, {14..21}, 43, 44, 42, 45, 46]
2024-05-12 13:38:27:147 LL1 LogManager.java:25 LL(1)? true
2024-05-12 13:38:27:147 LL1 LogManager.java:25 
DECISION 7 in rule expr
2024-05-12 13:38:27:147 LL1 LogManager.java:25 look=[null, null, null, null, null, null]
2024-05-12 13:38:27:147 LL1 LogManager.java:25 LL(1)? false
2024-05-12 13:38:27:147 LL1 LogManager.java:25 
DECISION 8 in rule expr
2024-05-12 13:38:27:147 LL1 LogManager.java:25 look=[null, null]
2024-05-12 13:38:27:147 LL1 LogManager.java:25 LL(1)? false
2024-05-12 13:38:27:147 LL1 LogManager.java:25 
DECISION 9 in rule ordencondicional
2024-05-12 13:38:27:147 LL1 LogManager.java:25 look=[38, {7..9, 30, 36..39, 44}]
2024-05-12 13:38:27:147 LL1 LogManager.java:25 LL(1)? false
2024-05-12 13:38:27:147 LL1 LogManager.java:25 
DECISION 10 in rule ordencondicional
2024-05-12 13:38:27:147 LL1 LogManager.java:25 look=[38, {7..9, 30, 36..37, 39, 44}]
2024-05-12 13:38:27:147 LL1 LogManager.java:25 LL(1)? true
2024-05-12 13:38:27:147 LL1 LogManager.java:25 
DECISION 11 in rule condicional
2024-05-12 13:38:27:147 LL1 LogManager.java:25 look=[{7..9, 36..37, 39, 44}, 30]
2024-05-12 13:38:27:147 LL1 LogManager.java:25 LL(1)? true
2024-05-12 13:38:27:147 LL1 LogManager.java:25 
DECISION 12 in rule condicional_else
2024-05-12 13:38:27:147 LL1 LogManager.java:25 look=[{7..9, 36..37, 39, 44}, 30]
2024-05-12 13:38:27:147 LL1 LogManager.java:25 LL(1)? true
2024-05-12 13:38:27:149 LL1 LogManager.java:25 
DECISION 13 in rule while
2024-05-12 13:38:27:149 LL1 LogManager.java:25 look=[{7..9, 36..37, 39, 44}, 30]
2024-05-12 13:38:27:149 LL1 LogManager.java:25 LL(1)? true
2024-05-12 13:38:27:190 action-translator LogManager.java:25 translate 
2024-05-12 13:38:27:190 action-translator LogManager.java:25 translate this.precpred(this._ctx, 15)
2024-05-12 13:38:27:190 action-translator LogManager.java:25 translate this.precpred(this._ctx, 14)
2024-05-12 13:38:27:196 action-translator LogManager.java:25 translate this.precpred(this._ctx, 13)
2024-05-12 13:38:27:196 action-translator LogManager.java:25 translate this.precpred(this._ctx, 12)
2024-05-12 13:38:27:198 action-translator LogManager.java:25 translate this.precpred(this._ctx, 7)
2024-05-12 13:38:27:198 action-translator LogManager.java:25 translate this.precpred(this._ctx, 6)
2024-05-12 13:38:27:198 action-translator LogManager.java:25 translate this.precpred(this._ctx, 15)
2024-05-12 13:38:27:198 action-translator LogManager.java:25 translate this.precpred(this._ctx, 14)
2024-05-12 13:38:27:198 action-translator LogManager.java:25 translate this.precpred(this._ctx, 13)
2024-05-12 13:38:27:198 action-translator LogManager.java:25 translate this.precpred(this._ctx, 12)
2024-05-12 13:38:27:198 action-translator LogManager.java:25 translate this.precpred(this._ctx, 7)
2024-05-12 13:38:27:198 action-translator LogManager.java:25 translate this.precpred(this._ctx, 6)
