2024-05-18 18:23:59:879 grammar LogManager.java:25 load lexerC from ./grammar/CodeC.g4
2024-05-18 18:23:59:893 grammar LogManager.java:25 before: (COMBINED_GRAMMAR CodeC (import lexerC) (RULES (RULE start (BLOCK (ALT INSERT CODE ALLAVE content CLLAVE))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT assignament) (ALT imprimir) (ALT ordencondicional) (ALT while))) (RULE declaraciones (BLOCK (ALT tipo ID SEMI) (ALT tipo ID EQUALS expr SEMI))) (RULE assignament (BLOCK (ALT ID EQUALS expr SEMI) (ALT ID (= com (BLOCK (ALT '+=') (ALT '-=') (ALT '*=') (ALT '/='))) (? (BLOCK (ALT expr))) SEMI) (ALT ID (= com (BLOCK (ALT '++') (ALT '--'))) (? (BLOCK (ALT expr))) SEMI))) (RULE imprimir (BLOCK (ALT PRINT APARENTESIS expr CPARENTESIS SEMI))) (RULE tipo (BLOCK (ALT (BLOCK (ALT 'int') (ALT 'float') (ALT 'char'))))) (RULE expr (BLOCK (ALT expr (= op (BLOCK (ALT '*') (ALT '/'))) expr) (ALT expr (= op (BLOCK (ALT '+') (ALT '-'))) expr) (ALT expr RES expr) (ALT expr COMA expr) (ALT (= operator (BLOCK (ALT COND_LOG) (ALT COND_MAT)))) (ALT expr (= operator (BLOCK (ALT COND_LOG) (ALT COND_MAT))) expr) (ALT INT) (ALT ID) (ALT STRING) (ALT FLOAT) (ALT CHAR) (ALT APARENTESIS expr CPARENTESIS))) (RULE ordencondicional (BLOCK (ALT condicional (* (BLOCK (ALT condicional_elseif))) (? (BLOCK (ALT condicional_else)))))) (RULE condicional (BLOCK (ALT IF APARENTESIS expr CPARENTESIS ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE condicional_elseif (BLOCK (ALT ELSE condicional))) (RULE condicional_else (BLOCK (ALT ELSE ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE while (BLOCK (ALT WHILE APARENTESIS (BLOCK (ALT assignament) (ALT expr)) CPARENTESIS ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE CHAR (BLOCK (ALT '[a-zA-Z]'))) (RULE INSERT (BLOCK (ALT 'void'))) (RULE CODE (BLOCK (ALT 'main()'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE RES (BLOCK (ALT '%'))) (RULE COMA (BLOCK (ALT ',')))))
2024-05-18 18:23:59:902 grammar LogManager.java:25 imported actions: []
2024-05-18 18:23:59:902 grammar LogManager.java:25 imported rule: (RULE APARENTESIS (BLOCK (ALT '(')))
2024-05-18 18:23:59:902 grammar LogManager.java:25 imported rule: (RULE CPARENTESIS (BLOCK (ALT ')')))
2024-05-18 18:23:59:902 grammar LogManager.java:25 imported rule: (RULE ALLAVE (BLOCK (ALT '{')))
2024-05-18 18:23:59:902 grammar LogManager.java:25 imported rule: (RULE CLLAVE (BLOCK (ALT '}')))
2024-05-18 18:23:59:902 grammar LogManager.java:25 imported rule: (RULE EQUALS (BLOCK (ALT '=')))
2024-05-18 18:23:59:902 grammar LogManager.java:25 imported rule: (RULE MUL (BLOCK (ALT '*')))
2024-05-18 18:23:59:902 grammar LogManager.java:25 imported rule: (RULE DIV (BLOCK (ALT '/')))
2024-05-18 18:23:59:902 grammar LogManager.java:25 imported rule: (RULE ADD (BLOCK (ALT '+')))
2024-05-18 18:23:59:902 grammar LogManager.java:25 imported rule: (RULE SUB (BLOCK (ALT '-')))
2024-05-18 18:23:59:902 grammar LogManager.java:25 imported rule: (RULE PRINT (BLOCK (ALT 'printf')))
2024-05-18 18:23:59:902 grammar LogManager.java:25 imported rule: (RULE IF (BLOCK (ALT 'if')))
2024-05-18 18:23:59:902 grammar LogManager.java:25 imported rule: (RULE ELSE (BLOCK (ALT 'else')))
2024-05-18 18:23:59:902 grammar LogManager.java:25 imported rule: (RULE WHILE (BLOCK (ALT 'while')))
2024-05-18 18:23:59:902 grammar LogManager.java:25 imported rule: (RULE COND_MAT (BLOCK (ALT (BLOCK (ALT '<') (ALT '>') (ALT '<=') (ALT '>=')))))
2024-05-18 18:23:59:902 grammar LogManager.java:25 imported rule: (RULE COND_LOG (BLOCK (ALT (BLOCK (ALT '==') (ALT '!=') (ALT 'true') (ALT 'false') (ALT '&&') (ALT '||') (ALT '!true') (ALT '!false')))))
2024-05-18 18:23:59:902 grammar LogManager.java:25 imported rule: (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"')))
2024-05-18 18:23:59:902 grammar LogManager.java:25 imported rule: (RULE INT (BLOCK (ALT (? (BLOCK (ALT '-'))) (+ (BLOCK (ALT [0-9]))))))
2024-05-18 18:23:59:910 grammar LogManager.java:25 imported rule: (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z]))) (* (BLOCK (ALT [a-zA-Z0-9]))))))
2024-05-18 18:23:59:910 grammar LogManager.java:25 imported rule: (RULE FLOAT (BLOCK (ALT (? (BLOCK (ALT '-'))) (+ (BLOCK (ALT [0-9]))) [.] (+ (BLOCK (ALT [0-9]))))))
2024-05-18 18:23:59:910 grammar LogManager.java:25 imported rule: (RULE SEMI (BLOCK (ALT ';')))
2024-05-18 18:23:59:910 grammar LogManager.java:25 imported rule: (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))
2024-05-18 18:23:59:910 grammar LogManager.java:25 Grammar: (COMBINED_GRAMMAR CodeC (import lexerC) (RULES (RULE start (BLOCK (ALT INSERT CODE ALLAVE content CLLAVE))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT assignament) (ALT imprimir) (ALT ordencondicional) (ALT while))) (RULE declaraciones (BLOCK (ALT tipo ID SEMI) (ALT tipo ID EQUALS expr SEMI))) (RULE assignament (BLOCK (ALT ID EQUALS expr SEMI) (ALT ID (= com (BLOCK (ALT '+=') (ALT '-=') (ALT '*=') (ALT '/='))) (? (BLOCK (ALT expr))) SEMI) (ALT ID (= com (BLOCK (ALT '++') (ALT '--'))) (? (BLOCK (ALT expr))) SEMI))) (RULE imprimir (BLOCK (ALT PRINT APARENTESIS expr CPARENTESIS SEMI))) (RULE tipo (BLOCK (ALT (BLOCK (ALT 'int') (ALT 'float') (ALT 'char'))))) (RULE expr (BLOCK (ALT expr (= op (BLOCK (ALT '*') (ALT '/'))) expr) (ALT expr (= op (BLOCK (ALT '+') (ALT '-'))) expr) (ALT expr RES expr) (ALT expr COMA expr) (ALT (= operator (BLOCK (ALT COND_LOG) (ALT COND_MAT)))) (ALT expr (= operator (BLOCK (ALT COND_LOG) (ALT COND_MAT))) expr) (ALT INT) (ALT ID) (ALT STRING) (ALT FLOAT) (ALT CHAR) (ALT APARENTESIS expr CPARENTESIS))) (RULE ordencondicional (BLOCK (ALT condicional (* (BLOCK (ALT condicional_elseif))) (? (BLOCK (ALT condicional_else)))))) (RULE condicional (BLOCK (ALT IF APARENTESIS expr CPARENTESIS ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE condicional_elseif (BLOCK (ALT ELSE condicional))) (RULE condicional_else (BLOCK (ALT ELSE ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE while (BLOCK (ALT WHILE APARENTESIS (BLOCK (ALT assignament) (ALT expr)) CPARENTESIS ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE CHAR (BLOCK (ALT '[a-zA-Z]'))) (RULE INSERT (BLOCK (ALT 'void'))) (RULE CODE (BLOCK (ALT 'main()'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE RES (BLOCK (ALT '%'))) (RULE COMA (BLOCK (ALT ','))) (RULE APARENTESIS (BLOCK (ALT '('))) (RULE CPARENTESIS (BLOCK (ALT ')'))) (RULE ALLAVE (BLOCK (ALT '{'))) (RULE CLLAVE (BLOCK (ALT '}'))) (RULE EQUALS (BLOCK (ALT '='))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PRINT (BLOCK (ALT 'printf'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE COND_MAT (BLOCK (ALT (BLOCK (ALT '<') (ALT '>') (ALT '<=') (ALT '>='))))) (RULE COND_LOG (BLOCK (ALT (BLOCK (ALT '==') (ALT '!=') (ALT 'true') (ALT 'false') (ALT '&&') (ALT '||') (ALT '!true') (ALT '!false'))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE INT (BLOCK (ALT (? (BLOCK (ALT '-'))) (+ (BLOCK (ALT [0-9])))))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z]))) (* (BLOCK (ALT [a-zA-Z0-9])))))) (RULE FLOAT (BLOCK (ALT (? (BLOCK (ALT '-'))) (+ (BLOCK (ALT [0-9]))) [.] (+ (BLOCK (ALT [0-9])))))) (RULE SEMI (BLOCK (ALT ';'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-05-18 18:23:59:992 grammar LogManager.java:25 after: (COMBINED_GRAMMAR CodeC (import lexerC) (RULES (RULE start (BLOCK (ALT INSERT CODE ALLAVE content CLLAVE))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT assignament) (ALT imprimir) (ALT ordencondicional) (ALT while))) (RULE declaraciones (BLOCK (ALT tipo ID SEMI) (ALT tipo ID EQUALS expr SEMI))) (RULE assignament (BLOCK (ALT ID EQUALS expr SEMI) (ALT ID (= com (SET '+=' '-=' '*=' '/=')) (? (BLOCK (ALT expr))) SEMI) (ALT ID (= com (SET '++' '--')) (? (BLOCK (ALT expr))) SEMI))) (RULE imprimir (BLOCK (ALT PRINT APARENTESIS expr CPARENTESIS SEMI))) (RULE tipo (BLOCK (ALT (SET 'int' 'float' 'char')))) (RULE expr (BLOCK (ALT expr (= op (SET '*' '/')) expr) (ALT expr (= op (SET '+' '-')) expr) (ALT expr RES expr) (ALT expr COMA expr) (ALT (= operator (SET COND_LOG COND_MAT))) (ALT expr (= operator (SET COND_LOG COND_MAT)) expr) (ALT INT) (ALT ID) (ALT STRING) (ALT FLOAT) (ALT CHAR) (ALT APARENTESIS expr CPARENTESIS))) (RULE ordencondicional (BLOCK (ALT condicional (* (BLOCK (ALT condicional_elseif))) (? (BLOCK (ALT condicional_else)))))) (RULE condicional (BLOCK (ALT IF APARENTESIS expr CPARENTESIS ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE condicional_elseif (BLOCK (ALT ELSE condicional))) (RULE condicional_else (BLOCK (ALT ELSE ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE while (BLOCK (ALT WHILE APARENTESIS (BLOCK (ALT assignament) (ALT expr)) CPARENTESIS ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE CHAR (BLOCK (ALT '[a-zA-Z]'))) (RULE INSERT (BLOCK (ALT 'void'))) (RULE CODE (BLOCK (ALT 'main()'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE RES (BLOCK (ALT '%'))) (RULE COMA (BLOCK (ALT ','))) (RULE APARENTESIS (BLOCK (ALT '('))) (RULE CPARENTESIS (BLOCK (ALT ')'))) (RULE ALLAVE (BLOCK (ALT '{'))) (RULE CLLAVE (BLOCK (ALT '}'))) (RULE EQUALS (BLOCK (ALT '='))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PRINT (BLOCK (ALT 'printf'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE COND_MAT (BLOCK (ALT (BLOCK (ALT '<') (ALT '>') (ALT '<=') (ALT '>='))))) (RULE COND_LOG (BLOCK (ALT (BLOCK (ALT '==') (ALT '!=') (ALT 'true') (ALT 'false') (ALT '&&') (ALT '||') (ALT '!true') (ALT '!false'))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE INT (BLOCK (ALT (? (BLOCK (ALT '-'))) (+ (BLOCK (ALT [0-9])))))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z]))) (* (BLOCK (ALT [a-zA-Z0-9])))))) (RULE FLOAT (BLOCK (ALT (? (BLOCK (ALT '-'))) (+ (BLOCK (ALT [0-9]))) [.] (+ (BLOCK (ALT [0-9])))))) (RULE SEMI (BLOCK (ALT ';'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-05-18 18:24:00:096 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR CodeC (import lexerC) (RULES (RULE start (BLOCK (ALT INSERT CODE ALLAVE content CLLAVE))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT assignament) (ALT imprimir) (ALT ordencondicional) (ALT while))) (RULE declaraciones (BLOCK (ALT tipo ID SEMI) (ALT tipo ID EQUALS expr SEMI))) (RULE assignament (BLOCK (ALT ID EQUALS expr SEMI) (ALT ID (= com (SET '+=' '-=' '*=' '/=')) (? (BLOCK (ALT expr))) SEMI) (ALT ID (= com (SET '++' '--')) (? (BLOCK (ALT expr))) SEMI))) (RULE imprimir (BLOCK (ALT PRINT APARENTESIS expr CPARENTESIS SEMI))) (RULE tipo (BLOCK (ALT (SET 'int' 'float' 'char')))) (RULE expr (BLOCK (ALT expr (= op (SET '*' '/')) expr) (ALT expr (= op (SET '+' '-')) expr) (ALT expr RES expr) (ALT expr COMA expr) (ALT (= operator (SET COND_LOG COND_MAT))) (ALT expr (= operator (SET COND_LOG COND_MAT)) expr) (ALT INT) (ALT ID) (ALT STRING) (ALT FLOAT) (ALT CHAR) (ALT APARENTESIS expr CPARENTESIS))) (RULE ordencondicional (BLOCK (ALT condicional (* (BLOCK (ALT condicional_elseif))) (? (BLOCK (ALT condicional_else)))))) (RULE condicional (BLOCK (ALT IF APARENTESIS expr CPARENTESIS ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE condicional_elseif (BLOCK (ALT ELSE condicional))) (RULE condicional_else (BLOCK (ALT ELSE ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE while (BLOCK (ALT WHILE APARENTESIS (BLOCK (ALT assignament) (ALT expr)) CPARENTESIS ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE)))))
2024-05-18 18:24:00:096 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR CodeCLexer (RULES (RULE T__0 (BLOCK (ALT '+='))) (RULE T__1 (BLOCK (ALT '-='))) (RULE T__2 (BLOCK (ALT '*='))) (RULE T__3 (BLOCK (ALT '/='))) (RULE T__4 (BLOCK (ALT '++'))) (RULE T__5 (BLOCK (ALT '--'))) (RULE T__6 (BLOCK (ALT 'int'))) (RULE T__7 (BLOCK (ALT 'float'))) (RULE T__8 (BLOCK (ALT 'char'))) (RULE CHAR (BLOCK (ALT '[a-zA-Z]'))) (RULE INSERT (BLOCK (ALT 'void'))) (RULE CODE (BLOCK (ALT 'main()'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE RES (BLOCK (ALT '%'))) (RULE COMA (BLOCK (ALT ','))) (RULE APARENTESIS (BLOCK (ALT '('))) (RULE CPARENTESIS (BLOCK (ALT ')'))) (RULE ALLAVE (BLOCK (ALT '{'))) (RULE CLLAVE (BLOCK (ALT '}'))) (RULE EQUALS (BLOCK (ALT '='))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PRINT (BLOCK (ALT 'printf'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE COND_MAT (BLOCK (ALT (BLOCK (ALT '<') (ALT '>') (ALT '<=') (ALT '>='))))) (RULE COND_LOG (BLOCK (ALT (BLOCK (ALT '==') (ALT '!=') (ALT 'true') (ALT 'false') (ALT '&&') (ALT '||') (ALT '!true') (ALT '!false'))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE INT (BLOCK (ALT (? (BLOCK (ALT '-'))) (+ (BLOCK (ALT [0-9])))))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z]))) (* (BLOCK (ALT [a-zA-Z0-9])))))) (RULE FLOAT (BLOCK (ALT (? (BLOCK (ALT '-'))) (+ (BLOCK (ALT [0-9]))) [.] (+ (BLOCK (ALT [0-9])))))) (RULE SEMI (BLOCK (ALT ';'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-05-18 18:24:00:668 left-recursion LogManager.java:25 expr
    :   ( {} operator=(COND_LOG<tokenIndex=256>|COND_MAT<tokenIndex=258>)   
        | INT<tokenIndex=283>  
        | ID<tokenIndex=290>  
        | STRING<tokenIndex=297>  
        | FLOAT<tokenIndex=304>  
        | CHAR<tokenIndex=311>  
        | APARENTESIS<tokenIndex=318> expr<tokenIndex=320> CPARENTESIS<tokenIndex=322>  
        )
        (
          {this.precpred(this._ctx, 12)}?<p=12> op=('*'<tokenIndex=197> | '/'<tokenIndex=201>) expr<tokenIndex=204,p=13>
                  | {this.precpred(this._ctx, 11)}?<p=11> op=('+'<tokenIndex=217> | '-'<tokenIndex=221>) expr<tokenIndex=224,p=12>
                  | {this.precpred(this._ctx, 10)}?<p=10> RES<tokenIndex=233> expr<tokenIndex=235,p=11>
                  | {this.precpred(this._ctx, 9)}?<p=9> COMA<tokenIndex=244> expr<tokenIndex=246,p=10>
                  | {this.precpred(this._ctx, 7)}?<p=7> operator=(COND_LOG<tokenIndex=271>|COND_MAT<tokenIndex=273>) expr<tokenIndex=276,p=8>
        )*
    ;
2024-05-18 18:24:00:701 grammar LogManager.java:25 added: (RULE expr (BLOCK (ALT (BLOCK (ALT {} (= operator (SET (COND_LOG (ELEMENT_OPTIONS (= tokenIndex 256))) (COND_MAT (ELEMENT_OPTIONS (= tokenIndex 258)))))) (ALT (INT (ELEMENT_OPTIONS (= tokenIndex 283)))) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 290)))) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 297)))) (ALT (FLOAT (ELEMENT_OPTIONS (= tokenIndex 304)))) (ALT (CHAR (ELEMENT_OPTIONS (= tokenIndex 311)))) (ALT (APARENTESIS (ELEMENT_OPTIONS (= tokenIndex 318))) (expr (ELEMENT_OPTIONS (= tokenIndex 320))) (CPARENTESIS (ELEMENT_OPTIONS (= tokenIndex 322))))) (* (BLOCK (ALT ({this.precpred(this._ctx, 12)}? (ELEMENT_OPTIONS (= p 12))) (= op (SET ('*' (ELEMENT_OPTIONS (= tokenIndex 197))) ('/' (ELEMENT_OPTIONS (= tokenIndex 201))))) (expr (ELEMENT_OPTIONS (= tokenIndex 204) (= p 13)))) (ALT ({this.precpred(this._ctx, 11)}? (ELEMENT_OPTIONS (= p 11))) (= op (SET ('+' (ELEMENT_OPTIONS (= tokenIndex 217))) ('-' (ELEMENT_OPTIONS (= tokenIndex 221))))) (expr (ELEMENT_OPTIONS (= tokenIndex 224) (= p 12)))) (ALT ({this.precpred(this._ctx, 10)}? (ELEMENT_OPTIONS (= p 10))) (RES (ELEMENT_OPTIONS (= tokenIndex 233))) (expr (ELEMENT_OPTIONS (= tokenIndex 235) (= p 11)))) (ALT ({this.precpred(this._ctx, 9)}? (ELEMENT_OPTIONS (= p 9))) (COMA (ELEMENT_OPTIONS (= tokenIndex 244))) (expr (ELEMENT_OPTIONS (= tokenIndex 246) (= p 10)))) (ALT ({this.precpred(this._ctx, 7)}? (ELEMENT_OPTIONS (= p 7))) (= operator (SET (COND_LOG (ELEMENT_OPTIONS (= tokenIndex 271))) (COND_MAT (ELEMENT_OPTIONS (= tokenIndex 273))))) (expr (ELEMENT_OPTIONS (= tokenIndex 276) (= p 8)))))))))
2024-05-18 18:24:00:701 semantics LogManager.java:25 tokens={EOF=-1, T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, CHAR=10, INSERT=11, CODE=12, WHILE=13, RES=14, COMA=15, APARENTESIS=16, CPARENTESIS=17, ALLAVE=18, CLLAVE=19, EQUALS=20, MUL=21, DIV=22, ADD=23, SUB=24, PRINT=25, IF=26, ELSE=27, COND_MAT=28, COND_LOG=29, STRING=30, INT=31, ID=32, FLOAT=33, SEMI=34, WS=35}
2024-05-18 18:24:00:701 semantics LogManager.java:25 strings={'+='=1, '-='=2, '*='=3, '/='=4, '++'=5, '--'=6, 'int'=7, 'float'=8, 'char'=9, '[a-zA-Z]'=10, 'void'=11, 'main()'=12, 'while'=13, '%'=14, ','=15, '('=16, ')'=17, '{'=18, '}'=19, '='=20, '*'=21, '/'=22, '+'=23, '-'=24, 'printf'=25, 'if'=26, 'else'=27, ';'=34}
2024-05-18 18:24:00:728 LL1 LogManager.java:25 
DECISION 0 in rule content
2024-05-18 18:24:00:733 LL1 LogManager.java:25 LL(1)? false
2024-05-18 18:24:00:733 LL1 LogManager.java:25 
DECISION 1 in rule expresiones
2024-05-18 18:24:00:733 LL1 LogManager.java:25 look=[{7..9}, 32, 25, 26, 13]
2024-05-18 18:24:00:733 LL1 LogManager.java:25 LL(1)? true
2024-05-18 18:24:00:733 LL1 LogManager.java:25 
DECISION 2 in rule declaraciones
2024-05-18 18:24:00:733 LL1 LogManager.java:25 look=[{7..9}, {7..9}]
2024-05-18 18:24:00:733 LL1 LogManager.java:25 LL(1)? false
2024-05-18 18:24:00:733 LL1 LogManager.java:25 
DECISION 3 in rule assignament
2024-05-18 18:24:00:733 LL1 LogManager.java:25 look=[{10, 16, 28..33}, 34]
2024-05-18 18:24:00:733 LL1 LogManager.java:25 LL(1)? true
2024-05-18 18:24:00:733 LL1 LogManager.java:25 
DECISION 4 in rule assignament
2024-05-18 18:24:00:733 LL1 LogManager.java:25 look=[{10, 16, 28..33}, 34]
2024-05-18 18:24:00:733 LL1 LogManager.java:25 LL(1)? true
2024-05-18 18:24:00:733 LL1 LogManager.java:25 
DECISION 5 in rule assignament
2024-05-18 18:24:00:733 LL1 LogManager.java:25 look=[32, 32, 32]
2024-05-18 18:24:00:733 LL1 LogManager.java:25 LL(1)? false
2024-05-18 18:24:00:733 LL1 LogManager.java:25 
DECISION 6 in rule expr
2024-05-18 18:24:00:733 LL1 LogManager.java:25 look=[{28..29}, 31, 32, 30, 33, 10, 16]
2024-05-18 18:24:00:733 LL1 LogManager.java:25 LL(1)? true
2024-05-18 18:24:00:733 LL1 LogManager.java:25 
DECISION 7 in rule expr
2024-05-18 18:24:00:733 LL1 LogManager.java:25 look=[null, null, null, null, null]
2024-05-18 18:24:00:733 LL1 LogManager.java:25 LL(1)? false
2024-05-18 18:24:00:733 LL1 LogManager.java:25 
DECISION 8 in rule expr
2024-05-18 18:24:00:733 LL1 LogManager.java:25 look=[null, null]
2024-05-18 18:24:00:733 LL1 LogManager.java:25 LL(1)? false
2024-05-18 18:24:00:733 LL1 LogManager.java:25 
DECISION 9 in rule ordencondicional
2024-05-18 18:24:00:733 LL1 LogManager.java:25 look=[27, {7..9, 13, 19, 25..27, 32}]
2024-05-18 18:24:00:733 LL1 LogManager.java:25 LL(1)? false
2024-05-18 18:24:00:733 LL1 LogManager.java:25 
DECISION 10 in rule ordencondicional
2024-05-18 18:24:00:733 LL1 LogManager.java:25 look=[27, {7..9, 13, 19, 25..26, 32}]
2024-05-18 18:24:00:733 LL1 LogManager.java:25 LL(1)? true
2024-05-18 18:24:00:733 LL1 LogManager.java:25 
DECISION 11 in rule condicional
2024-05-18 18:24:00:733 LL1 LogManager.java:25 look=[{7..9, 13, 25..26, 32}, 19]
2024-05-18 18:24:00:733 LL1 LogManager.java:25 LL(1)? true
2024-05-18 18:24:00:733 LL1 LogManager.java:25 
DECISION 12 in rule condicional_else
2024-05-18 18:24:00:733 LL1 LogManager.java:25 look=[{7..9, 13, 25..26, 32}, 19]
2024-05-18 18:24:00:733 LL1 LogManager.java:25 LL(1)? true
2024-05-18 18:24:00:741 LL1 LogManager.java:25 
DECISION 13 in rule while
2024-05-18 18:24:00:741 LL1 LogManager.java:25 look=[32, {10, 16, 28..33}]
2024-05-18 18:24:00:741 LL1 LogManager.java:25 LL(1)? false
2024-05-18 18:24:00:741 LL1 LogManager.java:25 
DECISION 14 in rule while
2024-05-18 18:24:00:741 LL1 LogManager.java:25 look=[{7..9, 13, 25..26, 32}, 19]
2024-05-18 18:24:00:741 LL1 LogManager.java:25 LL(1)? true
2024-05-18 18:24:00:797 action-translator LogManager.java:25 translate 
2024-05-18 18:24:00:797 action-translator LogManager.java:25 translate this.precpred(this._ctx, 12)
2024-05-18 18:24:00:797 action-translator LogManager.java:25 translate this.precpred(this._ctx, 11)
2024-05-18 18:24:00:797 action-translator LogManager.java:25 translate this.precpred(this._ctx, 10)
2024-05-18 18:24:00:803 action-translator LogManager.java:25 translate this.precpred(this._ctx, 9)
2024-05-18 18:24:00:803 action-translator LogManager.java:25 translate this.precpred(this._ctx, 7)
2024-05-18 18:24:00:805 action-translator LogManager.java:25 translate this.precpred(this._ctx, 12)
2024-05-18 18:24:00:805 action-translator LogManager.java:25 translate this.precpred(this._ctx, 11)
2024-05-18 18:24:00:805 action-translator LogManager.java:25 translate this.precpred(this._ctx, 10)
2024-05-18 18:24:00:805 action-translator LogManager.java:25 translate this.precpred(this._ctx, 9)
2024-05-18 18:24:00:805 action-translator LogManager.java:25 translate this.precpred(this._ctx, 7)
