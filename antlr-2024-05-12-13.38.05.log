2024-05-12 13:38:04:435 grammar LogManager.java:25 load lexerRulesCV from ./grammar/CodeFile.g4
2024-05-12 13:38:04:443 grammar LogManager.java:25 before: (COMBINED_GRAMMAR CodeFile (import lexerRulesCV) (RULES (RULE start (BLOCK (ALT INSERT CODE ALLAVE content CLLAVE))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT assignament) (ALT imprimir) (ALT ordencondicional) (ALT while))) (RULE declaraciones (BLOCK (ALT tipo ID SEMI (? (BLOCK (ALT expr))) SEMI) (ALT EPSILON))) (RULE assignament (BLOCK (ALT ID EQUALS expr SEMI) (ALT ID (= com (BLOCK (ALT '+=') (ALT '-=') (ALT '*=') (ALT '/='))) (? (BLOCK (ALT expr))) SEMI) (ALT ID (= com (BLOCK (ALT '--') (ALT '++'))) (? (BLOCK (ALT expr))) SEMI))) (RULE imprimir (BLOCK (ALT PRINT APARENTESIS expr CPARENTESIS SEMI))) (RULE tipo (BLOCK (ALT (BLOCK (ALT 'margit') (ALT 'radahn') (ALT 'godrick'))))) (RULE expr (BLOCK (ALT APARENTESIS expr CPARENTESIS) (ALT expr (= op (BLOCK (ALT '*') (ALT '/'))) expr) (ALT expr (= op (BLOCK (ALT '+') (ALT '-'))) expr) (ALT expr COMA expr) (ALT expr RES expr) (ALT NEGAN expr) (ALT (= op (BLOCK (ALT '+') (ALT '-'))) expr) (ALT (= operator (BLOCK (ALT '<') (ALT '>') (ALT '<=') (ALT '>=')))) (ALT (= operator (BLOCK (ALT '==') (ALT '!=') (ALT '&&') (ALT '||') (ALT 'true') (ALT 'false') (ALT '!true') (ALT '!false')))) (ALT expr (= operator (BLOCK (ALT '<') (ALT '>') (ALT '<=') (ALT '>='))) expr) (ALT expr (= operator (BLOCK (ALT '==') (ALT '!=') (ALT '&&') (ALT '||') (ALT 'true') (ALT 'false') (ALT '!true') (ALT '!false'))) expr) (ALT INT) (ALT ID) (ALT STRING) (ALT FLOAT) (ALT CHAR))) (RULE ordencondicional (BLOCK (ALT condicional (* (BLOCK (ALT condicional_elseif))) (? (BLOCK (ALT condicional_else)))))) (RULE condicional (BLOCK (ALT IF APARENTESIS expr CPARENTESIS ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE condicional_elseif (BLOCK (ALT ELSE condicional))) (RULE condicional_else (BLOCK (ALT ELSE ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE while (BLOCK (ALT WHILE APARENTESIS (BLOCK (ALT expr)) CPARENTESIS ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE RES (BLOCK (ALT '%'))) (RULE COMA (BLOCK (ALT ','))) (RULE NEGAN (BLOCK (ALT '!')))))
2024-05-12 13:38:04:451 grammar LogManager.java:25 imported actions: []
2024-05-12 13:38:04:451 grammar LogManager.java:25 imported rule: (RULE APARENTESIS (BLOCK (ALT '(')))
2024-05-12 13:38:04:451 grammar LogManager.java:25 imported rule: (RULE CPARENTESIS (BLOCK (ALT ')')))
2024-05-12 13:38:04:451 grammar LogManager.java:25 imported rule: (RULE ALLAVE (BLOCK (ALT '{')))
2024-05-12 13:38:04:451 grammar LogManager.java:25 imported rule: (RULE CLLAVE (BLOCK (ALT '}')))
2024-05-12 13:38:04:451 grammar LogManager.java:25 imported rule: (RULE EQUALS (BLOCK (ALT '=')))
2024-05-12 13:38:04:451 grammar LogManager.java:25 imported rule: (RULE MUL (BLOCK (ALT '*')))
2024-05-12 13:38:04:451 grammar LogManager.java:25 imported rule: (RULE DIV (BLOCK (ALT '/')))
2024-05-12 13:38:04:451 grammar LogManager.java:25 imported rule: (RULE ADD (BLOCK (ALT '+')))
2024-05-12 13:38:04:451 grammar LogManager.java:25 imported rule: (RULE SUB (BLOCK (ALT '-')))
2024-05-12 13:38:04:451 grammar LogManager.java:25 imported rule: (RULE PRINT (BLOCK (ALT 'MostrarMensaje')))
2024-05-12 13:38:04:451 grammar LogManager.java:25 imported rule: (RULE IF (BLOCK (ALT 'if')))
2024-05-12 13:38:04:451 grammar LogManager.java:25 imported rule: (RULE ELSE (BLOCK (ALT 'else')))
2024-05-12 13:38:04:451 grammar LogManager.java:25 imported rule: (RULE WHILE (BLOCK (ALT 'while')))
2024-05-12 13:38:04:451 grammar LogManager.java:25 imported rule: (RULE COND_MAT (BLOCK (ALT (BLOCK (ALT '<') (ALT '>') (ALT '<=') (ALT '>=')))))
2024-05-12 13:38:04:451 grammar LogManager.java:25 imported rule: (RULE COND_LOG (BLOCK (ALT (BLOCK (ALT '==') (ALT '!=') (ALT 'true') (ALT 'false') (ALT '&&') (ALT '||') (ALT '!true') (ALT '!false')))))
2024-05-12 13:38:04:451 grammar LogManager.java:25 imported rule: (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"')))
2024-05-12 13:38:04:451 grammar LogManager.java:25 imported rule: (RULE INT (BLOCK (ALT (? (BLOCK (ALT '-'))) (+ (BLOCK (ALT [0-9]))))))
2024-05-12 13:38:04:451 grammar LogManager.java:25 imported rule: (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z]))) (* (BLOCK (ALT [_a-zA-Z0-9]))))))
2024-05-12 13:38:04:451 grammar LogManager.java:25 imported rule: (RULE FLOAT (BLOCK (ALT (? (BLOCK (ALT '-'))) (+ (BLOCK (ALT [0-9]))) [.] (+ (BLOCK (ALT [0-9]))))))
2024-05-12 13:38:04:451 grammar LogManager.java:25 imported rule: (RULE CHAR (BLOCK (ALT '"' (? (BLOCK (ALT [a-zA-Z]))) '"')))
2024-05-12 13:38:04:451 grammar LogManager.java:25 imported rule: (RULE SEMI (BLOCK (ALT ';')))
2024-05-12 13:38:04:451 grammar LogManager.java:25 imported rule: (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))
2024-05-12 13:38:04:451 grammar LogManager.java:25 Grammar: (COMBINED_GRAMMAR CodeFile (import lexerRulesCV) (RULES (RULE start (BLOCK (ALT INSERT CODE ALLAVE content CLLAVE))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT assignament) (ALT imprimir) (ALT ordencondicional) (ALT while))) (RULE declaraciones (BLOCK (ALT tipo ID SEMI (? (BLOCK (ALT expr))) SEMI) (ALT EPSILON))) (RULE assignament (BLOCK (ALT ID EQUALS expr SEMI) (ALT ID (= com (BLOCK (ALT '+=') (ALT '-=') (ALT '*=') (ALT '/='))) (? (BLOCK (ALT expr))) SEMI) (ALT ID (= com (BLOCK (ALT '--') (ALT '++'))) (? (BLOCK (ALT expr))) SEMI))) (RULE imprimir (BLOCK (ALT PRINT APARENTESIS expr CPARENTESIS SEMI))) (RULE tipo (BLOCK (ALT (BLOCK (ALT 'margit') (ALT 'radahn') (ALT 'godrick'))))) (RULE expr (BLOCK (ALT APARENTESIS expr CPARENTESIS) (ALT expr (= op (BLOCK (ALT '*') (ALT '/'))) expr) (ALT expr (= op (BLOCK (ALT '+') (ALT '-'))) expr) (ALT expr COMA expr) (ALT expr RES expr) (ALT NEGAN expr) (ALT (= op (BLOCK (ALT '+') (ALT '-'))) expr) (ALT (= operator (BLOCK (ALT '<') (ALT '>') (ALT '<=') (ALT '>=')))) (ALT (= operator (BLOCK (ALT '==') (ALT '!=') (ALT '&&') (ALT '||') (ALT 'true') (ALT 'false') (ALT '!true') (ALT '!false')))) (ALT expr (= operator (BLOCK (ALT '<') (ALT '>') (ALT '<=') (ALT '>='))) expr) (ALT expr (= operator (BLOCK (ALT '==') (ALT '!=') (ALT '&&') (ALT '||') (ALT 'true') (ALT 'false') (ALT '!true') (ALT '!false'))) expr) (ALT INT) (ALT ID) (ALT STRING) (ALT FLOAT) (ALT CHAR))) (RULE ordencondicional (BLOCK (ALT condicional (* (BLOCK (ALT condicional_elseif))) (? (BLOCK (ALT condicional_else)))))) (RULE condicional (BLOCK (ALT IF APARENTESIS expr CPARENTESIS ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE condicional_elseif (BLOCK (ALT ELSE condicional))) (RULE condicional_else (BLOCK (ALT ELSE ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE while (BLOCK (ALT WHILE APARENTESIS (BLOCK (ALT expr)) CPARENTESIS ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE RES (BLOCK (ALT '%'))) (RULE COMA (BLOCK (ALT ','))) (RULE NEGAN (BLOCK (ALT '!'))) (RULE APARENTESIS (BLOCK (ALT '('))) (RULE CPARENTESIS (BLOCK (ALT ')'))) (RULE ALLAVE (BLOCK (ALT '{'))) (RULE CLLAVE (BLOCK (ALT '}'))) (RULE EQUALS (BLOCK (ALT '='))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PRINT (BLOCK (ALT 'MostrarMensaje'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE COND_MAT (BLOCK (ALT (BLOCK (ALT '<') (ALT '>') (ALT '<=') (ALT '>='))))) (RULE COND_LOG (BLOCK (ALT (BLOCK (ALT '==') (ALT '!=') (ALT 'true') (ALT 'false') (ALT '&&') (ALT '||') (ALT '!true') (ALT '!false'))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE INT (BLOCK (ALT (? (BLOCK (ALT '-'))) (+ (BLOCK (ALT [0-9])))))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z]))) (* (BLOCK (ALT [_a-zA-Z0-9])))))) (RULE FLOAT (BLOCK (ALT (? (BLOCK (ALT '-'))) (+ (BLOCK (ALT [0-9]))) [.] (+ (BLOCK (ALT [0-9])))))) (RULE CHAR (BLOCK (ALT '"' (? (BLOCK (ALT [a-zA-Z]))) '"'))) (RULE SEMI (BLOCK (ALT ';'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-05-12 13:38:04:499 grammar LogManager.java:25 after: (COMBINED_GRAMMAR CodeFile (import lexerRulesCV) (RULES (RULE start (BLOCK (ALT INSERT CODE ALLAVE content CLLAVE))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT assignament) (ALT imprimir) (ALT ordencondicional) (ALT while))) (RULE declaraciones (BLOCK (ALT tipo ID SEMI (? (BLOCK (ALT expr))) SEMI) (ALT EPSILON))) (RULE assignament (BLOCK (ALT ID EQUALS expr SEMI) (ALT ID (= com (SET '+=' '-=' '*=' '/=')) (? (BLOCK (ALT expr))) SEMI) (ALT ID (= com (SET '--' '++')) (? (BLOCK (ALT expr))) SEMI))) (RULE imprimir (BLOCK (ALT PRINT APARENTESIS expr CPARENTESIS SEMI))) (RULE tipo (BLOCK (ALT (SET 'margit' 'radahn' 'godrick')))) (RULE expr (BLOCK (ALT APARENTESIS expr CPARENTESIS) (ALT expr (= op (SET '*' '/')) expr) (ALT expr (= op (SET '+' '-')) expr) (ALT expr COMA expr) (ALT expr RES expr) (ALT NEGAN expr) (ALT (= op (SET '+' '-')) expr) (ALT (= operator (SET '<' '>' '<=' '>='))) (ALT (= operator (SET '==' '!=' '&&' '||' 'true' 'false' '!true' '!false'))) (ALT expr (= operator (SET '<' '>' '<=' '>=')) expr) (ALT expr (= operator (SET '==' '!=' '&&' '||' 'true' 'false' '!true' '!false')) expr) (ALT INT) (ALT ID) (ALT STRING) (ALT FLOAT) (ALT CHAR))) (RULE ordencondicional (BLOCK (ALT condicional (* (BLOCK (ALT condicional_elseif))) (? (BLOCK (ALT condicional_else)))))) (RULE condicional (BLOCK (ALT IF APARENTESIS expr CPARENTESIS ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE condicional_elseif (BLOCK (ALT ELSE condicional))) (RULE condicional_else (BLOCK (ALT ELSE ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE while (BLOCK (ALT WHILE APARENTESIS (BLOCK (ALT expr)) CPARENTESIS ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE RES (BLOCK (ALT '%'))) (RULE COMA (BLOCK (ALT ','))) (RULE NEGAN (BLOCK (ALT '!'))) (RULE APARENTESIS (BLOCK (ALT '('))) (RULE CPARENTESIS (BLOCK (ALT ')'))) (RULE ALLAVE (BLOCK (ALT '{'))) (RULE CLLAVE (BLOCK (ALT '}'))) (RULE EQUALS (BLOCK (ALT '='))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PRINT (BLOCK (ALT 'MostrarMensaje'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE COND_MAT (BLOCK (ALT (BLOCK (ALT '<') (ALT '>') (ALT '<=') (ALT '>='))))) (RULE COND_LOG (BLOCK (ALT (BLOCK (ALT '==') (ALT '!=') (ALT 'true') (ALT 'false') (ALT '&&') (ALT '||') (ALT '!true') (ALT '!false'))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE INT (BLOCK (ALT (? (BLOCK (ALT '-'))) (+ (BLOCK (ALT [0-9])))))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z]))) (* (BLOCK (ALT [_a-zA-Z0-9])))))) (RULE FLOAT (BLOCK (ALT (? (BLOCK (ALT '-'))) (+ (BLOCK (ALT [0-9]))) [.] (+ (BLOCK (ALT [0-9])))))) (RULE CHAR (BLOCK (ALT '"' (? (BLOCK (ALT [a-zA-Z]))) '"'))) (RULE SEMI (BLOCK (ALT ';'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-05-12 13:38:04:561 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR CodeFile (import lexerRulesCV) (RULES (RULE start (BLOCK (ALT INSERT CODE ALLAVE content CLLAVE))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT assignament) (ALT imprimir) (ALT ordencondicional) (ALT while))) (RULE declaraciones (BLOCK (ALT tipo ID SEMI (? (BLOCK (ALT expr))) SEMI) (ALT EPSILON))) (RULE assignament (BLOCK (ALT ID EQUALS expr SEMI) (ALT ID (= com (SET '+=' '-=' '*=' '/=')) (? (BLOCK (ALT expr))) SEMI) (ALT ID (= com (SET '--' '++')) (? (BLOCK (ALT expr))) SEMI))) (RULE imprimir (BLOCK (ALT PRINT APARENTESIS expr CPARENTESIS SEMI))) (RULE tipo (BLOCK (ALT (SET 'margit' 'radahn' 'godrick')))) (RULE expr (BLOCK (ALT APARENTESIS expr CPARENTESIS) (ALT expr (= op (SET '*' '/')) expr) (ALT expr (= op (SET '+' '-')) expr) (ALT expr COMA expr) (ALT expr RES expr) (ALT NEGAN expr) (ALT (= op (SET '+' '-')) expr) (ALT (= operator (SET '<' '>' '<=' '>='))) (ALT (= operator (SET '==' '!=' '&&' '||' 'true' 'false' '!true' '!false'))) (ALT expr (= operator (SET '<' '>' '<=' '>=')) expr) (ALT expr (= operator (SET '==' '!=' '&&' '||' 'true' 'false' '!true' '!false')) expr) (ALT INT) (ALT ID) (ALT STRING) (ALT FLOAT) (ALT CHAR))) (RULE ordencondicional (BLOCK (ALT condicional (* (BLOCK (ALT condicional_elseif))) (? (BLOCK (ALT condicional_else)))))) (RULE condicional (BLOCK (ALT IF APARENTESIS expr CPARENTESIS ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE condicional_elseif (BLOCK (ALT ELSE condicional))) (RULE condicional_else (BLOCK (ALT ELSE ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE while (BLOCK (ALT WHILE APARENTESIS (BLOCK (ALT expr)) CPARENTESIS ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE)))))
2024-05-12 13:38:04:564 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR CodeFileLexer (RULES (RULE T__0 (BLOCK (ALT '+='))) (RULE T__1 (BLOCK (ALT '-='))) (RULE T__2 (BLOCK (ALT '*='))) (RULE T__3 (BLOCK (ALT '/='))) (RULE T__4 (BLOCK (ALT '--'))) (RULE T__5 (BLOCK (ALT '++'))) (RULE T__6 (BLOCK (ALT 'margit'))) (RULE T__7 (BLOCK (ALT 'radahn'))) (RULE T__8 (BLOCK (ALT 'godrick'))) (RULE T__9 (BLOCK (ALT '<'))) (RULE T__10 (BLOCK (ALT '>'))) (RULE T__11 (BLOCK (ALT '<='))) (RULE T__12 (BLOCK (ALT '>='))) (RULE T__13 (BLOCK (ALT '=='))) (RULE T__14 (BLOCK (ALT '!='))) (RULE T__15 (BLOCK (ALT '&&'))) (RULE T__16 (BLOCK (ALT '||'))) (RULE T__17 (BLOCK (ALT 'true'))) (RULE T__18 (BLOCK (ALT 'false'))) (RULE T__19 (BLOCK (ALT '!true'))) (RULE T__20 (BLOCK (ALT '!false'))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE RES (BLOCK (ALT '%'))) (RULE COMA (BLOCK (ALT ','))) (RULE NEGAN (BLOCK (ALT '!'))) (RULE APARENTESIS (BLOCK (ALT '('))) (RULE CPARENTESIS (BLOCK (ALT ')'))) (RULE ALLAVE (BLOCK (ALT '{'))) (RULE CLLAVE (BLOCK (ALT '}'))) (RULE EQUALS (BLOCK (ALT '='))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PRINT (BLOCK (ALT 'MostrarMensaje'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE COND_MAT (BLOCK (ALT (BLOCK (ALT '<') (ALT '>') (ALT '<=') (ALT '>='))))) (RULE COND_LOG (BLOCK (ALT (BLOCK (ALT '==') (ALT '!=') (ALT 'true') (ALT 'false') (ALT '&&') (ALT '||') (ALT '!true') (ALT '!false'))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE INT (BLOCK (ALT (? (BLOCK (ALT '-'))) (+ (BLOCK (ALT [0-9])))))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z]))) (* (BLOCK (ALT [_a-zA-Z0-9])))))) (RULE FLOAT (BLOCK (ALT (? (BLOCK (ALT '-'))) (+ (BLOCK (ALT [0-9]))) [.] (+ (BLOCK (ALT [0-9])))))) (RULE CHAR (BLOCK (ALT '"' (? (BLOCK (ALT [a-zA-Z]))) '"'))) (RULE SEMI (BLOCK (ALT ';'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
