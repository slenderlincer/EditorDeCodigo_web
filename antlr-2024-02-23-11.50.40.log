2024-02-23 11:50:39:548 grammar LogManager.java:25 load LexerRules from ./grammar/CodeFile.g4
2024-02-23 11:50:39:552 grammar LogManager.java:25 before: (COMBINED_GRAMMAR CodeFile (import LexerRules) (RULES (RULE start (BLOCK (ALT INSERT CODE '{' content '}'))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT asignaciones))) (RULE declaraciones (BLOCK (ALT tipo ID (+ (BLOCK (ALT SEMI)))) (ALT tipo (= id (BLOCK (ALT ID_invalido) (ALT INT))) (+ (BLOCK (ALT SEMI)))) (ALT tipo ID '=' (= value (BLOCK (ALT INT) (ALT CHAR) (ALT FLOAT))) (+ (BLOCK (ALT SEMI)))) (ALT tipo ID (? (BLOCK (ALT '=' expression))) (+ (BLOCK (ALT SEMI)))))) (RULE asignaciones (BLOCK (ALT ID '=' (= value (BLOCK (ALT INT) (ALT CHAR) (ALT FLOAT))) (+ (BLOCK (ALT SEMI)))))) (RULE tipo (BLOCK (ALT 'margit') (ALT 'radahn') (ALT 'godrick'))) (RULE expression (BLOCK (ALT NUMBER) (ALT ID) (ALT expression (BLOCK (ALT ADD) (ALT SUB) (ALT MUL) (ALT DIV)) expression)))))
2024-02-23 11:50:39:561 grammar LogManager.java:25 imported actions: []
2024-02-23 11:50:39:561 grammar LogManager.java:25 imported rule: (RULE INSERT (BLOCK (ALT 'iniciar')))
2024-02-23 11:50:39:561 grammar LogManager.java:25 imported rule: (RULE CODE (BLOCK (ALT 'codigo')))
2024-02-23 11:50:39:561 grammar LogManager.java:25 imported rule: (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z]))))))
2024-02-23 11:50:39:561 grammar LogManager.java:25 imported rule: (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9]))))))
2024-02-23 11:50:39:561 grammar LogManager.java:25 imported rule: (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))))))
2024-02-23 11:50:39:561 grammar LogManager.java:25 imported rule: (RULE FLOAT (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) [.] (+ (BLOCK (ALT [0-9]))))))
2024-02-23 11:50:39:561 grammar LogManager.java:25 imported rule: (RULE CHAR (BLOCK (ALT [a-zA-Z])))
2024-02-23 11:50:39:561 grammar LogManager.java:25 imported rule: (RULE ID_invalido (BLOCK (ALT (+ (BLOCK (ALT [A-Za-z0-9+\-]))))))
2024-02-23 11:50:39:561 grammar LogManager.java:25 imported rule: (RULE SEMI (BLOCK (ALT ';')))
2024-02-23 11:50:39:561 grammar LogManager.java:25 imported rule: (RULE ADD (BLOCK (ALT '+')))
2024-02-23 11:50:39:561 grammar LogManager.java:25 imported rule: (RULE SUB (BLOCK (ALT '-')))
2024-02-23 11:50:39:561 grammar LogManager.java:25 imported rule: (RULE MUL (BLOCK (ALT '*')))
2024-02-23 11:50:39:561 grammar LogManager.java:25 imported rule: (RULE DIV (BLOCK (ALT '/')))
2024-02-23 11:50:39:561 grammar LogManager.java:25 imported rule: (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))
2024-02-23 11:50:39:564 grammar LogManager.java:25 Grammar: (COMBINED_GRAMMAR CodeFile (import LexerRules) (RULES (RULE start (BLOCK (ALT INSERT CODE '{' content '}'))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT asignaciones))) (RULE declaraciones (BLOCK (ALT tipo ID (+ (BLOCK (ALT SEMI)))) (ALT tipo (= id (BLOCK (ALT ID_invalido) (ALT INT))) (+ (BLOCK (ALT SEMI)))) (ALT tipo ID '=' (= value (BLOCK (ALT INT) (ALT CHAR) (ALT FLOAT))) (+ (BLOCK (ALT SEMI)))) (ALT tipo ID (? (BLOCK (ALT '=' expression))) (+ (BLOCK (ALT SEMI)))))) (RULE asignaciones (BLOCK (ALT ID '=' (= value (BLOCK (ALT INT) (ALT CHAR) (ALT FLOAT))) (+ (BLOCK (ALT SEMI)))))) (RULE tipo (BLOCK (ALT 'margit') (ALT 'radahn') (ALT 'godrick'))) (RULE expression (BLOCK (ALT NUMBER) (ALT ID) (ALT expression (BLOCK (ALT ADD) (ALT SUB) (ALT MUL) (ALT DIV)) expression))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z])))))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE FLOAT (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) [.] (+ (BLOCK (ALT [0-9])))))) (RULE CHAR (BLOCK (ALT [a-zA-Z]))) (RULE ID_invalido (BLOCK (ALT (+ (BLOCK (ALT [A-Za-z0-9+\-])))))) (RULE SEMI (BLOCK (ALT ';'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-02-23 11:50:39:610 grammar LogManager.java:25 after: (COMBINED_GRAMMAR CodeFile (import LexerRules) (RULES (RULE start (BLOCK (ALT INSERT CODE '{' content '}'))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT asignaciones))) (RULE declaraciones (BLOCK (ALT tipo ID (+ (BLOCK (ALT SEMI)))) (ALT tipo (= id (SET ID_invalido INT)) (+ (BLOCK (ALT SEMI)))) (ALT tipo ID '=' (= value (SET INT CHAR FLOAT)) (+ (BLOCK (ALT SEMI)))) (ALT tipo ID (? (BLOCK (ALT '=' expression))) (+ (BLOCK (ALT SEMI)))))) (RULE asignaciones (BLOCK (ALT ID '=' (= value (SET INT CHAR FLOAT)) (+ (BLOCK (ALT SEMI)))))) (RULE tipo (BLOCK (ALT (SET 'margit' 'radahn' 'godrick')))) (RULE expression (BLOCK (ALT NUMBER) (ALT ID) (ALT expression (SET ADD SUB MUL DIV) expression))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z])))))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE FLOAT (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) [.] (+ (BLOCK (ALT [0-9])))))) (RULE CHAR (BLOCK (ALT [a-zA-Z]))) (RULE ID_invalido (BLOCK (ALT (+ (BLOCK (ALT [A-Za-z0-9+\-])))))) (RULE SEMI (BLOCK (ALT ';'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-02-23 11:50:39:666 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR CodeFile (import LexerRules) (RULES (RULE start (BLOCK (ALT INSERT CODE '{' content '}'))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT asignaciones))) (RULE declaraciones (BLOCK (ALT tipo ID (+ (BLOCK (ALT SEMI)))) (ALT tipo (= id (SET ID_invalido INT)) (+ (BLOCK (ALT SEMI)))) (ALT tipo ID '=' (= value (SET INT CHAR FLOAT)) (+ (BLOCK (ALT SEMI)))) (ALT tipo ID (? (BLOCK (ALT '=' expression))) (+ (BLOCK (ALT SEMI)))))) (RULE asignaciones (BLOCK (ALT ID '=' (= value (SET INT CHAR FLOAT)) (+ (BLOCK (ALT SEMI)))))) (RULE tipo (BLOCK (ALT (SET 'margit' 'radahn' 'godrick')))) (RULE expression (BLOCK (ALT NUMBER) (ALT ID) (ALT expression (SET ADD SUB MUL DIV) expression)))))
2024-02-23 11:50:39:666 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR CodeFileLexer (RULES (RULE T__0 (BLOCK (ALT '{'))) (RULE T__1 (BLOCK (ALT '}'))) (RULE T__2 (BLOCK (ALT '='))) (RULE T__3 (BLOCK (ALT 'margit'))) (RULE T__4 (BLOCK (ALT 'radahn'))) (RULE T__5 (BLOCK (ALT 'godrick'))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z])))))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE FLOAT (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) [.] (+ (BLOCK (ALT [0-9])))))) (RULE CHAR (BLOCK (ALT [a-zA-Z]))) (RULE ID_invalido (BLOCK (ALT (+ (BLOCK (ALT [A-Za-z0-9+\-])))))) (RULE SEMI (BLOCK (ALT ';'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-02-23 11:50:40:049 left-recursion LogManager.java:25 expression
    :   ( {} NUMBER<tokenIndex=158> 
        | ID<tokenIndex=161> 
        )
        (
          {this.precpred(this._ctx, 1)}?<p=1> (ADD<tokenIndex=167>|SUB<tokenIndex=169>|MUL<tokenIndex=171>|DIV<tokenIndex=173>) expression<tokenIndex=176,p=2>
        )*
    ;
2024-02-23 11:50:40:061 grammar LogManager.java:25 added: (RULE expression (BLOCK (ALT (BLOCK (ALT {} (NUMBER (ELEMENT_OPTIONS (= tokenIndex 158)))) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 161))))) (* (BLOCK (ALT ({this.precpred(this._ctx, 1)}? (ELEMENT_OPTIONS (= p 1))) (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 167))) (SUB (ELEMENT_OPTIONS (= tokenIndex 169))) (MUL (ELEMENT_OPTIONS (= tokenIndex 171))) (DIV (ELEMENT_OPTIONS (= tokenIndex 173)))) (expression (ELEMENT_OPTIONS (= tokenIndex 176) (= p 2)))))))))
2024-02-23 11:50:40:069 semantics LogManager.java:25 tokens={EOF=-1, T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, INSERT=7, CODE=8, ID=9, INT=10, NUMBER=11, FLOAT=12, CHAR=13, ID_invalido=14, SEMI=15, ADD=16, SUB=17, MUL=18, DIV=19, WS=20}
2024-02-23 11:50:40:069 semantics LogManager.java:25 strings={'{'=1, '}'=2, '='=3, 'margit'=4, 'radahn'=5, 'godrick'=6, 'iniciar'=7, 'codigo'=8, ';'=15, '+'=16, '-'=17, '*'=18, '/'=19}
2024-02-23 11:50:40:090 LL1 LogManager.java:25 
DECISION 0 in rule content
2024-02-23 11:50:40:090 LL1 LogManager.java:25 look=[{4..6, 9}, 2]
2024-02-23 11:50:40:094 LL1 LogManager.java:25 LL(1)? true
2024-02-23 11:50:40:094 LL1 LogManager.java:25 
DECISION 1 in rule expresiones
2024-02-23 11:50:40:094 LL1 LogManager.java:25 look=[{4..6}, 9]
2024-02-23 11:50:40:094 LL1 LogManager.java:25 LL(1)? true
2024-02-23 11:50:40:094 LL1 LogManager.java:25 
DECISION 2 in rule declaraciones
2024-02-23 11:50:40:094 LL1 LogManager.java:25 look=[15, {2, 4..6, 9}]
2024-02-23 11:50:40:094 LL1 LogManager.java:25 LL(1)? true
2024-02-23 11:50:40:094 LL1 LogManager.java:25 
DECISION 3 in rule declaraciones
2024-02-23 11:50:40:094 LL1 LogManager.java:25 look=[15, {2, 4..6, 9}]
2024-02-23 11:50:40:094 LL1 LogManager.java:25 LL(1)? true
2024-02-23 11:50:40:094 LL1 LogManager.java:25 
DECISION 4 in rule declaraciones
2024-02-23 11:50:40:096 LL1 LogManager.java:25 look=[15, {2, 4..6, 9}]
2024-02-23 11:50:40:096 LL1 LogManager.java:25 LL(1)? true
2024-02-23 11:50:40:096 LL1 LogManager.java:25 
DECISION 5 in rule declaraciones
2024-02-23 11:50:40:096 LL1 LogManager.java:25 look=[3, 15]
2024-02-23 11:50:40:096 LL1 LogManager.java:25 LL(1)? true
2024-02-23 11:50:40:096 LL1 LogManager.java:25 
DECISION 6 in rule declaraciones
2024-02-23 11:50:40:096 LL1 LogManager.java:25 look=[15, {2, 4..6, 9}]
2024-02-23 11:50:40:096 LL1 LogManager.java:25 LL(1)? true
2024-02-23 11:50:40:096 LL1 LogManager.java:25 
DECISION 7 in rule declaraciones
2024-02-23 11:50:40:096 LL1 LogManager.java:25 look=[{4..6}, {4..6}, {4..6}, {4..6}]
2024-02-23 11:50:40:096 LL1 LogManager.java:25 LL(1)? false
2024-02-23 11:50:40:096 LL1 LogManager.java:25 
DECISION 8 in rule asignaciones
2024-02-23 11:50:40:096 LL1 LogManager.java:25 look=[15, {2, 4..6, 9}]
2024-02-23 11:50:40:096 LL1 LogManager.java:25 LL(1)? true
2024-02-23 11:50:40:096 LL1 LogManager.java:25 
DECISION 9 in rule expression
2024-02-23 11:50:40:096 LL1 LogManager.java:25 look=[11, 9]
2024-02-23 11:50:40:096 LL1 LogManager.java:25 LL(1)? true
2024-02-23 11:50:40:096 LL1 LogManager.java:25 
DECISION 10 in rule expression
2024-02-23 11:50:40:096 LL1 LogManager.java:25 look=[null, null]
2024-02-23 11:50:40:096 LL1 LogManager.java:25 LL(1)? false
2024-02-23 11:50:40:155 action-translator LogManager.java:25 translate 
2024-02-23 11:50:40:155 action-translator LogManager.java:25 translate this.precpred(this._ctx, 1)
2024-02-23 11:50:40:160 action-translator LogManager.java:25 translate this.precpred(this._ctx, 1)
