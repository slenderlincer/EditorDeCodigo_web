2024-05-16 22:43:25:774 grammar LogManager.java:25 load lexerRulesCV from ./grammar/CodeFile.g4
2024-05-16 22:43:25:782 grammar LogManager.java:25 before: (COMBINED_GRAMMAR CodeFile (import lexerRulesCV) (RULES (RULE start (BLOCK (ALT INSERT CODE ALLAVE content CLLAVE))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT assignament) (ALT imprimir) (ALT ordencondicional) (ALT while))) (RULE declaraciones (BLOCK (ALT tipo ID (? (BLOCK (ALT EQUALS expr))) SEMI))) (RULE assignament (BLOCK (ALT ID EQUALS expr SEMI) (ALT ID (= com (BLOCK (ALT '+=') (ALT '-=') (ALT '*=') (ALT '/='))) (? (BLOCK (ALT expr))) SEMI) (ALT ID (= com (BLOCK (ALT '--') (ALT '++'))) (? (BLOCK (ALT expr))) SEMI))) (RULE imprimir (BLOCK (ALT PRINT APARENTESIS expr CPARENTESIS SEMI))) (RULE tipo (BLOCK (ALT (BLOCK (ALT 'margit') (ALT 'radahn') (ALT 'godrick'))))) (RULE expr (BLOCK (ALT APARENTESIS expr CPARENTESIS) (ALT expr (= op (BLOCK (ALT '*') (ALT '/'))) expr) (ALT expr (= op (BLOCK (ALT '+') (ALT '-'))) expr) (ALT expr COMA expr) (ALT expr RES expr) (ALT NEGAN expr) (ALT (= op (BLOCK (ALT '+') (ALT '-'))) expr) (ALT (= operator (BLOCK (ALT '<') (ALT '>') (ALT '<=') (ALT '>=')))) (ALT (= operator (BLOCK (ALT '==') (ALT '!=') (ALT '&&') (ALT '||') (ALT 'true') (ALT 'false') (ALT '!true') (ALT '!false')))) (ALT expr (= operator (BLOCK (ALT '<') (ALT '>') (ALT '<=') (ALT '>='))) expr) (ALT expr (= operator (BLOCK (ALT '==') (ALT '!=') (ALT '&&') (ALT '||') (ALT 'true') (ALT 'false') (ALT '!true') (ALT '!false'))) expr) (ALT INT) (ALT ID) (ALT STRING) (ALT FLOAT) (ALT CHAR))) (RULE ordencondicional (BLOCK (ALT condicional (* (BLOCK (ALT condicional_elseif))) (? (BLOCK (ALT condicional_else)))))) (RULE condicional (BLOCK (ALT IF APARENTESIS expr CPARENTESIS ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE condicional_elseif (BLOCK (ALT ELSE condicional))) (RULE condicional_else (BLOCK (ALT ELSE ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE while (BLOCK (ALT WHILE APARENTESIS (BLOCK (ALT expr)) CPARENTESIS ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE RES (BLOCK (ALT '%'))) (RULE COMA (BLOCK (ALT ','))) (RULE NEGAN (BLOCK (ALT '!')))))
2024-05-16 22:43:25:798 grammar LogManager.java:25 imported actions: []
2024-05-16 22:43:25:798 grammar LogManager.java:25 imported rule: (RULE APARENTESIS (BLOCK (ALT '(')))
2024-05-16 22:43:25:798 grammar LogManager.java:25 imported rule: (RULE CPARENTESIS (BLOCK (ALT ')')))
2024-05-16 22:43:25:798 grammar LogManager.java:25 imported rule: (RULE ALLAVE (BLOCK (ALT '{')))
2024-05-16 22:43:25:798 grammar LogManager.java:25 imported rule: (RULE CLLAVE (BLOCK (ALT '}')))
2024-05-16 22:43:25:798 grammar LogManager.java:25 imported rule: (RULE EQUALS (BLOCK (ALT '=')))
2024-05-16 22:43:25:798 grammar LogManager.java:25 imported rule: (RULE MUL (BLOCK (ALT '*')))
2024-05-16 22:43:25:798 grammar LogManager.java:25 imported rule: (RULE DIV (BLOCK (ALT '/')))
2024-05-16 22:43:25:798 grammar LogManager.java:25 imported rule: (RULE ADD (BLOCK (ALT '+')))
2024-05-16 22:43:25:798 grammar LogManager.java:25 imported rule: (RULE SUB (BLOCK (ALT '-')))
2024-05-16 22:43:25:798 grammar LogManager.java:25 imported rule: (RULE PRINT (BLOCK (ALT 'MostrarMensaje')))
2024-05-16 22:43:25:798 grammar LogManager.java:25 imported rule: (RULE IF (BLOCK (ALT 'verify')))
2024-05-16 22:43:25:798 grammar LogManager.java:25 imported rule: (RULE ELSE (BLOCK (ALT 'otherwise')))
2024-05-16 22:43:25:798 grammar LogManager.java:25 imported rule: (RULE WHILE (BLOCK (ALT 'while')))
2024-05-16 22:43:25:798 grammar LogManager.java:25 imported rule: (RULE COND_MAT (BLOCK (ALT (BLOCK (ALT '<') (ALT '>') (ALT '<=') (ALT '>=')))))
2024-05-16 22:43:25:798 grammar LogManager.java:25 imported rule: (RULE COND_LOG (BLOCK (ALT (BLOCK (ALT '==') (ALT '!=') (ALT 'true') (ALT 'false') (ALT '&&') (ALT '||') (ALT '!true') (ALT '!false')))))
2024-05-16 22:43:25:798 grammar LogManager.java:25 imported rule: (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"')))
2024-05-16 22:43:25:798 grammar LogManager.java:25 imported rule: (RULE INT (BLOCK (ALT (? (BLOCK (ALT '-'))) (+ (BLOCK (ALT [0-9]))))))
2024-05-16 22:43:25:798 grammar LogManager.java:25 imported rule: (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z]))) (* (BLOCK (ALT [_a-zA-Z0-9]))))))
2024-05-16 22:43:25:798 grammar LogManager.java:25 imported rule: (RULE FLOAT (BLOCK (ALT (? (BLOCK (ALT '-'))) (+ (BLOCK (ALT [0-9]))) [.] (+ (BLOCK (ALT [0-9]))))))
2024-05-16 22:43:25:798 grammar LogManager.java:25 imported rule: (RULE CHAR (BLOCK (ALT '"' (? (BLOCK (ALT [a-zA-Z]))) '"')))
2024-05-16 22:43:25:798 grammar LogManager.java:25 imported rule: (RULE SEMI (BLOCK (ALT ';')))
2024-05-16 22:43:25:806 grammar LogManager.java:25 imported rule: (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip)))
2024-05-16 22:43:25:806 grammar LogManager.java:25 imported rule: (RULE BLOCK_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip)))
2024-05-16 22:43:25:806 grammar LogManager.java:25 imported rule: (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))
2024-05-16 22:43:25:806 grammar LogManager.java:25 Grammar: (COMBINED_GRAMMAR CodeFile (import lexerRulesCV) (RULES (RULE start (BLOCK (ALT INSERT CODE ALLAVE content CLLAVE))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT assignament) (ALT imprimir) (ALT ordencondicional) (ALT while))) (RULE declaraciones (BLOCK (ALT tipo ID (? (BLOCK (ALT EQUALS expr))) SEMI))) (RULE assignament (BLOCK (ALT ID EQUALS expr SEMI) (ALT ID (= com (BLOCK (ALT '+=') (ALT '-=') (ALT '*=') (ALT '/='))) (? (BLOCK (ALT expr))) SEMI) (ALT ID (= com (BLOCK (ALT '--') (ALT '++'))) (? (BLOCK (ALT expr))) SEMI))) (RULE imprimir (BLOCK (ALT PRINT APARENTESIS expr CPARENTESIS SEMI))) (RULE tipo (BLOCK (ALT (BLOCK (ALT 'margit') (ALT 'radahn') (ALT 'godrick'))))) (RULE expr (BLOCK (ALT APARENTESIS expr CPARENTESIS) (ALT expr (= op (BLOCK (ALT '*') (ALT '/'))) expr) (ALT expr (= op (BLOCK (ALT '+') (ALT '-'))) expr) (ALT expr COMA expr) (ALT expr RES expr) (ALT NEGAN expr) (ALT (= op (BLOCK (ALT '+') (ALT '-'))) expr) (ALT (= operator (BLOCK (ALT '<') (ALT '>') (ALT '<=') (ALT '>=')))) (ALT (= operator (BLOCK (ALT '==') (ALT '!=') (ALT '&&') (ALT '||') (ALT 'true') (ALT 'false') (ALT '!true') (ALT '!false')))) (ALT expr (= operator (BLOCK (ALT '<') (ALT '>') (ALT '<=') (ALT '>='))) expr) (ALT expr (= operator (BLOCK (ALT '==') (ALT '!=') (ALT '&&') (ALT '||') (ALT 'true') (ALT 'false') (ALT '!true') (ALT '!false'))) expr) (ALT INT) (ALT ID) (ALT STRING) (ALT FLOAT) (ALT CHAR))) (RULE ordencondicional (BLOCK (ALT condicional (* (BLOCK (ALT condicional_elseif))) (? (BLOCK (ALT condicional_else)))))) (RULE condicional (BLOCK (ALT IF APARENTESIS expr CPARENTESIS ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE condicional_elseif (BLOCK (ALT ELSE condicional))) (RULE condicional_else (BLOCK (ALT ELSE ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE while (BLOCK (ALT WHILE APARENTESIS (BLOCK (ALT expr)) CPARENTESIS ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE RES (BLOCK (ALT '%'))) (RULE COMA (BLOCK (ALT ','))) (RULE NEGAN (BLOCK (ALT '!'))) (RULE APARENTESIS (BLOCK (ALT '('))) (RULE CPARENTESIS (BLOCK (ALT ')'))) (RULE ALLAVE (BLOCK (ALT '{'))) (RULE CLLAVE (BLOCK (ALT '}'))) (RULE EQUALS (BLOCK (ALT '='))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PRINT (BLOCK (ALT 'MostrarMensaje'))) (RULE IF (BLOCK (ALT 'verify'))) (RULE ELSE (BLOCK (ALT 'otherwise'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE COND_MAT (BLOCK (ALT (BLOCK (ALT '<') (ALT '>') (ALT '<=') (ALT '>='))))) (RULE COND_LOG (BLOCK (ALT (BLOCK (ALT '==') (ALT '!=') (ALT 'true') (ALT 'false') (ALT '&&') (ALT '||') (ALT '!true') (ALT '!false'))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE INT (BLOCK (ALT (? (BLOCK (ALT '-'))) (+ (BLOCK (ALT [0-9])))))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z]))) (* (BLOCK (ALT [_a-zA-Z0-9])))))) (RULE FLOAT (BLOCK (ALT (? (BLOCK (ALT '-'))) (+ (BLOCK (ALT [0-9]))) [.] (+ (BLOCK (ALT [0-9])))))) (RULE CHAR (BLOCK (ALT '"' (? (BLOCK (ALT [a-zA-Z]))) '"'))) (RULE SEMI (BLOCK (ALT ';'))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE BLOCK_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-05-16 22:43:25:854 grammar LogManager.java:25 after: (COMBINED_GRAMMAR CodeFile (import lexerRulesCV) (RULES (RULE start (BLOCK (ALT INSERT CODE ALLAVE content CLLAVE))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT assignament) (ALT imprimir) (ALT ordencondicional) (ALT while))) (RULE declaraciones (BLOCK (ALT tipo ID (? (BLOCK (ALT EQUALS expr))) SEMI))) (RULE assignament (BLOCK (ALT ID EQUALS expr SEMI) (ALT ID (= com (SET '+=' '-=' '*=' '/=')) (? (BLOCK (ALT expr))) SEMI) (ALT ID (= com (SET '--' '++')) (? (BLOCK (ALT expr))) SEMI))) (RULE imprimir (BLOCK (ALT PRINT APARENTESIS expr CPARENTESIS SEMI))) (RULE tipo (BLOCK (ALT (SET 'margit' 'radahn' 'godrick')))) (RULE expr (BLOCK (ALT APARENTESIS expr CPARENTESIS) (ALT expr (= op (SET '*' '/')) expr) (ALT expr (= op (SET '+' '-')) expr) (ALT expr COMA expr) (ALT expr RES expr) (ALT NEGAN expr) (ALT (= op (SET '+' '-')) expr) (ALT (= operator (SET '<' '>' '<=' '>='))) (ALT (= operator (SET '==' '!=' '&&' '||' 'true' 'false' '!true' '!false'))) (ALT expr (= operator (SET '<' '>' '<=' '>=')) expr) (ALT expr (= operator (SET '==' '!=' '&&' '||' 'true' 'false' '!true' '!false')) expr) (ALT INT) (ALT ID) (ALT STRING) (ALT FLOAT) (ALT CHAR))) (RULE ordencondicional (BLOCK (ALT condicional (* (BLOCK (ALT condicional_elseif))) (? (BLOCK (ALT condicional_else)))))) (RULE condicional (BLOCK (ALT IF APARENTESIS expr CPARENTESIS ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE condicional_elseif (BLOCK (ALT ELSE condicional))) (RULE condicional_else (BLOCK (ALT ELSE ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE while (BLOCK (ALT WHILE APARENTESIS (BLOCK (ALT expr)) CPARENTESIS ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE RES (BLOCK (ALT '%'))) (RULE COMA (BLOCK (ALT ','))) (RULE NEGAN (BLOCK (ALT '!'))) (RULE APARENTESIS (BLOCK (ALT '('))) (RULE CPARENTESIS (BLOCK (ALT ')'))) (RULE ALLAVE (BLOCK (ALT '{'))) (RULE CLLAVE (BLOCK (ALT '}'))) (RULE EQUALS (BLOCK (ALT '='))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PRINT (BLOCK (ALT 'MostrarMensaje'))) (RULE IF (BLOCK (ALT 'verify'))) (RULE ELSE (BLOCK (ALT 'otherwise'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE COND_MAT (BLOCK (ALT (BLOCK (ALT '<') (ALT '>') (ALT '<=') (ALT '>='))))) (RULE COND_LOG (BLOCK (ALT (BLOCK (ALT '==') (ALT '!=') (ALT 'true') (ALT 'false') (ALT '&&') (ALT '||') (ALT '!true') (ALT '!false'))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE INT (BLOCK (ALT (? (BLOCK (ALT '-'))) (+ (BLOCK (ALT [0-9])))))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z]))) (* (BLOCK (ALT [_a-zA-Z0-9])))))) (RULE FLOAT (BLOCK (ALT (? (BLOCK (ALT '-'))) (+ (BLOCK (ALT [0-9]))) [.] (+ (BLOCK (ALT [0-9])))))) (RULE CHAR (BLOCK (ALT '"' (? (BLOCK (ALT [a-zA-Z]))) '"'))) (RULE SEMI (BLOCK (ALT ';'))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE BLOCK_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-05-16 22:43:25:920 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR CodeFile (import lexerRulesCV) (RULES (RULE start (BLOCK (ALT INSERT CODE ALLAVE content CLLAVE))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT assignament) (ALT imprimir) (ALT ordencondicional) (ALT while))) (RULE declaraciones (BLOCK (ALT tipo ID (? (BLOCK (ALT EQUALS expr))) SEMI))) (RULE assignament (BLOCK (ALT ID EQUALS expr SEMI) (ALT ID (= com (SET '+=' '-=' '*=' '/=')) (? (BLOCK (ALT expr))) SEMI) (ALT ID (= com (SET '--' '++')) (? (BLOCK (ALT expr))) SEMI))) (RULE imprimir (BLOCK (ALT PRINT APARENTESIS expr CPARENTESIS SEMI))) (RULE tipo (BLOCK (ALT (SET 'margit' 'radahn' 'godrick')))) (RULE expr (BLOCK (ALT APARENTESIS expr CPARENTESIS) (ALT expr (= op (SET '*' '/')) expr) (ALT expr (= op (SET '+' '-')) expr) (ALT expr COMA expr) (ALT expr RES expr) (ALT NEGAN expr) (ALT (= op (SET '+' '-')) expr) (ALT (= operator (SET '<' '>' '<=' '>='))) (ALT (= operator (SET '==' '!=' '&&' '||' 'true' 'false' '!true' '!false'))) (ALT expr (= operator (SET '<' '>' '<=' '>=')) expr) (ALT expr (= operator (SET '==' '!=' '&&' '||' 'true' 'false' '!true' '!false')) expr) (ALT INT) (ALT ID) (ALT STRING) (ALT FLOAT) (ALT CHAR))) (RULE ordencondicional (BLOCK (ALT condicional (* (BLOCK (ALT condicional_elseif))) (? (BLOCK (ALT condicional_else)))))) (RULE condicional (BLOCK (ALT IF APARENTESIS expr CPARENTESIS ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE condicional_elseif (BLOCK (ALT ELSE condicional))) (RULE condicional_else (BLOCK (ALT ELSE ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE while (BLOCK (ALT WHILE APARENTESIS (BLOCK (ALT expr)) CPARENTESIS ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE)))))
2024-05-16 22:43:25:920 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR CodeFileLexer (RULES (RULE T__0 (BLOCK (ALT '+='))) (RULE T__1 (BLOCK (ALT '-='))) (RULE T__2 (BLOCK (ALT '*='))) (RULE T__3 (BLOCK (ALT '/='))) (RULE T__4 (BLOCK (ALT '--'))) (RULE T__5 (BLOCK (ALT '++'))) (RULE T__6 (BLOCK (ALT 'margit'))) (RULE T__7 (BLOCK (ALT 'radahn'))) (RULE T__8 (BLOCK (ALT 'godrick'))) (RULE T__9 (BLOCK (ALT '<'))) (RULE T__10 (BLOCK (ALT '>'))) (RULE T__11 (BLOCK (ALT '<='))) (RULE T__12 (BLOCK (ALT '>='))) (RULE T__13 (BLOCK (ALT '=='))) (RULE T__14 (BLOCK (ALT '!='))) (RULE T__15 (BLOCK (ALT '&&'))) (RULE T__16 (BLOCK (ALT '||'))) (RULE T__17 (BLOCK (ALT 'true'))) (RULE T__18 (BLOCK (ALT 'false'))) (RULE T__19 (BLOCK (ALT '!true'))) (RULE T__20 (BLOCK (ALT '!false'))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE RES (BLOCK (ALT '%'))) (RULE COMA (BLOCK (ALT ','))) (RULE NEGAN (BLOCK (ALT '!'))) (RULE APARENTESIS (BLOCK (ALT '('))) (RULE CPARENTESIS (BLOCK (ALT ')'))) (RULE ALLAVE (BLOCK (ALT '{'))) (RULE CLLAVE (BLOCK (ALT '}'))) (RULE EQUALS (BLOCK (ALT '='))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PRINT (BLOCK (ALT 'MostrarMensaje'))) (RULE IF (BLOCK (ALT 'verify'))) (RULE ELSE (BLOCK (ALT 'otherwise'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE COND_MAT (BLOCK (ALT (BLOCK (ALT '<') (ALT '>') (ALT '<=') (ALT '>='))))) (RULE COND_LOG (BLOCK (ALT (BLOCK (ALT '==') (ALT '!=') (ALT 'true') (ALT 'false') (ALT '&&') (ALT '||') (ALT '!true') (ALT '!false'))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE INT (BLOCK (ALT (? (BLOCK (ALT '-'))) (+ (BLOCK (ALT [0-9])))))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z]))) (* (BLOCK (ALT [_a-zA-Z0-9])))))) (RULE FLOAT (BLOCK (ALT (? (BLOCK (ALT '-'))) (+ (BLOCK (ALT [0-9]))) [.] (+ (BLOCK (ALT [0-9])))))) (RULE CHAR (BLOCK (ALT '"' (? (BLOCK (ALT [a-zA-Z]))) '"'))) (RULE SEMI (BLOCK (ALT ';'))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE BLOCK_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-05-16 22:43:26:260 left-recursion LogManager.java:25 expr
    :   ( {} APARENTESIS<tokenIndex=184> expr<tokenIndex=186> CPARENTESIS<tokenIndex=188>  
        | NEGAN<tokenIndex=256> expr<tokenIndex=258,p=11> 
        | op=('+'<tokenIndex=268>|'-'<tokenIndex=270>) expr<tokenIndex=273,p=10> 
        | operator=('<'<tokenIndex=283>|'>'<tokenIndex=285>|'<='<tokenIndex=287>|'>='<tokenIndex=289>)  
        | operator=('=='<tokenIndex=300>|'!='<tokenIndex=302>|'&&'<tokenIndex=304>|'||'<tokenIndex=306>|'true'<tokenIndex=308>|'false'<tokenIndex=310>| '!true'<tokenIndex=313>|'!false'<tokenIndex=315>)   
        | INT<tokenIndex=374>  
        | ID<tokenIndex=381>  
        | STRING<tokenIndex=388>  
        | FLOAT<tokenIndex=395>  
        | CHAR<tokenIndex=402>  
        )
        (
          {this.precpred(this._ctx, 15)}?<p=15> op=('*'<tokenIndex=200> | '/'<tokenIndex=204>) expr<tokenIndex=207,p=16>
                  | {this.precpred(this._ctx, 14)}?<p=14> op=('+'<tokenIndex=220> | '-'<tokenIndex=224>) expr<tokenIndex=227,p=15>
                  | {this.precpred(this._ctx, 13)}?<p=13> COMA<tokenIndex=236> expr<tokenIndex=238,p=14>
                  | {this.precpred(this._ctx, 12)}?<p=12> RES<tokenIndex=247> expr<tokenIndex=249,p=13>
                  | {this.precpred(this._ctx, 7)}?<p=7> operator=('<'<tokenIndex=328>|'>'<tokenIndex=330>|'<='<tokenIndex=332>|'>='<tokenIndex=334>) expr<tokenIndex=337,p=8>
                  | {this.precpred(this._ctx, 6)}?<p=6> operator=('=='<tokenIndex=349>|'!='<tokenIndex=351>|'&&'<tokenIndex=353>|'||'<tokenIndex=355>|'true'<tokenIndex=357>|'false'<tokenIndex=359>| '!true'<tokenIndex=362>|'!false'<tokenIndex=364>) expr<tokenIndex=367,p=7>
        )*
    ;
2024-05-16 22:43:26:293 grammar LogManager.java:25 added: (RULE expr (BLOCK (ALT (BLOCK (ALT {} (APARENTESIS (ELEMENT_OPTIONS (= tokenIndex 184))) (expr (ELEMENT_OPTIONS (= tokenIndex 186))) (CPARENTESIS (ELEMENT_OPTIONS (= tokenIndex 188)))) (ALT (NEGAN (ELEMENT_OPTIONS (= tokenIndex 256))) (expr (ELEMENT_OPTIONS (= tokenIndex 258) (= p 11)))) (ALT (= op (SET ('+' (ELEMENT_OPTIONS (= tokenIndex 268))) ('-' (ELEMENT_OPTIONS (= tokenIndex 270))))) (expr (ELEMENT_OPTIONS (= tokenIndex 273) (= p 10)))) (ALT (= operator (SET ('<' (ELEMENT_OPTIONS (= tokenIndex 283))) ('>' (ELEMENT_OPTIONS (= tokenIndex 285))) ('<=' (ELEMENT_OPTIONS (= tokenIndex 287))) ('>=' (ELEMENT_OPTIONS (= tokenIndex 289)))))) (ALT (= operator (SET ('==' (ELEMENT_OPTIONS (= tokenIndex 300))) ('!=' (ELEMENT_OPTIONS (= tokenIndex 302))) ('&&' (ELEMENT_OPTIONS (= tokenIndex 304))) ('||' (ELEMENT_OPTIONS (= tokenIndex 306))) ('true' (ELEMENT_OPTIONS (= tokenIndex 308))) ('false' (ELEMENT_OPTIONS (= tokenIndex 310))) ('!true' (ELEMENT_OPTIONS (= tokenIndex 313))) ('!false' (ELEMENT_OPTIONS (= tokenIndex 315)))))) (ALT (INT (ELEMENT_OPTIONS (= tokenIndex 374)))) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 381)))) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 388)))) (ALT (FLOAT (ELEMENT_OPTIONS (= tokenIndex 395)))) (ALT (CHAR (ELEMENT_OPTIONS (= tokenIndex 402))))) (* (BLOCK (ALT ({this.precpred(this._ctx, 15)}? (ELEMENT_OPTIONS (= p 15))) (= op (SET ('*' (ELEMENT_OPTIONS (= tokenIndex 200))) ('/' (ELEMENT_OPTIONS (= tokenIndex 204))))) (expr (ELEMENT_OPTIONS (= tokenIndex 207) (= p 16)))) (ALT ({this.precpred(this._ctx, 14)}? (ELEMENT_OPTIONS (= p 14))) (= op (SET ('+' (ELEMENT_OPTIONS (= tokenIndex 220))) ('-' (ELEMENT_OPTIONS (= tokenIndex 224))))) (expr (ELEMENT_OPTIONS (= tokenIndex 227) (= p 15)))) (ALT ({this.precpred(this._ctx, 13)}? (ELEMENT_OPTIONS (= p 13))) (COMA (ELEMENT_OPTIONS (= tokenIndex 236))) (expr (ELEMENT_OPTIONS (= tokenIndex 238) (= p 14)))) (ALT ({this.precpred(this._ctx, 12)}? (ELEMENT_OPTIONS (= p 12))) (RES (ELEMENT_OPTIONS (= tokenIndex 247))) (expr (ELEMENT_OPTIONS (= tokenIndex 249) (= p 13)))) (ALT ({this.precpred(this._ctx, 7)}? (ELEMENT_OPTIONS (= p 7))) (= operator (SET ('<' (ELEMENT_OPTIONS (= tokenIndex 328))) ('>' (ELEMENT_OPTIONS (= tokenIndex 330))) ('<=' (ELEMENT_OPTIONS (= tokenIndex 332))) ('>=' (ELEMENT_OPTIONS (= tokenIndex 334))))) (expr (ELEMENT_OPTIONS (= tokenIndex 337) (= p 8)))) (ALT ({this.precpred(this._ctx, 6)}? (ELEMENT_OPTIONS (= p 6))) (= operator (SET ('==' (ELEMENT_OPTIONS (= tokenIndex 349))) ('!=' (ELEMENT_OPTIONS (= tokenIndex 351))) ('&&' (ELEMENT_OPTIONS (= tokenIndex 353))) ('||' (ELEMENT_OPTIONS (= tokenIndex 355))) ('true' (ELEMENT_OPTIONS (= tokenIndex 357))) ('false' (ELEMENT_OPTIONS (= tokenIndex 359))) ('!true' (ELEMENT_OPTIONS (= tokenIndex 362))) ('!false' (ELEMENT_OPTIONS (= tokenIndex 364))))) (expr (ELEMENT_OPTIONS (= tokenIndex 367) (= p 7)))))))))
2024-05-16 22:43:26:310 semantics LogManager.java:25 tokens={EOF=-1, T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, T__17=18, T__18=19, T__19=20, T__20=21, INSERT=22, CODE=23, RES=24, COMA=25, NEGAN=26, APARENTESIS=27, CPARENTESIS=28, ALLAVE=29, CLLAVE=30, EQUALS=31, MUL=32, DIV=33, ADD=34, SUB=35, PRINT=36, IF=37, ELSE=38, WHILE=39, COND_MAT=40, COND_LOG=41, STRING=42, INT=43, ID=44, FLOAT=45, CHAR=46, SEMI=47, LINE_COMMENT=48, BLOCK_COMMENT=49, WS=50}
2024-05-16 22:43:26:310 semantics LogManager.java:25 strings={'+='=1, '-='=2, '*='=3, '/='=4, '--'=5, '++'=6, 'margit'=7, 'radahn'=8, 'godrick'=9, '<'=10, '>'=11, '<='=12, '>='=13, '=='=14, '!='=15, '&&'=16, '||'=17, 'true'=18, 'false'=19, '!true'=20, '!false'=21, 'iniciar'=22, 'codigo'=23, '%'=24, ','=25, '!'=26, '('=27, ')'=28, '{'=29, '}'=30, '='=31, '*'=32, '/'=33, '+'=34, '-'=35, 'MostrarMensaje'=36, 'verify'=37, 'otherwise'=38, 'while'=39, ';'=47}
2024-05-16 22:43:26:342 LL1 LogManager.java:25 
DECISION 0 in rule content
2024-05-16 22:43:26:342 LL1 LogManager.java:25 LL(1)? false
2024-05-16 22:43:26:342 LL1 LogManager.java:25 
DECISION 1 in rule expresiones
2024-05-16 22:43:26:342 LL1 LogManager.java:25 look=[{7..9}, 44, 36, 37, 39]
2024-05-16 22:43:26:342 LL1 LogManager.java:25 LL(1)? true
2024-05-16 22:43:26:342 LL1 LogManager.java:25 
DECISION 2 in rule declaraciones
2024-05-16 22:43:26:342 LL1 LogManager.java:25 look=[31, 47]
2024-05-16 22:43:26:342 LL1 LogManager.java:25 LL(1)? true
2024-05-16 22:43:26:342 LL1 LogManager.java:25 
DECISION 3 in rule assignament
2024-05-16 22:43:26:342 LL1 LogManager.java:25 look=[{10..21, 26..27, 34..35, 42..46}, 47]
2024-05-16 22:43:26:342 LL1 LogManager.java:25 LL(1)? true
2024-05-16 22:43:26:342 LL1 LogManager.java:25 
DECISION 4 in rule assignament
2024-05-16 22:43:26:342 LL1 LogManager.java:25 look=[{10..21, 26..27, 34..35, 42..46}, 47]
2024-05-16 22:43:26:342 LL1 LogManager.java:25 LL(1)? true
2024-05-16 22:43:26:342 LL1 LogManager.java:25 
DECISION 5 in rule assignament
2024-05-16 22:43:26:342 LL1 LogManager.java:25 look=[44, 44, 44]
2024-05-16 22:43:26:342 LL1 LogManager.java:25 LL(1)? false
2024-05-16 22:43:26:342 LL1 LogManager.java:25 
DECISION 6 in rule expr
2024-05-16 22:43:26:342 LL1 LogManager.java:25 look=[27, 26, {34..35}, {10..13}, {14..21}, 43, 44, 42, 45, 46]
2024-05-16 22:43:26:348 LL1 LogManager.java:25 LL(1)? true
2024-05-16 22:43:26:348 LL1 LogManager.java:25 
DECISION 7 in rule expr
2024-05-16 22:43:26:348 LL1 LogManager.java:25 look=[null, null, null, null, null, null]
2024-05-16 22:43:26:348 LL1 LogManager.java:25 LL(1)? false
2024-05-16 22:43:26:348 LL1 LogManager.java:25 
DECISION 8 in rule expr
2024-05-16 22:43:26:348 LL1 LogManager.java:25 look=[null, null]
2024-05-16 22:43:26:348 LL1 LogManager.java:25 LL(1)? false
2024-05-16 22:43:26:348 LL1 LogManager.java:25 
DECISION 9 in rule ordencondicional
2024-05-16 22:43:26:348 LL1 LogManager.java:25 look=[38, {7..9, 30, 36..39, 44}]
2024-05-16 22:43:26:348 LL1 LogManager.java:25 LL(1)? false
2024-05-16 22:43:26:348 LL1 LogManager.java:25 
DECISION 10 in rule ordencondicional
2024-05-16 22:43:26:351 LL1 LogManager.java:25 look=[38, {7..9, 30, 36..37, 39, 44}]
2024-05-16 22:43:26:351 LL1 LogManager.java:25 LL(1)? true
2024-05-16 22:43:26:351 LL1 LogManager.java:25 
DECISION 11 in rule condicional
2024-05-16 22:43:26:351 LL1 LogManager.java:25 look=[{7..9, 36..37, 39, 44}, 30]
2024-05-16 22:43:26:351 LL1 LogManager.java:25 LL(1)? true
2024-05-16 22:43:26:351 LL1 LogManager.java:25 
DECISION 12 in rule condicional_else
2024-05-16 22:43:26:351 LL1 LogManager.java:25 look=[{7..9, 36..37, 39, 44}, 30]
2024-05-16 22:43:26:351 LL1 LogManager.java:25 LL(1)? true
2024-05-16 22:43:26:351 LL1 LogManager.java:25 
DECISION 13 in rule while
2024-05-16 22:43:26:351 LL1 LogManager.java:25 look=[{7..9, 36..37, 39, 44}, 30]
2024-05-16 22:43:26:351 LL1 LogManager.java:25 LL(1)? true
2024-05-16 22:43:26:523 action-translator LogManager.java:25 translate 
2024-05-16 22:43:26:531 action-translator LogManager.java:25 translate this.precpred(this._ctx, 15)
2024-05-16 22:43:26:531 action-translator LogManager.java:25 translate this.precpred(this._ctx, 14)
2024-05-16 22:43:26:531 action-translator LogManager.java:25 translate this.precpred(this._ctx, 13)
2024-05-16 22:43:26:534 action-translator LogManager.java:25 translate this.precpred(this._ctx, 12)
2024-05-16 22:43:26:534 action-translator LogManager.java:25 translate this.precpred(this._ctx, 7)
2024-05-16 22:43:26:534 action-translator LogManager.java:25 translate this.precpred(this._ctx, 6)
2024-05-16 22:43:26:580 action-translator LogManager.java:25 translate this.precpred(this._ctx, 15)
2024-05-16 22:43:26:580 action-translator LogManager.java:25 translate this.precpred(this._ctx, 14)
2024-05-16 22:43:26:580 action-translator LogManager.java:25 translate this.precpred(this._ctx, 13)
2024-05-16 22:43:26:580 action-translator LogManager.java:25 translate this.precpred(this._ctx, 12)
2024-05-16 22:43:26:580 action-translator LogManager.java:25 translate this.precpred(this._ctx, 7)
2024-05-16 22:43:26:580 action-translator LogManager.java:25 translate this.precpred(this._ctx, 6)
