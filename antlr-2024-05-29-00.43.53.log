2024-05-29 00:43:51:709 grammar LogManager.java:25 load lexerRulesCV from ./grammar/CodeFile.g4
2024-05-29 00:43:51:718 grammar LogManager.java:25 before: (COMBINED_GRAMMAR CodeFile (import lexerRulesCV) (RULES (RULE start (BLOCK (ALT INSERT CODE ALLAVE content CLLAVE))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT assignament) (ALT imprimir) (ALT ordencondicional) (ALT while))) (RULE declaraciones (BLOCK (ALT tipo ID (? (BLOCK (ALT EQUALS expr))) SEMI))) (RULE assignament (BLOCK (ALT ID EQUALS expr SEMI) (ALT ID (= com (BLOCK (ALT '+=') (ALT '-=') (ALT '*=') (ALT '/=') (ALT '%='))) (? (BLOCK (ALT expr))) SEMI) (ALT ID (= com (BLOCK (ALT '--') (ALT '++'))) (? (BLOCK (ALT expr))) SEMI))) (RULE imprimir (BLOCK (ALT PRINT APARENTESIS expr CPARENTESIS SEMI))) (RULE tipo (BLOCK (ALT (BLOCK (ALT 'margit') (ALT 'radahn') (ALT 'godrick'))))) (RULE expr (BLOCK (ALT APARENTESIS expr CPARENTESIS) (ALT expr (= op (BLOCK (ALT MUL) (ALT DIV) (ALT MOD))) expr) (ALT expr (= op (BLOCK (ALT ADD) (ALT SUB))) expr) (ALT expr COMA expr) (ALT NEGAN expr) (ALT (= op (BLOCK (ALT '+') (ALT '-'))) expr) (ALT (= operator (BLOCK (ALT '<') (ALT '>') (ALT '<=') (ALT '>=')))) (ALT (= operator (BLOCK (ALT '==') (ALT '!=') (ALT '&&') (ALT '||') (ALT 'true') (ALT 'false') (ALT '!true') (ALT '!false')))) (ALT expr (= operator (BLOCK (ALT '<') (ALT '>') (ALT '<=') (ALT '>='))) expr) (ALT expr (= operator (BLOCK (ALT '==') (ALT '!=') (ALT '&&') (ALT '||') (ALT 'true') (ALT 'false') (ALT '!true') (ALT '!false'))) expr) (ALT INT) (ALT ID) (ALT STRING) (ALT FLOAT) (ALT CHAR))) (RULE ordencondicional (BLOCK (ALT condicional (* (BLOCK (ALT condicional_elseif))) (? (BLOCK (ALT condicional_else)))))) (RULE condicional (BLOCK (ALT IF APARENTESIS expr CPARENTESIS ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE condicional_elseif (BLOCK (ALT ELSE condicional))) (RULE condicional_else (BLOCK (ALT ELSE ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE while (BLOCK (ALT WHILE APARENTESIS (BLOCK (ALT expr)) CPARENTESIS ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE MOD (BLOCK (ALT '%'))) (RULE COMA (BLOCK (ALT ','))) (RULE NEGAN (BLOCK (ALT '!'))) (RULE AND (BLOCK (ALT '&&'))) (RULE OR (BLOCK (ALT '||')))))
2024-05-29 00:43:51:722 grammar LogManager.java:25 imported actions: []
2024-05-29 00:43:51:722 grammar LogManager.java:25 imported rule: (RULE APARENTESIS (BLOCK (ALT '(')))
2024-05-29 00:43:51:722 grammar LogManager.java:25 imported rule: (RULE CPARENTESIS (BLOCK (ALT ')')))
2024-05-29 00:43:51:722 grammar LogManager.java:25 imported rule: (RULE ALLAVE (BLOCK (ALT '{')))
2024-05-29 00:43:51:722 grammar LogManager.java:25 imported rule: (RULE CLLAVE (BLOCK (ALT '}')))
2024-05-29 00:43:51:722 grammar LogManager.java:25 imported rule: (RULE EQUALS (BLOCK (ALT '=')))
2024-05-29 00:43:51:722 grammar LogManager.java:25 imported rule: (RULE MUL (BLOCK (ALT '*')))
2024-05-29 00:43:51:722 grammar LogManager.java:25 imported rule: (RULE DIV (BLOCK (ALT '/')))
2024-05-29 00:43:51:722 grammar LogManager.java:25 imported rule: (RULE ADD (BLOCK (ALT '+')))
2024-05-29 00:43:51:722 grammar LogManager.java:25 imported rule: (RULE SUB (BLOCK (ALT '-')))
2024-05-29 00:43:51:722 grammar LogManager.java:25 imported rule: (RULE PRINT (BLOCK (ALT 'MostrarMensaje')))
2024-05-29 00:43:51:722 grammar LogManager.java:25 imported rule: (RULE IF (BLOCK (ALT 'verificar')))
2024-05-29 00:43:51:722 grammar LogManager.java:25 imported rule: (RULE ELSE (BLOCK (ALT 'contrario')))
2024-05-29 00:43:51:722 grammar LogManager.java:25 imported rule: (RULE WHILE (BLOCK (ALT 'repetir')))
2024-05-29 00:43:51:722 grammar LogManager.java:25 imported rule: (RULE COND_MAT (BLOCK (ALT (BLOCK (ALT '<') (ALT '>') (ALT '<=') (ALT '>=')))))
2024-05-29 00:43:51:722 grammar LogManager.java:25 imported rule: (RULE COND_LOG (BLOCK (ALT (BLOCK (ALT '==') (ALT '!=') (ALT 'true') (ALT 'false') (ALT '&&') (ALT '||') (ALT '!true') (ALT '!false')))))
2024-05-29 00:43:51:722 grammar LogManager.java:25 imported rule: (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"')))
2024-05-29 00:43:51:722 grammar LogManager.java:25 imported rule: (RULE INT (BLOCK (ALT (? (BLOCK (ALT '-'))) (+ (BLOCK (ALT [0-9]))))))
2024-05-29 00:43:51:722 grammar LogManager.java:25 imported rule: (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z]))) (* (BLOCK (ALT [_a-zA-Z0-9]))))))
2024-05-29 00:43:51:722 grammar LogManager.java:25 imported rule: (RULE FLOAT (BLOCK (ALT (? (BLOCK (ALT '-'))) (+ (BLOCK (ALT [0-9]))) [.] (+ (BLOCK (ALT [0-9]))))))
2024-05-29 00:43:51:722 grammar LogManager.java:25 imported rule: (RULE CHAR (BLOCK (ALT '"' (? (BLOCK (ALT [a-zA-Z]))) '"')))
2024-05-29 00:43:51:722 grammar LogManager.java:25 imported rule: (RULE SEMI (BLOCK (ALT ';')))
2024-05-29 00:43:51:722 grammar LogManager.java:25 imported rule: (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip)))
2024-05-29 00:43:51:722 grammar LogManager.java:25 imported rule: (RULE BLOCK_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip)))
2024-05-29 00:43:51:722 grammar LogManager.java:25 imported rule: (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))
2024-05-29 00:43:51:728 grammar LogManager.java:25 Grammar: (COMBINED_GRAMMAR CodeFile (import lexerRulesCV) (RULES (RULE start (BLOCK (ALT INSERT CODE ALLAVE content CLLAVE))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT assignament) (ALT imprimir) (ALT ordencondicional) (ALT while))) (RULE declaraciones (BLOCK (ALT tipo ID (? (BLOCK (ALT EQUALS expr))) SEMI))) (RULE assignament (BLOCK (ALT ID EQUALS expr SEMI) (ALT ID (= com (BLOCK (ALT '+=') (ALT '-=') (ALT '*=') (ALT '/=') (ALT '%='))) (? (BLOCK (ALT expr))) SEMI) (ALT ID (= com (BLOCK (ALT '--') (ALT '++'))) (? (BLOCK (ALT expr))) SEMI))) (RULE imprimir (BLOCK (ALT PRINT APARENTESIS expr CPARENTESIS SEMI))) (RULE tipo (BLOCK (ALT (BLOCK (ALT 'margit') (ALT 'radahn') (ALT 'godrick'))))) (RULE expr (BLOCK (ALT APARENTESIS expr CPARENTESIS) (ALT expr (= op (BLOCK (ALT MUL) (ALT DIV) (ALT MOD))) expr) (ALT expr (= op (BLOCK (ALT ADD) (ALT SUB))) expr) (ALT expr COMA expr) (ALT NEGAN expr) (ALT (= op (BLOCK (ALT '+') (ALT '-'))) expr) (ALT (= operator (BLOCK (ALT '<') (ALT '>') (ALT '<=') (ALT '>=')))) (ALT (= operator (BLOCK (ALT '==') (ALT '!=') (ALT '&&') (ALT '||') (ALT 'true') (ALT 'false') (ALT '!true') (ALT '!false')))) (ALT expr (= operator (BLOCK (ALT '<') (ALT '>') (ALT '<=') (ALT '>='))) expr) (ALT expr (= operator (BLOCK (ALT '==') (ALT '!=') (ALT '&&') (ALT '||') (ALT 'true') (ALT 'false') (ALT '!true') (ALT '!false'))) expr) (ALT INT) (ALT ID) (ALT STRING) (ALT FLOAT) (ALT CHAR))) (RULE ordencondicional (BLOCK (ALT condicional (* (BLOCK (ALT condicional_elseif))) (? (BLOCK (ALT condicional_else)))))) (RULE condicional (BLOCK (ALT IF APARENTESIS expr CPARENTESIS ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE condicional_elseif (BLOCK (ALT ELSE condicional))) (RULE condicional_else (BLOCK (ALT ELSE ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE while (BLOCK (ALT WHILE APARENTESIS (BLOCK (ALT expr)) CPARENTESIS ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE MOD (BLOCK (ALT '%'))) (RULE COMA (BLOCK (ALT ','))) (RULE NEGAN (BLOCK (ALT '!'))) (RULE AND (BLOCK (ALT '&&'))) (RULE OR (BLOCK (ALT '||'))) (RULE APARENTESIS (BLOCK (ALT '('))) (RULE CPARENTESIS (BLOCK (ALT ')'))) (RULE ALLAVE (BLOCK (ALT '{'))) (RULE CLLAVE (BLOCK (ALT '}'))) (RULE EQUALS (BLOCK (ALT '='))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PRINT (BLOCK (ALT 'MostrarMensaje'))) (RULE IF (BLOCK (ALT 'verificar'))) (RULE ELSE (BLOCK (ALT 'contrario'))) (RULE WHILE (BLOCK (ALT 'repetir'))) (RULE COND_MAT (BLOCK (ALT (BLOCK (ALT '<') (ALT '>') (ALT '<=') (ALT '>='))))) (RULE COND_LOG (BLOCK (ALT (BLOCK (ALT '==') (ALT '!=') (ALT 'true') (ALT 'false') (ALT '&&') (ALT '||') (ALT '!true') (ALT '!false'))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE INT (BLOCK (ALT (? (BLOCK (ALT '-'))) (+ (BLOCK (ALT [0-9])))))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z]))) (* (BLOCK (ALT [_a-zA-Z0-9])))))) (RULE FLOAT (BLOCK (ALT (? (BLOCK (ALT '-'))) (+ (BLOCK (ALT [0-9]))) [.] (+ (BLOCK (ALT [0-9])))))) (RULE CHAR (BLOCK (ALT '"' (? (BLOCK (ALT [a-zA-Z]))) '"'))) (RULE SEMI (BLOCK (ALT ';'))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE BLOCK_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-05-29 00:43:51:811 grammar LogManager.java:25 after: (COMBINED_GRAMMAR CodeFile (import lexerRulesCV) (RULES (RULE start (BLOCK (ALT INSERT CODE ALLAVE content CLLAVE))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT assignament) (ALT imprimir) (ALT ordencondicional) (ALT while))) (RULE declaraciones (BLOCK (ALT tipo ID (? (BLOCK (ALT EQUALS expr))) SEMI))) (RULE assignament (BLOCK (ALT ID EQUALS expr SEMI) (ALT ID (= com (SET '+=' '-=' '*=' '/=' '%=')) (? (BLOCK (ALT expr))) SEMI) (ALT ID (= com (SET '--' '++')) (? (BLOCK (ALT expr))) SEMI))) (RULE imprimir (BLOCK (ALT PRINT APARENTESIS expr CPARENTESIS SEMI))) (RULE tipo (BLOCK (ALT (SET 'margit' 'radahn' 'godrick')))) (RULE expr (BLOCK (ALT APARENTESIS expr CPARENTESIS) (ALT expr (= op (SET MUL DIV MOD)) expr) (ALT expr (= op (SET ADD SUB)) expr) (ALT expr COMA expr) (ALT NEGAN expr) (ALT (= op (SET '+' '-')) expr) (ALT (= operator (SET '<' '>' '<=' '>='))) (ALT (= operator (SET '==' '!=' '&&' '||' 'true' 'false' '!true' '!false'))) (ALT expr (= operator (SET '<' '>' '<=' '>=')) expr) (ALT expr (= operator (SET '==' '!=' '&&' '||' 'true' 'false' '!true' '!false')) expr) (ALT INT) (ALT ID) (ALT STRING) (ALT FLOAT) (ALT CHAR))) (RULE ordencondicional (BLOCK (ALT condicional (* (BLOCK (ALT condicional_elseif))) (? (BLOCK (ALT condicional_else)))))) (RULE condicional (BLOCK (ALT IF APARENTESIS expr CPARENTESIS ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE condicional_elseif (BLOCK (ALT ELSE condicional))) (RULE condicional_else (BLOCK (ALT ELSE ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE while (BLOCK (ALT WHILE APARENTESIS (BLOCK (ALT expr)) CPARENTESIS ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE MOD (BLOCK (ALT '%'))) (RULE COMA (BLOCK (ALT ','))) (RULE NEGAN (BLOCK (ALT '!'))) (RULE AND (BLOCK (ALT '&&'))) (RULE OR (BLOCK (ALT '||'))) (RULE APARENTESIS (BLOCK (ALT '('))) (RULE CPARENTESIS (BLOCK (ALT ')'))) (RULE ALLAVE (BLOCK (ALT '{'))) (RULE CLLAVE (BLOCK (ALT '}'))) (RULE EQUALS (BLOCK (ALT '='))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PRINT (BLOCK (ALT 'MostrarMensaje'))) (RULE IF (BLOCK (ALT 'verificar'))) (RULE ELSE (BLOCK (ALT 'contrario'))) (RULE WHILE (BLOCK (ALT 'repetir'))) (RULE COND_MAT (BLOCK (ALT (BLOCK (ALT '<') (ALT '>') (ALT '<=') (ALT '>='))))) (RULE COND_LOG (BLOCK (ALT (BLOCK (ALT '==') (ALT '!=') (ALT 'true') (ALT 'false') (ALT '&&') (ALT '||') (ALT '!true') (ALT '!false'))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE INT (BLOCK (ALT (? (BLOCK (ALT '-'))) (+ (BLOCK (ALT [0-9])))))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z]))) (* (BLOCK (ALT [_a-zA-Z0-9])))))) (RULE FLOAT (BLOCK (ALT (? (BLOCK (ALT '-'))) (+ (BLOCK (ALT [0-9]))) [.] (+ (BLOCK (ALT [0-9])))))) (RULE CHAR (BLOCK (ALT '"' (? (BLOCK (ALT [a-zA-Z]))) '"'))) (RULE SEMI (BLOCK (ALT ';'))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE BLOCK_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-05-29 00:43:51:876 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR CodeFile (import lexerRulesCV) (RULES (RULE start (BLOCK (ALT INSERT CODE ALLAVE content CLLAVE))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT assignament) (ALT imprimir) (ALT ordencondicional) (ALT while))) (RULE declaraciones (BLOCK (ALT tipo ID (? (BLOCK (ALT EQUALS expr))) SEMI))) (RULE assignament (BLOCK (ALT ID EQUALS expr SEMI) (ALT ID (= com (SET '+=' '-=' '*=' '/=' '%=')) (? (BLOCK (ALT expr))) SEMI) (ALT ID (= com (SET '--' '++')) (? (BLOCK (ALT expr))) SEMI))) (RULE imprimir (BLOCK (ALT PRINT APARENTESIS expr CPARENTESIS SEMI))) (RULE tipo (BLOCK (ALT (SET 'margit' 'radahn' 'godrick')))) (RULE expr (BLOCK (ALT APARENTESIS expr CPARENTESIS) (ALT expr (= op (SET MUL DIV MOD)) expr) (ALT expr (= op (SET ADD SUB)) expr) (ALT expr COMA expr) (ALT NEGAN expr) (ALT (= op (SET '+' '-')) expr) (ALT (= operator (SET '<' '>' '<=' '>='))) (ALT (= operator (SET '==' '!=' '&&' '||' 'true' 'false' '!true' '!false'))) (ALT expr (= operator (SET '<' '>' '<=' '>=')) expr) (ALT expr (= operator (SET '==' '!=' '&&' '||' 'true' 'false' '!true' '!false')) expr) (ALT INT) (ALT ID) (ALT STRING) (ALT FLOAT) (ALT CHAR))) (RULE ordencondicional (BLOCK (ALT condicional (* (BLOCK (ALT condicional_elseif))) (? (BLOCK (ALT condicional_else)))))) (RULE condicional (BLOCK (ALT IF APARENTESIS expr CPARENTESIS ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE condicional_elseif (BLOCK (ALT ELSE condicional))) (RULE condicional_else (BLOCK (ALT ELSE ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE))) (RULE while (BLOCK (ALT WHILE APARENTESIS (BLOCK (ALT expr)) CPARENTESIS ALLAVE (* (BLOCK (ALT expresiones))) CLLAVE)))))
2024-05-29 00:43:51:877 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR CodeFileLexer (RULES (RULE T__0 (BLOCK (ALT '+='))) (RULE T__1 (BLOCK (ALT '-='))) (RULE T__2 (BLOCK (ALT '*='))) (RULE T__3 (BLOCK (ALT '/='))) (RULE T__4 (BLOCK (ALT '%='))) (RULE T__5 (BLOCK (ALT '--'))) (RULE T__6 (BLOCK (ALT '++'))) (RULE T__7 (BLOCK (ALT 'margit'))) (RULE T__8 (BLOCK (ALT 'radahn'))) (RULE T__9 (BLOCK (ALT 'godrick'))) (RULE T__10 (BLOCK (ALT '<'))) (RULE T__11 (BLOCK (ALT '>'))) (RULE T__12 (BLOCK (ALT '<='))) (RULE T__13 (BLOCK (ALT '>='))) (RULE T__14 (BLOCK (ALT '=='))) (RULE T__15 (BLOCK (ALT '!='))) (RULE T__16 (BLOCK (ALT 'true'))) (RULE T__17 (BLOCK (ALT 'false'))) (RULE T__18 (BLOCK (ALT '!true'))) (RULE T__19 (BLOCK (ALT '!false'))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE MOD (BLOCK (ALT '%'))) (RULE COMA (BLOCK (ALT ','))) (RULE NEGAN (BLOCK (ALT '!'))) (RULE AND (BLOCK (ALT '&&'))) (RULE OR (BLOCK (ALT '||'))) (RULE APARENTESIS (BLOCK (ALT '('))) (RULE CPARENTESIS (BLOCK (ALT ')'))) (RULE ALLAVE (BLOCK (ALT '{'))) (RULE CLLAVE (BLOCK (ALT '}'))) (RULE EQUALS (BLOCK (ALT '='))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PRINT (BLOCK (ALT 'MostrarMensaje'))) (RULE IF (BLOCK (ALT 'verificar'))) (RULE ELSE (BLOCK (ALT 'contrario'))) (RULE WHILE (BLOCK (ALT 'repetir'))) (RULE COND_MAT (BLOCK (ALT (BLOCK (ALT '<') (ALT '>') (ALT '<=') (ALT '>='))))) (RULE COND_LOG (BLOCK (ALT (BLOCK (ALT '==') (ALT '!=') (ALT 'true') (ALT 'false') (ALT '&&') (ALT '||') (ALT '!true') (ALT '!false'))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE INT (BLOCK (ALT (? (BLOCK (ALT '-'))) (+ (BLOCK (ALT [0-9])))))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z]))) (* (BLOCK (ALT [_a-zA-Z0-9])))))) (RULE FLOAT (BLOCK (ALT (? (BLOCK (ALT '-'))) (+ (BLOCK (ALT [0-9]))) [.] (+ (BLOCK (ALT [0-9])))))) (RULE CHAR (BLOCK (ALT '"' (? (BLOCK (ALT [a-zA-Z]))) '"'))) (RULE SEMI (BLOCK (ALT ';'))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE BLOCK_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-05-29 00:43:52:429 left-recursion LogManager.java:25 expr
    :   ( {} APARENTESIS<tokenIndex=186> expr<tokenIndex=188> CPARENTESIS<tokenIndex=190>  
        | NEGAN<tokenIndex=251> expr<tokenIndex=253,p=11> 
        | op=('+'<tokenIndex=263>|'-'<tokenIndex=265>) expr<tokenIndex=268,p=10> 
        | operator=('<'<tokenIndex=278>|'>'<tokenIndex=280>|'<='<tokenIndex=282>|'>='<tokenIndex=284>)  
        | operator=('=='<tokenIndex=295>|'!='<tokenIndex=297>|'&&'<tokenIndex=299>|'||'<tokenIndex=301>|'true'<tokenIndex=303>|'false'<tokenIndex=305>| '!true'<tokenIndex=308>|'!false'<tokenIndex=310>)   
        | INT<tokenIndex=369>  
        | ID<tokenIndex=376>  
        | STRING<tokenIndex=383>  
        | FLOAT<tokenIndex=390>  
        | CHAR<tokenIndex=397>  
        )
        (
          {this.precpred(this._ctx, 14)}?<p=14> op=(MUL<tokenIndex=202> | DIV<tokenIndex=206> | MOD<tokenIndex=210>) expr<tokenIndex=213,p=15>
                  | {this.precpred(this._ctx, 13)}?<p=13> op=(ADD<tokenIndex=226> | SUB<tokenIndex=230>) expr<tokenIndex=233,p=14>
                  | {this.precpred(this._ctx, 12)}?<p=12> COMA<tokenIndex=242> expr<tokenIndex=244,p=13>
                  | {this.precpred(this._ctx, 7)}?<p=7> operator=('<'<tokenIndex=323>|'>'<tokenIndex=325>|'<='<tokenIndex=327>|'>='<tokenIndex=329>) expr<tokenIndex=332,p=8>
                  | {this.precpred(this._ctx, 6)}?<p=6> operator=('=='<tokenIndex=344>|'!='<tokenIndex=346>|'&&'<tokenIndex=348>|'||'<tokenIndex=350>|'true'<tokenIndex=352>|'false'<tokenIndex=354>| '!true'<tokenIndex=357>|'!false'<tokenIndex=359>) expr<tokenIndex=362,p=7>
        )*
    ;
2024-05-29 00:43:52:486 grammar LogManager.java:25 added: (RULE expr (BLOCK (ALT (BLOCK (ALT {} (APARENTESIS (ELEMENT_OPTIONS (= tokenIndex 186))) (expr (ELEMENT_OPTIONS (= tokenIndex 188))) (CPARENTESIS (ELEMENT_OPTIONS (= tokenIndex 190)))) (ALT (NEGAN (ELEMENT_OPTIONS (= tokenIndex 251))) (expr (ELEMENT_OPTIONS (= tokenIndex 253) (= p 11)))) (ALT (= op (SET ('+' (ELEMENT_OPTIONS (= tokenIndex 263))) ('-' (ELEMENT_OPTIONS (= tokenIndex 265))))) (expr (ELEMENT_OPTIONS (= tokenIndex 268) (= p 10)))) (ALT (= operator (SET ('<' (ELEMENT_OPTIONS (= tokenIndex 278))) ('>' (ELEMENT_OPTIONS (= tokenIndex 280))) ('<=' (ELEMENT_OPTIONS (= tokenIndex 282))) ('>=' (ELEMENT_OPTIONS (= tokenIndex 284)))))) (ALT (= operator (SET ('==' (ELEMENT_OPTIONS (= tokenIndex 295))) ('!=' (ELEMENT_OPTIONS (= tokenIndex 297))) ('&&' (ELEMENT_OPTIONS (= tokenIndex 299))) ('||' (ELEMENT_OPTIONS (= tokenIndex 301))) ('true' (ELEMENT_OPTIONS (= tokenIndex 303))) ('false' (ELEMENT_OPTIONS (= tokenIndex 305))) ('!true' (ELEMENT_OPTIONS (= tokenIndex 308))) ('!false' (ELEMENT_OPTIONS (= tokenIndex 310)))))) (ALT (INT (ELEMENT_OPTIONS (= tokenIndex 369)))) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 376)))) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 383)))) (ALT (FLOAT (ELEMENT_OPTIONS (= tokenIndex 390)))) (ALT (CHAR (ELEMENT_OPTIONS (= tokenIndex 397))))) (* (BLOCK (ALT ({this.precpred(this._ctx, 14)}? (ELEMENT_OPTIONS (= p 14))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 202))) (DIV (ELEMENT_OPTIONS (= tokenIndex 206))) (MOD (ELEMENT_OPTIONS (= tokenIndex 210))))) (expr (ELEMENT_OPTIONS (= tokenIndex 213) (= p 15)))) (ALT ({this.precpred(this._ctx, 13)}? (ELEMENT_OPTIONS (= p 13))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 226))) (SUB (ELEMENT_OPTIONS (= tokenIndex 230))))) (expr (ELEMENT_OPTIONS (= tokenIndex 233) (= p 14)))) (ALT ({this.precpred(this._ctx, 12)}? (ELEMENT_OPTIONS (= p 12))) (COMA (ELEMENT_OPTIONS (= tokenIndex 242))) (expr (ELEMENT_OPTIONS (= tokenIndex 244) (= p 13)))) (ALT ({this.precpred(this._ctx, 7)}? (ELEMENT_OPTIONS (= p 7))) (= operator (SET ('<' (ELEMENT_OPTIONS (= tokenIndex 323))) ('>' (ELEMENT_OPTIONS (= tokenIndex 325))) ('<=' (ELEMENT_OPTIONS (= tokenIndex 327))) ('>=' (ELEMENT_OPTIONS (= tokenIndex 329))))) (expr (ELEMENT_OPTIONS (= tokenIndex 332) (= p 8)))) (ALT ({this.precpred(this._ctx, 6)}? (ELEMENT_OPTIONS (= p 6))) (= operator (SET ('==' (ELEMENT_OPTIONS (= tokenIndex 344))) ('!=' (ELEMENT_OPTIONS (= tokenIndex 346))) ('&&' (ELEMENT_OPTIONS (= tokenIndex 348))) ('||' (ELEMENT_OPTIONS (= tokenIndex 350))) ('true' (ELEMENT_OPTIONS (= tokenIndex 352))) ('false' (ELEMENT_OPTIONS (= tokenIndex 354))) ('!true' (ELEMENT_OPTIONS (= tokenIndex 357))) ('!false' (ELEMENT_OPTIONS (= tokenIndex 359))))) (expr (ELEMENT_OPTIONS (= tokenIndex 362) (= p 7)))))))))
2024-05-29 00:43:52:502 semantics LogManager.java:25 tokens={EOF=-1, T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, T__17=18, T__18=19, T__19=20, INSERT=21, CODE=22, MOD=23, COMA=24, NEGAN=25, AND=26, OR=27, APARENTESIS=28, CPARENTESIS=29, ALLAVE=30, CLLAVE=31, EQUALS=32, MUL=33, DIV=34, ADD=35, SUB=36, PRINT=37, IF=38, ELSE=39, WHILE=40, COND_MAT=41, COND_LOG=42, STRING=43, INT=44, ID=45, FLOAT=46, CHAR=47, SEMI=48, LINE_COMMENT=49, BLOCK_COMMENT=50, WS=51}
2024-05-29 00:43:52:502 semantics LogManager.java:25 strings={'+='=1, '-='=2, '*='=3, '/='=4, '%='=5, '--'=6, '++'=7, 'margit'=8, 'radahn'=9, 'godrick'=10, '<'=11, '>'=12, '<='=13, '>='=14, '=='=15, '!='=16, 'true'=17, 'false'=18, '!true'=19, '!false'=20, 'iniciar'=21, 'codigo'=22, '%'=23, ','=24, '!'=25, '&&'=26, '||'=27, '('=28, ')'=29, '{'=30, '}'=31, '='=32, '*'=33, '/'=34, '+'=35, '-'=36, 'MostrarMensaje'=37, 'verificar'=38, 'contrario'=39, 'repetir'=40, ';'=48}
2024-05-29 00:43:52:551 LL1 LogManager.java:25 
DECISION 0 in rule content
2024-05-29 00:43:52:551 LL1 LogManager.java:25 LL(1)? false
2024-05-29 00:43:52:551 LL1 LogManager.java:25 
DECISION 1 in rule expresiones
2024-05-29 00:43:52:551 LL1 LogManager.java:25 look=[{8..10}, 45, 37, 38, 40]
2024-05-29 00:43:52:551 LL1 LogManager.java:25 LL(1)? true
2024-05-29 00:43:52:559 LL1 LogManager.java:25 
DECISION 2 in rule declaraciones
2024-05-29 00:43:52:559 LL1 LogManager.java:25 look=[32, 48]
2024-05-29 00:43:52:559 LL1 LogManager.java:25 LL(1)? true
2024-05-29 00:43:52:559 LL1 LogManager.java:25 
DECISION 3 in rule assignament
2024-05-29 00:43:52:559 LL1 LogManager.java:25 look=[{11..20, 25..28, 35..36, 43..47}, 48]
2024-05-29 00:43:52:559 LL1 LogManager.java:25 LL(1)? true
2024-05-29 00:43:52:559 LL1 LogManager.java:25 
DECISION 4 in rule assignament
2024-05-29 00:43:52:559 LL1 LogManager.java:25 look=[{11..20, 25..28, 35..36, 43..47}, 48]
2024-05-29 00:43:52:559 LL1 LogManager.java:25 LL(1)? true
2024-05-29 00:43:52:559 LL1 LogManager.java:25 
DECISION 5 in rule assignament
2024-05-29 00:43:52:559 LL1 LogManager.java:25 look=[45, 45, 45]
2024-05-29 00:43:52:559 LL1 LogManager.java:25 LL(1)? false
2024-05-29 00:43:52:559 LL1 LogManager.java:25 
DECISION 6 in rule expr
2024-05-29 00:43:52:559 LL1 LogManager.java:25 look=[28, 25, {35..36}, {11..14}, {15..20, 26..27}, 44, 45, 43, 46, 47]
2024-05-29 00:43:52:559 LL1 LogManager.java:25 LL(1)? true
2024-05-29 00:43:52:559 LL1 LogManager.java:25 
DECISION 7 in rule expr
2024-05-29 00:43:52:559 LL1 LogManager.java:25 look=[null, null, null, null, null]
2024-05-29 00:43:52:559 LL1 LogManager.java:25 LL(1)? false
2024-05-29 00:43:52:559 LL1 LogManager.java:25 
DECISION 8 in rule expr
2024-05-29 00:43:52:559 LL1 LogManager.java:25 look=[null, null]
2024-05-29 00:43:52:559 LL1 LogManager.java:25 LL(1)? false
2024-05-29 00:43:52:559 LL1 LogManager.java:25 
DECISION 9 in rule ordencondicional
2024-05-29 00:43:52:559 LL1 LogManager.java:25 look=[39, {8..10, 31, 37..40, 45}]
2024-05-29 00:43:52:559 LL1 LogManager.java:25 LL(1)? false
2024-05-29 00:43:52:559 LL1 LogManager.java:25 
DECISION 10 in rule ordencondicional
2024-05-29 00:43:52:559 LL1 LogManager.java:25 look=[39, {8..10, 31, 37..38, 40, 45}]
2024-05-29 00:43:52:559 LL1 LogManager.java:25 LL(1)? true
2024-05-29 00:43:52:559 LL1 LogManager.java:25 
DECISION 11 in rule condicional
2024-05-29 00:43:52:559 LL1 LogManager.java:25 look=[{8..10, 37..38, 40, 45}, 31]
2024-05-29 00:43:52:559 LL1 LogManager.java:25 LL(1)? true
2024-05-29 00:43:52:559 LL1 LogManager.java:25 
DECISION 12 in rule condicional_else
2024-05-29 00:43:52:559 LL1 LogManager.java:25 look=[{8..10, 37..38, 40, 45}, 31]
2024-05-29 00:43:52:559 LL1 LogManager.java:25 LL(1)? true
2024-05-29 00:43:52:559 LL1 LogManager.java:25 
DECISION 13 in rule while
2024-05-29 00:43:52:559 LL1 LogManager.java:25 look=[{8..10, 37..38, 40, 45}, 31]
2024-05-29 00:43:52:559 LL1 LogManager.java:25 LL(1)? true
2024-05-29 00:43:52:640 action-translator LogManager.java:25 translate 
2024-05-29 00:43:52:648 action-translator LogManager.java:25 translate this.precpred(this._ctx, 14)
2024-05-29 00:43:52:648 action-translator LogManager.java:25 translate this.precpred(this._ctx, 13)
2024-05-29 00:43:52:655 action-translator LogManager.java:25 translate this.precpred(this._ctx, 12)
2024-05-29 00:43:52:655 action-translator LogManager.java:25 translate this.precpred(this._ctx, 7)
2024-05-29 00:43:52:657 action-translator LogManager.java:25 translate this.precpred(this._ctx, 6)
2024-05-29 00:43:52:657 action-translator LogManager.java:25 translate this.precpred(this._ctx, 14)
2024-05-29 00:43:52:660 action-translator LogManager.java:25 translate this.precpred(this._ctx, 13)
2024-05-29 00:43:52:660 action-translator LogManager.java:25 translate this.precpred(this._ctx, 12)
2024-05-29 00:43:52:660 action-translator LogManager.java:25 translate this.precpred(this._ctx, 7)
2024-05-29 00:43:52:660 action-translator LogManager.java:25 translate this.precpred(this._ctx, 6)
