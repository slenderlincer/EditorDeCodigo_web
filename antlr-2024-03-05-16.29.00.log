2024-03-05 16:28:59:576 grammar LogManager.java:25 load LexerRules from ./grammar/CodeFile.g4
2024-03-05 16:28:59:586 grammar LogManager.java:25 before: (COMBINED_GRAMMAR CodeFile (import LexerRules) (RULES (RULE start (BLOCK (ALT INSERT CODE '{' content '}'))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT asignaciones))) (RULE declaraciones (BLOCK (ALT tipo ID SEMI) (ALT tipo ID '=' expr SEMI))) (RULE asignaciones (BLOCK (ALT ID '=' expr SEMI))) (RULE tipo (BLOCK (ALT 'margit') (ALT 'radahn') (ALT 'godrick'))) (RULE expr (BLOCK (ALT expr (= op (BLOCK (ALT '*') (ALT '/'))) expr) (ALT expr (= op (BLOCK (ALT '+') (ALT '-'))) expr) (ALT INT) (ALT ID) (ALT '(' expr ')'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-')))))
2024-03-05 16:28:59:586 grammar LogManager.java:25 imported actions: []
2024-03-05 16:28:59:586 grammar LogManager.java:25 imported rule: (RULE INSERT (BLOCK (ALT 'iniciar')))
2024-03-05 16:28:59:586 grammar LogManager.java:25 imported rule: (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9]))))))
2024-03-05 16:28:59:586 grammar LogManager.java:25 imported rule: (RULE CODE (BLOCK (ALT 'codigo')))
2024-03-05 16:28:59:586 grammar LogManager.java:25 imported rule: (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z]))))))
2024-03-05 16:28:59:586 grammar LogManager.java:25 imported rule: (RULE SEMI (BLOCK (ALT ';')))
2024-03-05 16:28:59:586 grammar LogManager.java:25 imported rule: (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))
2024-03-05 16:28:59:586 grammar LogManager.java:25 Grammar: (COMBINED_GRAMMAR CodeFile (import LexerRules) (RULES (RULE start (BLOCK (ALT INSERT CODE '{' content '}'))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT asignaciones))) (RULE declaraciones (BLOCK (ALT tipo ID SEMI) (ALT tipo ID '=' expr SEMI))) (RULE asignaciones (BLOCK (ALT ID '=' expr SEMI))) (RULE tipo (BLOCK (ALT 'margit') (ALT 'radahn') (ALT 'godrick'))) (RULE expr (BLOCK (ALT expr (= op (BLOCK (ALT '*') (ALT '/'))) expr) (ALT expr (= op (BLOCK (ALT '+') (ALT '-'))) expr) (ALT INT) (ALT ID) (ALT '(' expr ')'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z])))))) (RULE SEMI (BLOCK (ALT ';'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-03-05 16:28:59:618 grammar LogManager.java:25 after: (COMBINED_GRAMMAR CodeFile (import LexerRules) (RULES (RULE start (BLOCK (ALT INSERT CODE '{' content '}'))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT asignaciones))) (RULE declaraciones (BLOCK (ALT tipo ID SEMI) (ALT tipo ID '=' expr SEMI))) (RULE asignaciones (BLOCK (ALT ID '=' expr SEMI))) (RULE tipo (BLOCK (ALT (SET 'margit' 'radahn' 'godrick')))) (RULE expr (BLOCK (ALT expr (= op (SET '*' '/')) expr) (ALT expr (= op (SET '+' '-')) expr) (ALT INT) (ALT ID) (ALT '(' expr ')'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z])))))) (RULE SEMI (BLOCK (ALT ';'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-03-05 16:28:59:674 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR CodeFile (import LexerRules) (RULES (RULE start (BLOCK (ALT INSERT CODE '{' content '}'))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT asignaciones))) (RULE declaraciones (BLOCK (ALT tipo ID SEMI) (ALT tipo ID '=' expr SEMI))) (RULE asignaciones (BLOCK (ALT ID '=' expr SEMI))) (RULE tipo (BLOCK (ALT (SET 'margit' 'radahn' 'godrick')))) (RULE expr (BLOCK (ALT expr (= op (SET '*' '/')) expr) (ALT expr (= op (SET '+' '-')) expr) (ALT INT) (ALT ID) (ALT '(' expr ')')))))
2024-03-05 16:28:59:674 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR CodeFileLexer (RULES (RULE T__0 (BLOCK (ALT '{'))) (RULE T__1 (BLOCK (ALT '}'))) (RULE T__2 (BLOCK (ALT '='))) (RULE T__3 (BLOCK (ALT 'margit'))) (RULE T__4 (BLOCK (ALT 'radahn'))) (RULE T__5 (BLOCK (ALT 'godrick'))) (RULE T__6 (BLOCK (ALT '('))) (RULE T__7 (BLOCK (ALT ')'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z])))))) (RULE SEMI (BLOCK (ALT ';'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-03-05 16:28:59:939 left-recursion LogManager.java:25 expr
    :   ( {} INT<tokenIndex=143>  
        | ID<tokenIndex=150>  
        | '('<tokenIndex=157> expr<tokenIndex=159> ')'<tokenIndex=161>  
        )
        (
          {this.precpred(this._ctx, 5)}?<p=5> op=('*'<tokenIndex=109> | '/'<tokenIndex=113>) expr<tokenIndex=116,p=6>
                  | {this.precpred(this._ctx, 4)}?<p=4> op=('+'<tokenIndex=129> | '-'<tokenIndex=133>) expr<tokenIndex=136,p=5>
        )*
    ;
2024-03-05 16:28:59:954 grammar LogManager.java:25 added: (RULE expr (BLOCK (ALT (BLOCK (ALT {} (INT (ELEMENT_OPTIONS (= tokenIndex 143)))) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 150)))) (ALT ('(' (ELEMENT_OPTIONS (= tokenIndex 157))) (expr (ELEMENT_OPTIONS (= tokenIndex 159))) (')' (ELEMENT_OPTIONS (= tokenIndex 161))))) (* (BLOCK (ALT ({this.precpred(this._ctx, 5)}? (ELEMENT_OPTIONS (= p 5))) (= op (SET ('*' (ELEMENT_OPTIONS (= tokenIndex 109))) ('/' (ELEMENT_OPTIONS (= tokenIndex 113))))) (expr (ELEMENT_OPTIONS (= tokenIndex 116) (= p 6)))) (ALT ({this.precpred(this._ctx, 4)}? (ELEMENT_OPTIONS (= p 4))) (= op (SET ('+' (ELEMENT_OPTIONS (= tokenIndex 129))) ('-' (ELEMENT_OPTIONS (= tokenIndex 133))))) (expr (ELEMENT_OPTIONS (= tokenIndex 136) (= p 5)))))))))
2024-03-05 16:28:59:954 semantics LogManager.java:25 tokens={EOF=-1, T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, MUL=9, DIV=10, ADD=11, SUB=12, INSERT=13, INT=14, CODE=15, ID=16, SEMI=17, WS=18}
2024-03-05 16:28:59:954 semantics LogManager.java:25 strings={'{'=1, '}'=2, '='=3, 'margit'=4, 'radahn'=5, 'godrick'=6, '('=7, ')'=8, '*'=9, '/'=10, '+'=11, '-'=12, 'iniciar'=13, 'codigo'=15, ';'=17}
2024-03-05 16:29:00:016 LL1 LogManager.java:25 
DECISION 0 in rule content
2024-03-05 16:29:00:016 LL1 LogManager.java:25 look=[{4..6, 16}, 2]
2024-03-05 16:29:00:016 LL1 LogManager.java:25 LL(1)? true
2024-03-05 16:29:00:016 LL1 LogManager.java:25 
DECISION 1 in rule expresiones
2024-03-05 16:29:00:016 LL1 LogManager.java:25 look=[{4..6}, 16]
2024-03-05 16:29:00:016 LL1 LogManager.java:25 LL(1)? true
2024-03-05 16:29:00:016 LL1 LogManager.java:25 
DECISION 2 in rule declaraciones
2024-03-05 16:29:00:016 LL1 LogManager.java:25 look=[{4..6}, {4..6}]
2024-03-05 16:29:00:016 LL1 LogManager.java:25 LL(1)? false
2024-03-05 16:29:00:016 LL1 LogManager.java:25 
DECISION 3 in rule expr
2024-03-05 16:29:00:016 LL1 LogManager.java:25 look=[14, 16, 7]
2024-03-05 16:29:00:016 LL1 LogManager.java:25 LL(1)? true
2024-03-05 16:29:00:016 LL1 LogManager.java:25 
DECISION 4 in rule expr
2024-03-05 16:29:00:016 LL1 LogManager.java:25 look=[null, null]
2024-03-05 16:29:00:016 LL1 LogManager.java:25 LL(1)? false
2024-03-05 16:29:00:016 LL1 LogManager.java:25 
DECISION 5 in rule expr
2024-03-05 16:29:00:024 LL1 LogManager.java:25 look=[null, null]
2024-03-05 16:29:00:024 LL1 LogManager.java:25 LL(1)? false
2024-03-05 16:29:00:057 action-translator LogManager.java:25 translate 
2024-03-05 16:29:00:057 action-translator LogManager.java:25 translate this.precpred(this._ctx, 5)
2024-03-05 16:29:00:062 action-translator LogManager.java:25 translate this.precpred(this._ctx, 4)
2024-03-05 16:29:00:069 action-translator LogManager.java:25 translate this.precpred(this._ctx, 5)
2024-03-05 16:29:00:069 action-translator LogManager.java:25 translate this.precpred(this._ctx, 4)
