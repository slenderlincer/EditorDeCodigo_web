2024-02-23 11:06:43:889 grammar LogManager.java:25 load LexerRules from ./grammar/CodeFile.g4
2024-02-23 11:06:43:894 grammar LogManager.java:25 before: (COMBINED_GRAMMAR CodeFile (import LexerRules) (RULES (RULE start (BLOCK (ALT INSERT CODE '{' content '}'))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT asignaciones))) (RULE declaraciones (BLOCK (ALT tipo ID SEMI) (ALT tipo (= id (BLOCK (ALT ID_invalido) (ALT INT))) SEMI) (ALT tipo ID '=' (= value (BLOCK (ALT INT) (ALT CHAR) (ALT FLOAT)))) (ALT (? (BLOCK (ALT '=' expression))) SEMI))) (RULE asignaciones (BLOCK (ALT ID '=' (= value (BLOCK (ALT INT) (ALT CHAR) (ALT FLOAT))) SEMI))) (RULE tipo (BLOCK (ALT 'margit') (ALT 'radahn') (ALT 'godrick'))) (RULE expression (BLOCK (ALT INT) (ALT ID) (ALT expression (BLOCK (ALT ADD) (ALT SUB) (ALT MUL) (ALT DIV)) expression)))))
2024-02-23 11:06:43:894 grammar LogManager.java:25 imported actions: []
2024-02-23 11:06:43:898 grammar LogManager.java:25 imported rule: (RULE INSERT (BLOCK (ALT 'iniciar')))
2024-02-23 11:06:43:898 grammar LogManager.java:25 imported rule: (RULE CODE (BLOCK (ALT 'codigo')))
2024-02-23 11:06:43:898 grammar LogManager.java:25 imported rule: (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z]))))))
2024-02-23 11:06:43:898 grammar LogManager.java:25 imported rule: (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9]))))))
2024-02-23 11:06:43:898 grammar LogManager.java:25 imported rule: (RULE FLOAT (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) [.] (+ (BLOCK (ALT [0-9]))))))
2024-02-23 11:06:43:898 grammar LogManager.java:25 imported rule: (RULE CHAR (BLOCK (ALT [a-zA-Z])))
2024-02-23 11:06:43:898 grammar LogManager.java:25 imported rule: (RULE ID_invalido (BLOCK (ALT (+ (BLOCK (ALT [A-Za-z0-9+\-]))))))
2024-02-23 11:06:43:898 grammar LogManager.java:25 imported rule: (RULE SEMI (BLOCK (ALT ';')))
2024-02-23 11:06:43:898 grammar LogManager.java:25 imported rule: (RULE ADD (BLOCK (ALT '+')))
2024-02-23 11:06:43:898 grammar LogManager.java:25 imported rule: (RULE SUB (BLOCK (ALT '-')))
2024-02-23 11:06:43:898 grammar LogManager.java:25 imported rule: (RULE MUL (BLOCK (ALT '*')))
2024-02-23 11:06:43:898 grammar LogManager.java:25 imported rule: (RULE DIV (BLOCK (ALT '/')))
2024-02-23 11:06:43:898 grammar LogManager.java:25 imported rule: (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))
2024-02-23 11:06:43:898 grammar LogManager.java:25 Grammar: (COMBINED_GRAMMAR CodeFile (import LexerRules) (RULES (RULE start (BLOCK (ALT INSERT CODE '{' content '}'))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT asignaciones))) (RULE declaraciones (BLOCK (ALT tipo ID SEMI) (ALT tipo (= id (BLOCK (ALT ID_invalido) (ALT INT))) SEMI) (ALT tipo ID '=' (= value (BLOCK (ALT INT) (ALT CHAR) (ALT FLOAT)))) (ALT (? (BLOCK (ALT '=' expression))) SEMI))) (RULE asignaciones (BLOCK (ALT ID '=' (= value (BLOCK (ALT INT) (ALT CHAR) (ALT FLOAT))) SEMI))) (RULE tipo (BLOCK (ALT 'margit') (ALT 'radahn') (ALT 'godrick'))) (RULE expression (BLOCK (ALT INT) (ALT ID) (ALT expression (BLOCK (ALT ADD) (ALT SUB) (ALT MUL) (ALT DIV)) expression))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z])))))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE FLOAT (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) [.] (+ (BLOCK (ALT [0-9])))))) (RULE CHAR (BLOCK (ALT [a-zA-Z]))) (RULE ID_invalido (BLOCK (ALT (+ (BLOCK (ALT [A-Za-z0-9+\-])))))) (RULE SEMI (BLOCK (ALT ';'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-02-23 11:06:43:919 grammar LogManager.java:25 after: (COMBINED_GRAMMAR CodeFile (import LexerRules) (RULES (RULE start (BLOCK (ALT INSERT CODE '{' content '}'))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT asignaciones))) (RULE declaraciones (BLOCK (ALT tipo ID SEMI) (ALT tipo (= id (SET ID_invalido INT)) SEMI) (ALT tipo ID '=' (= value (SET INT CHAR FLOAT))) (ALT (? (BLOCK (ALT '=' expression))) SEMI))) (RULE asignaciones (BLOCK (ALT ID '=' (= value (SET INT CHAR FLOAT)) SEMI))) (RULE tipo (BLOCK (ALT (SET 'margit' 'radahn' 'godrick')))) (RULE expression (BLOCK (ALT INT) (ALT ID) (ALT expression (SET ADD SUB MUL DIV) expression))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z])))))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE FLOAT (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) [.] (+ (BLOCK (ALT [0-9])))))) (RULE CHAR (BLOCK (ALT [a-zA-Z]))) (RULE ID_invalido (BLOCK (ALT (+ (BLOCK (ALT [A-Za-z0-9+\-])))))) (RULE SEMI (BLOCK (ALT ';'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-02-23 11:06:43:953 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR CodeFile (import LexerRules) (RULES (RULE start (BLOCK (ALT INSERT CODE '{' content '}'))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT asignaciones))) (RULE declaraciones (BLOCK (ALT tipo ID SEMI) (ALT tipo (= id (SET ID_invalido INT)) SEMI) (ALT tipo ID '=' (= value (SET INT CHAR FLOAT))) (ALT (? (BLOCK (ALT '=' expression))) SEMI))) (RULE asignaciones (BLOCK (ALT ID '=' (= value (SET INT CHAR FLOAT)) SEMI))) (RULE tipo (BLOCK (ALT (SET 'margit' 'radahn' 'godrick')))) (RULE expression (BLOCK (ALT INT) (ALT ID) (ALT expression (SET ADD SUB MUL DIV) expression)))))
2024-02-23 11:06:43:953 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR CodeFileLexer (RULES (RULE T__0 (BLOCK (ALT '{'))) (RULE T__1 (BLOCK (ALT '}'))) (RULE T__2 (BLOCK (ALT '='))) (RULE T__3 (BLOCK (ALT 'margit'))) (RULE T__4 (BLOCK (ALT 'radahn'))) (RULE T__5 (BLOCK (ALT 'godrick'))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z])))))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE FLOAT (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) [.] (+ (BLOCK (ALT [0-9])))))) (RULE CHAR (BLOCK (ALT [a-zA-Z]))) (RULE ID_invalido (BLOCK (ALT (+ (BLOCK (ALT [A-Za-z0-9+\-])))))) (RULE SEMI (BLOCK (ALT ';'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
