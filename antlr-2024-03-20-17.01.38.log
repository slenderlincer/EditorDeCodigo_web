2024-03-20 17:01:37:736 grammar LogManager.java:25 load LexerRules from ./grammar/CodeFile.g4
2024-03-20 17:01:37:737 grammar LogManager.java:25 before: (COMBINED_GRAMMAR CodeFile (import LexerRules) (RULES (RULE start (BLOCK (ALT INSERT CODE '{' content '}'))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT asignaciones) (ALT imprimir) (ALT condition_if))) (RULE declaraciones (BLOCK (ALT tipo ID SEMI) (ALT tipo ID '=' expr SEMI))) (RULE asignaciones (BLOCK (ALT ID '=' expr SEMI))) (RULE imprimir (BLOCK (ALT 'MostrarMensaje(' expr ')' SEMI))) (RULE ordenCondicion (BLOCK (ALT condition_if (* (BLOCK (ALT otherwiseWithCondition))) (? (BLOCK (ALT otherwise)))))) (RULE condition_if (BLOCK (ALT IF '(' condicion ')' '{' (* (BLOCK (ALT expresiones))) '}'))) (RULE otherwiseWithCondition (BLOCK (ALT ELSE condition_if))) (RULE otherwise (BLOCK (ALT ELSE '{' (* (BLOCK (ALT expresiones))) '}'))) (RULE condicion (BLOCK (ALT expr (= op (BLOCK (ALT MAYORQUE) (ALT MENORQUE) (ALT MAYORIGUAL) (ALT MENORIGUAL) (ALT DOBLEIGUAL) (ALT NEGACION))) expr) (ALT VERDADERO))) (RULE tipo (BLOCK (ALT 'margit') (ALT 'radahn') (ALT 'godrick'))) (RULE expr (BLOCK (ALT expr (= op (BLOCK (ALT '*') (ALT '/'))) expr) (ALT expr (= op (BLOCK (ALT '+') (ALT '-'))) expr) (ALT INT) (ALT ID) (ALT STRING) (ALT '(' expr ')'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE MAYORQUE (BLOCK (ALT '>'))) (RULE MENORQUE (BLOCK (ALT '<'))) (RULE MAYORIGUAL (BLOCK (ALT '>='))) (RULE MENORIGUAL (BLOCK (ALT '<='))) (RULE DOBLEIGUAL (BLOCK (ALT '=='))) (RULE NEGACION (BLOCK (ALT '!='))) (RULE VERDADERO (BLOCK (ALT 'verdad')))))
2024-03-20 17:01:37:745 grammar LogManager.java:25 imported actions: []
2024-03-20 17:01:37:745 grammar LogManager.java:25 imported rule: (RULE INSERT (BLOCK (ALT 'iniciar')))
2024-03-20 17:01:37:745 grammar LogManager.java:25 imported rule: (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9]))))))
2024-03-20 17:01:37:745 grammar LogManager.java:25 imported rule: (RULE CODE (BLOCK (ALT 'codigo')))
2024-03-20 17:01:37:745 grammar LogManager.java:25 imported rule: (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z]))))))
2024-03-20 17:01:37:745 grammar LogManager.java:25 imported rule: (RULE SEMI (BLOCK (ALT ';')))
2024-03-20 17:01:37:745 grammar LogManager.java:25 imported rule: (RULE MUL (BLOCK (ALT '*')))
2024-03-20 17:01:37:745 grammar LogManager.java:25 imported rule: (RULE DIV (BLOCK (ALT '/')))
2024-03-20 17:01:37:745 grammar LogManager.java:25 imported rule: (RULE ADD (BLOCK (ALT '+')))
2024-03-20 17:01:37:745 grammar LogManager.java:25 imported rule: (RULE SUB (BLOCK (ALT '-')))
2024-03-20 17:01:37:745 grammar LogManager.java:25 imported rule: (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))
2024-03-20 17:01:37:745 grammar LogManager.java:25 Grammar: (COMBINED_GRAMMAR CodeFile (import LexerRules) (RULES (RULE start (BLOCK (ALT INSERT CODE '{' content '}'))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT asignaciones) (ALT imprimir) (ALT condition_if))) (RULE declaraciones (BLOCK (ALT tipo ID SEMI) (ALT tipo ID '=' expr SEMI))) (RULE asignaciones (BLOCK (ALT ID '=' expr SEMI))) (RULE imprimir (BLOCK (ALT 'MostrarMensaje(' expr ')' SEMI))) (RULE ordenCondicion (BLOCK (ALT condition_if (* (BLOCK (ALT otherwiseWithCondition))) (? (BLOCK (ALT otherwise)))))) (RULE condition_if (BLOCK (ALT IF '(' condicion ')' '{' (* (BLOCK (ALT expresiones))) '}'))) (RULE otherwiseWithCondition (BLOCK (ALT ELSE condition_if))) (RULE otherwise (BLOCK (ALT ELSE '{' (* (BLOCK (ALT expresiones))) '}'))) (RULE condicion (BLOCK (ALT expr (= op (BLOCK (ALT MAYORQUE) (ALT MENORQUE) (ALT MAYORIGUAL) (ALT MENORIGUAL) (ALT DOBLEIGUAL) (ALT NEGACION))) expr) (ALT VERDADERO))) (RULE tipo (BLOCK (ALT 'margit') (ALT 'radahn') (ALT 'godrick'))) (RULE expr (BLOCK (ALT expr (= op (BLOCK (ALT '*') (ALT '/'))) expr) (ALT expr (= op (BLOCK (ALT '+') (ALT '-'))) expr) (ALT INT) (ALT ID) (ALT STRING) (ALT '(' expr ')'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE MAYORQUE (BLOCK (ALT '>'))) (RULE MENORQUE (BLOCK (ALT '<'))) (RULE MAYORIGUAL (BLOCK (ALT '>='))) (RULE MENORIGUAL (BLOCK (ALT '<='))) (RULE DOBLEIGUAL (BLOCK (ALT '=='))) (RULE NEGACION (BLOCK (ALT '!='))) (RULE VERDADERO (BLOCK (ALT 'verdad'))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z])))))) (RULE SEMI (BLOCK (ALT ';'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-03-20 17:01:37:791 grammar LogManager.java:25 after: (COMBINED_GRAMMAR CodeFile (import LexerRules) (RULES (RULE start (BLOCK (ALT INSERT CODE '{' content '}'))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT asignaciones) (ALT imprimir) (ALT condition_if))) (RULE declaraciones (BLOCK (ALT tipo ID SEMI) (ALT tipo ID '=' expr SEMI))) (RULE asignaciones (BLOCK (ALT ID '=' expr SEMI))) (RULE imprimir (BLOCK (ALT 'MostrarMensaje(' expr ')' SEMI))) (RULE ordenCondicion (BLOCK (ALT condition_if (* (BLOCK (ALT otherwiseWithCondition))) (? (BLOCK (ALT otherwise)))))) (RULE condition_if (BLOCK (ALT IF '(' condicion ')' '{' (* (BLOCK (ALT expresiones))) '}'))) (RULE otherwiseWithCondition (BLOCK (ALT ELSE condition_if))) (RULE otherwise (BLOCK (ALT ELSE '{' (* (BLOCK (ALT expresiones))) '}'))) (RULE condicion (BLOCK (ALT expr (= op (SET MAYORQUE MENORQUE MAYORIGUAL MENORIGUAL DOBLEIGUAL NEGACION)) expr) (ALT VERDADERO))) (RULE tipo (BLOCK (ALT (SET 'margit' 'radahn' 'godrick')))) (RULE expr (BLOCK (ALT expr (= op (SET '*' '/')) expr) (ALT expr (= op (SET '+' '-')) expr) (ALT INT) (ALT ID) (ALT STRING) (ALT '(' expr ')'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE MAYORQUE (BLOCK (ALT '>'))) (RULE MENORQUE (BLOCK (ALT '<'))) (RULE MAYORIGUAL (BLOCK (ALT '>='))) (RULE MENORIGUAL (BLOCK (ALT '<='))) (RULE DOBLEIGUAL (BLOCK (ALT '=='))) (RULE NEGACION (BLOCK (ALT '!='))) (RULE VERDADERO (BLOCK (ALT 'verdad'))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z])))))) (RULE SEMI (BLOCK (ALT ';'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-03-20 17:01:37:850 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR CodeFile (import LexerRules) (RULES (RULE start (BLOCK (ALT INSERT CODE '{' content '}'))) (RULE content (BLOCK (ALT (* (BLOCK (ALT expresiones)))))) (RULE expresiones (BLOCK (ALT declaraciones) (ALT asignaciones) (ALT imprimir) (ALT condition_if))) (RULE declaraciones (BLOCK (ALT tipo ID SEMI) (ALT tipo ID '=' expr SEMI))) (RULE asignaciones (BLOCK (ALT ID '=' expr SEMI))) (RULE imprimir (BLOCK (ALT 'MostrarMensaje(' expr ')' SEMI))) (RULE ordenCondicion (BLOCK (ALT condition_if (* (BLOCK (ALT otherwiseWithCondition))) (? (BLOCK (ALT otherwise)))))) (RULE condition_if (BLOCK (ALT IF '(' condicion ')' '{' (* (BLOCK (ALT expresiones))) '}'))) (RULE otherwiseWithCondition (BLOCK (ALT ELSE condition_if))) (RULE otherwise (BLOCK (ALT ELSE '{' (* (BLOCK (ALT expresiones))) '}'))) (RULE condicion (BLOCK (ALT expr (= op (SET MAYORQUE MENORQUE MAYORIGUAL MENORIGUAL DOBLEIGUAL NEGACION)) expr) (ALT VERDADERO))) (RULE tipo (BLOCK (ALT (SET 'margit' 'radahn' 'godrick')))) (RULE expr (BLOCK (ALT expr (= op (SET '*' '/')) expr) (ALT expr (= op (SET '+' '-')) expr) (ALT INT) (ALT ID) (ALT STRING) (ALT '(' expr ')')))))
2024-03-20 17:01:37:850 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR CodeFileLexer (RULES (RULE T__0 (BLOCK (ALT '{'))) (RULE T__1 (BLOCK (ALT '}'))) (RULE T__2 (BLOCK (ALT '='))) (RULE T__3 (BLOCK (ALT 'MostrarMensaje('))) (RULE T__4 (BLOCK (ALT ')'))) (RULE T__5 (BLOCK (ALT '('))) (RULE T__6 (BLOCK (ALT 'margit'))) (RULE T__7 (BLOCK (ALT 'radahn'))) (RULE T__8 (BLOCK (ALT 'godrick'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE MAYORQUE (BLOCK (ALT '>'))) (RULE MENORQUE (BLOCK (ALT '<'))) (RULE MAYORIGUAL (BLOCK (ALT '>='))) (RULE MENORIGUAL (BLOCK (ALT '<='))) (RULE DOBLEIGUAL (BLOCK (ALT '=='))) (RULE NEGACION (BLOCK (ALT '!='))) (RULE VERDADERO (BLOCK (ALT 'verdad'))) (RULE INSERT (BLOCK (ALT 'iniciar'))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE CODE (BLOCK (ALT 'codigo'))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z])))))) (RULE SEMI (BLOCK (ALT ';'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2024-03-20 17:01:38:261 left-recursion LogManager.java:25 expr
    :   ( {} INT<tokenIndex=268>  
        | ID<tokenIndex=275>  
        | STRING<tokenIndex=282>  
        | '('<tokenIndex=289> expr<tokenIndex=291> ')'<tokenIndex=293>  
        )
        (
          {this.precpred(this._ctx, 6)}?<p=6> op=('*'<tokenIndex=234> | '/'<tokenIndex=238>) expr<tokenIndex=241,p=7>
                  | {this.precpred(this._ctx, 5)}?<p=5> op=('+'<tokenIndex=254> | '-'<tokenIndex=258>) expr<tokenIndex=261,p=6>
        )*
    ;
2024-03-20 17:01:38:278 grammar LogManager.java:25 added: (RULE expr (BLOCK (ALT (BLOCK (ALT {} (INT (ELEMENT_OPTIONS (= tokenIndex 268)))) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 275)))) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 282)))) (ALT ('(' (ELEMENT_OPTIONS (= tokenIndex 289))) (expr (ELEMENT_OPTIONS (= tokenIndex 291))) (')' (ELEMENT_OPTIONS (= tokenIndex 293))))) (* (BLOCK (ALT ({this.precpred(this._ctx, 6)}? (ELEMENT_OPTIONS (= p 6))) (= op (SET ('*' (ELEMENT_OPTIONS (= tokenIndex 234))) ('/' (ELEMENT_OPTIONS (= tokenIndex 238))))) (expr (ELEMENT_OPTIONS (= tokenIndex 241) (= p 7)))) (ALT ({this.precpred(this._ctx, 5)}? (ELEMENT_OPTIONS (= p 5))) (= op (SET ('+' (ELEMENT_OPTIONS (= tokenIndex 254))) ('-' (ELEMENT_OPTIONS (= tokenIndex 258))))) (expr (ELEMENT_OPTIONS (= tokenIndex 261) (= p 6)))))))))
2024-03-20 17:01:38:282 semantics LogManager.java:25 tokens={EOF=-1, T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, IF=10, ELSE=11, STRING=12, MAYORQUE=13, MENORQUE=14, MAYORIGUAL=15, MENORIGUAL=16, DOBLEIGUAL=17, NEGACION=18, VERDADERO=19, INSERT=20, INT=21, CODE=22, ID=23, SEMI=24, MUL=25, DIV=26, ADD=27, SUB=28, WS=29}
2024-03-20 17:01:38:282 semantics LogManager.java:25 strings={'{'=1, '}'=2, '='=3, 'MostrarMensaje('=4, ')'=5, '('=6, 'margit'=7, 'radahn'=8, 'godrick'=9, 'if'=10, 'else'=11, '>'=13, '<'=14, '>='=15, '<='=16, '=='=17, '!='=18, 'verdad'=19, 'iniciar'=20, 'codigo'=22, ';'=24, '*'=25, '/'=26, '+'=27, '-'=28}
2024-03-20 17:01:38:305 LL1 LogManager.java:25 
DECISION 0 in rule content
2024-03-20 17:01:38:311 LL1 LogManager.java:25 look=[{4, 7..10, 23}, 2]
2024-03-20 17:01:38:311 LL1 LogManager.java:25 LL(1)? true
2024-03-20 17:01:38:311 LL1 LogManager.java:25 
DECISION 1 in rule expresiones
2024-03-20 17:01:38:311 LL1 LogManager.java:25 look=[{7..9}, 23, 4, 10]
2024-03-20 17:01:38:311 LL1 LogManager.java:25 LL(1)? true
2024-03-20 17:01:38:311 LL1 LogManager.java:25 
DECISION 2 in rule declaraciones
2024-03-20 17:01:38:311 LL1 LogManager.java:25 look=[{7..9}, {7..9}]
2024-03-20 17:01:38:311 LL1 LogManager.java:25 LL(1)? false
2024-03-20 17:01:38:311 LL1 LogManager.java:25 
DECISION 3 in rule ordenCondicion
2024-03-20 17:01:38:311 LL1 LogManager.java:25 look=[11, {<EOF>, 11}]
2024-03-20 17:01:38:311 LL1 LogManager.java:25 LL(1)? false
2024-03-20 17:01:38:311 LL1 LogManager.java:25 
DECISION 4 in rule ordenCondicion
2024-03-20 17:01:38:311 LL1 LogManager.java:25 look=[11, <EOF>]
2024-03-20 17:01:38:311 LL1 LogManager.java:25 LL(1)? true
2024-03-20 17:01:38:311 LL1 LogManager.java:25 
DECISION 5 in rule condition_if
2024-03-20 17:01:38:311 LL1 LogManager.java:25 look=[{4, 7..10, 23}, 2]
2024-03-20 17:01:38:311 LL1 LogManager.java:25 LL(1)? true
2024-03-20 17:01:38:311 LL1 LogManager.java:25 
DECISION 6 in rule otherwise
2024-03-20 17:01:38:311 LL1 LogManager.java:25 look=[{4, 7..10, 23}, 2]
2024-03-20 17:01:38:311 LL1 LogManager.java:25 LL(1)? true
2024-03-20 17:01:38:311 LL1 LogManager.java:25 
DECISION 7 in rule condicion
2024-03-20 17:01:38:311 LL1 LogManager.java:25 look=[{6, 12, 21, 23}, 19]
2024-03-20 17:01:38:311 LL1 LogManager.java:25 LL(1)? true
2024-03-20 17:01:38:311 LL1 LogManager.java:25 
DECISION 8 in rule expr
2024-03-20 17:01:38:311 LL1 LogManager.java:25 look=[21, 23, 12, 6]
2024-03-20 17:01:38:311 LL1 LogManager.java:25 LL(1)? true
2024-03-20 17:01:38:311 LL1 LogManager.java:25 
DECISION 9 in rule expr
2024-03-20 17:01:38:311 LL1 LogManager.java:25 look=[null, null]
2024-03-20 17:01:38:311 LL1 LogManager.java:25 LL(1)? false
2024-03-20 17:01:38:311 LL1 LogManager.java:25 
DECISION 10 in rule expr
2024-03-20 17:01:38:311 LL1 LogManager.java:25 look=[null, null]
2024-03-20 17:01:38:311 LL1 LogManager.java:25 LL(1)? false
2024-03-20 17:01:38:381 action-translator LogManager.java:25 translate 
2024-03-20 17:01:38:383 action-translator LogManager.java:25 translate this.precpred(this._ctx, 6)
2024-03-20 17:01:38:383 action-translator LogManager.java:25 translate this.precpred(this._ctx, 5)
2024-03-20 17:01:38:385 action-translator LogManager.java:25 translate this.precpred(this._ctx, 6)
2024-03-20 17:01:38:385 action-translator LogManager.java:25 translate this.precpred(this._ctx, 5)
